{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat_channel.jpg","path":"images/wechat_channel.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/custom.js","path":"js/src/custom.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/nprogress.js","path":"js/third-party/nprogress.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard.js","path":"lib/clipboard/clipboard.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard.d.ts","path":"lib/clipboard/clipboard.d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard.test-d.ts","path":"lib/clipboard/clipboard.test-d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/actions/copy.js","path":"lib/clipboard/actions/copy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/actions/cut.js","path":"lib/clipboard/actions/cut.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/actions/default.js","path":"lib/clipboard/actions/default.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/common/command.js","path":"lib/clipboard/common/command.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/common/create-fake-element.js","path":"lib/clipboard/common/create-fake-element.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"734c5f8e6a0d83e9903c96a2f05b8fb4fa26be96","modified":1666601220516},{"_id":"source/_posts/deeplearning1.md","hash":"3160cc026f507d3d6a73de84650e3cf7c1d28d66","modified":1666601004416},{"_id":"source/_posts/docker常用命令.md","hash":"8b004912b87a17df17977d284e10e23bff87fa51","modified":1666601004416},{"_id":"source/_posts/django使用教程.md","hash":"66d78fd62a204b04dd72582a1cd10e920a09010c","modified":1666601004416},{"_id":"source/_posts/git使用.md","hash":"daa0dd9fcc38abc34efcc6589987bb4b939cc2d7","modified":1666601004417},{"_id":"source/_posts/flask1.md","hash":"19c53231e2182dc8c91460cd485c094da923fdf3","modified":1666601004417},{"_id":"source/_posts/mongodb使用.md","hash":"85999c81feeefe7c0ed5ed8b53950d55ad5e8093","modified":1666601004417},{"_id":"source/_posts/mysql基础.md","hash":"312db53e9a0bf735f303a3513ba3d00f473dc29e","modified":1666601004417},{"_id":"source/start.js","hash":"f5a4d2e646cb93b2e3f1488c0574e4d4e2020728","modified":1666601004419},{"_id":"source/_posts/mysql面试题.md","hash":"5f5a349672e1de68ff153657ddd0880381ff5d45","modified":1666601004417},{"_id":"source/watch.json","hash":"435e5ba60d96eece2844751cdfb33b00b1f669e5","modified":1666601004419},{"_id":"source/_posts/linux常用命令.md","hash":"ad1b6d32d7cdb61376998fbf863302092e8296bd","modified":1666601004417},{"_id":"source/_posts/hexo基本使用.md","hash":"cc51546f440e2eaeaac920592d77f473fc3aaea7","modified":1666601004417},{"_id":"source/_posts/o基础也能学会的人工智能笔记整理.md","hash":"005f626affa7ba45cb861de9a46fec86d17c5478","modified":1666601004417},{"_id":"source/_posts/pycharm插件整理.md","hash":"9f472f9e0c58aa9ab42b56aed1c3b1b575d77d8c","modified":1666601004417},{"_id":"source/_posts/python基础概念.md","hash":"59c8c8e5fc5b350c84bea92e3e4b14b30ffd7de6","modified":1666772923363},{"_id":"source/_posts/python关键字整理.md","hash":"3e545d200740b1ea91fc75697223ec7d73c40267","modified":1666601004417},{"_id":"source/_posts/python第三方模块整理.md","hash":"0156998389f61dfe80c8651b770299452dd06167","modified":1666601004418},{"_id":"source/_posts/ros系统学习笔记.md","hash":"1e7278f0ca119d136df6a1809cf8c4891fb6c692","modified":1666601004418},{"_id":"source/_posts/scrapy框架使用.md","hash":"fdf9d9ecf401f256f7b029a8b5fd9dfb99940363","modified":1666601004418},{"_id":"source/_posts/svn使用.md","hash":"1d4cdc7f249c95e4519dc2225245df8e531e8e46","modified":1666601004418},{"_id":"source/about/index.md","hash":"bc05d79ce422dca47e204e6e8472a370f5f2e301","modified":1666601004419},{"_id":"source/_posts/tensorflow概念整理.md","hash":"f2389e42e3ef9fcd871debdf41f892ffce21cd8b","modified":1666601004418},{"_id":"source/_posts/web开发2-python项目部署.md","hash":"74f772ba62bcf594d4cfc606b4fd8677027a0813","modified":1666601004418},{"_id":"source/_posts/web开发1-nginx部署.md","hash":"60f173bec03d0b96219f3efcd60108f8f62576ad","modified":1666601004418},{"_id":"source/_posts/window快捷键.md","hash":"bc2ee6e932f4a655a30a071ffd6fa014a60edc9a","modified":1666601004418},{"_id":"source/_posts/常用密码.md","hash":"800fdfb07f2cef3985dded2502649100a76529d8","modified":1666601004418},{"_id":"source/_posts/编码习惯整理.md","hash":"98bf37fa38795b1709db58be6db499151b3621da","modified":1666601004419},{"_id":"source/_posts/数据分析.md","hash":"de3b0aa16e333a179686c510ff13a48b8878bbe1","modified":1666601004418},{"_id":"source/_posts/软件安装.md","hash":"20cd0ffbf3e63639408b6b5d7c2dbb7ceb96a2fc","modified":1666601004419},{"_id":"source/_posts/yolo学习笔记.md","hash":"948fa1946f3d7e8bf570eb5f7f99d9f885adffd2","modified":1666601004418},{"_id":"source/categories/index.md","hash":"aea5339c6683750e0f396c50c104fc3fce11e17c","modified":1666601004419},{"_id":"source/tags/index.md","hash":"10f27c0e4e2dfe2c6f333db606c33d37e6a2429c","modified":1666601004419},{"_id":"source/404/index.md","hash":"6aed9f9be6821acdaddf24363bbb27ae9f35741d","modified":1666601004416},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1666601004419},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1666601004419},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1666601004419},{"_id":"themes/next/_vendors.yml","hash":"b572c4647097420f254400164694ebf5199e325f","modified":1666601004422},{"_id":"themes/next/.gitignore","hash":"68d2f59b79fbc9edf358295ac38515c4b32126c1","modified":1666601004421},{"_id":"themes/next/package.json","hash":"a978308c0c5a5750ac1dae384ca973973203acb4","modified":1666601004431},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1666601004421},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1666601004422},{"_id":"themes/next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1666601004422},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1666601004421},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1666601004431},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1666601004420},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1666601004420},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1666601004420},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1666601004420},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1666601004420},{"_id":"themes/next/.github/labeler.yml","hash":"e7033752b1f7c35adb61c2b38aad0a9202cdd19b","modified":1666601004420},{"_id":"themes/next/_config.yml","hash":"ce5ad867d49b764b36342b91f3c7237a53dd9aca","modified":1666601004422},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1666601004420},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1666601004421},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1666601004419},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1666601004420},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1666601004422},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1666601004422},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1666601004423},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1666601004423},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1666601004423},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1666601004423},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1666601004422},{"_id":"themes/next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1666601004423},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1666601004423},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1666601004423},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1666601004424},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1666601004424},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1666601004424},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1666601004424},{"_id":"themes/next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1666601004424},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1666601004423},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1666601004424},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1666601004424},{"_id":"themes/next/languages/tr.yml","hash":"55b38c7617c24bdc27c9de6cf39f4b191d154fb8","modified":1666601004424},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1666601004424},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1666601004424},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1666601004424},{"_id":"themes/next/languages/si.yml","hash":"2a9861db4547a524b2609c1e7e1061d2e9d48ee4","modified":1666601004424},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1666601004425},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1666601004425},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1666601004430},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1666601004430},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1666601004430},{"_id":"themes/next/layout/_layout.njk","hash":"2b0b0227b49e7ca935e31217c665059264ddfa97","modified":1666601004425},{"_id":"themes/next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1666601004430},{"_id":"themes/next/languages/zh-CN.yml","hash":"efea3341e37c68a2e03138383a4d1c9e10e116a5","modified":1666601004424},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1666601004431},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1666601004420},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1666601004431},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1666601004420},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1666601004420},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1666601004434},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1666601004421},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1666601004421},{"_id":"themes/next/.github/workflows/linter.yml","hash":"a2be8ad35051b82d80a780494813b28154583273","modified":1666601004421},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1666601004421},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1666601004421},{"_id":"themes/next/.github/workflows/stale.yml","hash":"17586ef86bfc264eb5587c9d8246b7fbcfdbcaa3","modified":1666601004421},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1666601004421},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1666601004423},{"_id":"themes/next/layout/_custom/custom.njk","hash":"b212694dd305b510870074761703a00668611d80","modified":1666601004425},{"_id":"themes/next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1666601004423},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1666601004447},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1666601004423},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1666601004420},{"_id":"themes/next/layout/_macro/my-copyright.njk","hash":"e0c14e2b922cac6e8eca8ce4ad615b1a436eae8d","modified":1666601004425},{"_id":"themes/next/layout/_macro/passage-end-tag.njk","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1666601004425},{"_id":"themes/next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1666601004422},{"_id":"themes/next/layout/_macro/post.njk","hash":"45a9633392806a583f24495c411c75e47fbd3307","modified":1666601004425},{"_id":"themes/next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1666601004425},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1666601004426},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1666601004427},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"0d058ad5f2f884a03d2f6a66fdc7849edf9c0098","modified":1666601004425},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1666601004428},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1666601004428},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1666601004425},{"_id":"themes/next/layout/_third-party/index.njk","hash":"467b45a4912369bcba77908151e76a3f3ad0fed2","modified":1666601004429},{"_id":"themes/next/layout/_scripts/lean-analytics.njk","hash":"59fb1164da849b98ef62e1a996a4d935f5aab74d","modified":1666601004428},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1666601004431},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"80fd1a45e91207fc16df1136e12b8b71b4f65dea","modified":1666601004429},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1666601004432},{"_id":"themes/next/scripts/filters/minify.js","hash":"7793c9f7e268c0fca46ad86bf522deb83c2e4a5c","modified":1666601004432},{"_id":"themes/next/layout/_partials/footer.njk","hash":"49a1e407acd56a25a811ec788b83320e00ffb693","modified":1666601004426},{"_id":"themes/next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1666601004432},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1666601004433},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d072dbd6c0782c22877d6fae9675942f6fd1f80a","modified":1666601004433},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1666601004429},{"_id":"themes/next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1666601004432},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"454ed1fac07be972c7ec911092f0995cd925aab3","modified":1666601004433},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1666601004433},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1666601004433},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1666601004433},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1666601004433},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1666601004433},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1666601004433},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1666601004428},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1666601004433},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1666601004433},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1666601004434},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1666601004434},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1666601004434},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1666601004434},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1666601004434},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1666601004429},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1666601004434},{"_id":"themes/next/source/css/main.styl","hash":"9d213e87bac7bef172832e622c27dae0114513c6","modified":1666601004441},{"_id":"themes/next/source/css/_mixins.styl","hash":"8b0c0353d360b984d285860697b2ccbec78da462","modified":1666601004439},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1666601004441},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1666601004441},{"_id":"themes/next/source/images/avatar.jpg","hash":"5d637e4cc0487c33a3587e1aef1ccd26e9ef9465","modified":1666601004442},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1666601004441},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1666601004442},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1666601004442},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1666601004442},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1666601004442},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1666601004443},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1666601004443},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1666601004444},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1666601004443},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1666601004433},{"_id":"themes/next/source/js/config.js","hash":"3992f776d34f2461852b17345730e34f50a77aee","modified":1666601004443},{"_id":"themes/next/source/js/next-boot.js","hash":"873e52a851a6ce8dc61b870fa7083da4d2304b7b","modified":1666601004444},{"_id":"themes/next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1666601004444},{"_id":"themes/next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1666601004444},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1666601004448},{"_id":"themes/next/source/js/utils.js","hash":"de986994846f142d274edd2d5ffdcaee014122cd","modified":1666601004446},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1666601004447},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1666601004447},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1666601004447},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1666601004448},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1666601004448},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1666601004447},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1666601004447},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1666601004448},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1666601004448},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1666601004448},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1666601004448},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1666601004448},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1666601004448},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1666601004448},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":1666601004426},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"c905c44230c79b14236295edccc8d6869dd2fda8","modified":1666601004426},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1666601004426},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1666601004426},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1666601004448},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1666601004426},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1666601004426},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1666601004426},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1666601004426},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1666601004427},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1666601004427},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1666601004426},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1666601004427},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1666601004427},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1666601004427},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"cc1a11190b1a55ae8d4252d296803bc19db90bc5","modified":1666601004427},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1666601004427},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1666601004427},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1666601004427},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1666601004426},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"a2250458c0621dde85daadfd3ff6292f532fb77f","modified":1666601004427},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1666601004427},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1666601004428},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1666601004428},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1666601004427},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1666601004428},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"5c54ef9060195c6bdcb3bbd4cc1af938a443fb23","modified":1666601004428},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1666601004428},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1666601004428},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1666601004428},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1666601004429},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1666601004428},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1666601004429},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1666601004429},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1666601004429},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1666601004429},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1666601004429},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1666601004429},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1666601004429},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1666601004429},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1666601004430},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":1666601004430},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1666601004430},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1666601004430},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1666601004430},{"_id":"themes/next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":1666601004431},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1666601004431},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1666601004431},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1666601004431},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"13b3301aa9b613975630502d93e6ae82c5293aa8","modified":1666601004431},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1666601004432},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1666601004432},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1666601004432},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1666601004432},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1666601004432},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1666601004430},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1666601004430},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1666601004432},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1666601004432},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1666601004432},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1666601004430},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1666601004432},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1666601004440},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1666601004441},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"713b5915bec74e0edc1fda0d52dfcda51f9f92b3","modified":1666601004441},{"_id":"themes/next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1666601004441},{"_id":"themes/next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1666601004444},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1666601004441},{"_id":"themes/next/source/js/src/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1666601004444},{"_id":"themes/next/source/js/src/custom.js","hash":"90b139a071ae7af9b71d8cd9c34929d8f4349a7b","modified":1666601004444},{"_id":"themes/next/source/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1666601004445},{"_id":"themes/next/source/js/src/fireworks.js","hash":"233e9a9ed0e8aa4799bfbe02899f0c34f9af5a7b","modified":1666601004444},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1666601004445},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1666601004445},{"_id":"themes/next/source/lib/clipboard/clipboard.js","hash":"bace602571b3d24e69397a70e2dd768a75acc507","modified":1666601004447},{"_id":"themes/next/source/lib/clipboard/clipboard.d.ts","hash":"587a670234b372c2514387186e30408d64feff63","modified":1666601004447},{"_id":"themes/next/source/lib/clipboard/clipboard.test-d.ts","hash":"3798e74c0121da7c6e9540a7eaed712d3b6a3ae8","modified":1666601004447},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1666601004437},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1666601004434},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1666601004434},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1666601004437},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1666601004434},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":1666601004436},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8d7ad58c9086161b05843aa7e44973148be33611","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1666601004439},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1666601004439},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1666601004439},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1666601004439},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1666601004439},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2d337a12c5c668ee64447bda5a9ed64eaed5b29e","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1666601004440},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1666601004440},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1666601004444},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1666601004444},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1666601004445},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"106f3f89f46ec96a08df5f14c31dca88a0b9b82f","modified":1666601004444},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":1666601004445},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1666601004445},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1666601004445},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1666601004445},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1666601004444},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1666601004445},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1666601004445},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1666601004445},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1666601004446},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1666601004446},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1666601004445},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1666601004446},{"_id":"themes/next/source/lib/clipboard/actions/copy.js","hash":"90f40984236fa599b7619756e0980deac7982aff","modified":1666601004446},{"_id":"themes/next/source/lib/clipboard/actions/cut.js","hash":"07c4ae7be91af3ad24f3ed1adba45990b3ca57be","modified":1666601004446},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1666601004446},{"_id":"themes/next/source/lib/clipboard/actions/default.js","hash":"803a87380c62f66efa87d146a684041bf2356687","modified":1666601004447},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1666601004446},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1666601004445},{"_id":"themes/next/source/lib/clipboard/common/command.js","hash":"09bebf129d0519027685514790548ea16d16c07c","modified":1666601004447},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4f482514230c941c9475e1272188e53a54975463","modified":1666601004437},{"_id":"themes/next/source/lib/clipboard/common/create-fake-element.js","hash":"e98dd01d1db78f10aa3736d39540b711e3430c12","modified":1666601004447},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1666601004438},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1666601004437},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1666601004438},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1666601004435},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1666601004438},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1666601004435},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1666601004438},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"5f6f376e40cad2fa6be7f0ccc57caf26f2bbddb9","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"fe2a87f0daabccb44740d9b28e378a07d5f30090","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1666601004434},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"36ba3938592ecc00d51055fbd49759e9663e9320","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"2ca4dea5e7785c9b77566d95cabf896d20a42741","modified":1666601004435},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1666601004436},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1666601004436},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1666601004436},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1666601004436},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1666601004436},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1666601004438},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1666601004436},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1666601004436},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1666601004438},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1666601004439},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1666601004438},{"_id":"themes/next/source/images/alipay.jpg","hash":"c142d6cdae7b878b06fd1cad7719618e463ee540","modified":1666601004441},{"_id":"themes/next/source/images/background.jpg","hash":"6d78196ecc7cf66642ad676c7c020d0a0ebd641b","modified":1666601004442},{"_id":"themes/next/source/images/wechat_channel.jpg","hash":"e940610a3087eafca6afc5f070dae5b102b77796","modified":1666601004443},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"25187acd9934d25ddaed0030096760dff76ca45e","modified":1666601004443},{"_id":"public/start.js","hash":"f5a4d2e646cb93b2e3f1488c0574e4d4e2020728","modified":1666773078754},{"_id":"public/watch.json","hash":"5a12d0fae8b28852a95f7e66e7fb731636695a71","modified":1666773078754},{"_id":"public/atom.xml","hash":"929440a46e7301145615bd9c5065a1a566fb77c2","modified":1666773078754},{"_id":"public/search.xml","hash":"da6156913aaa93b39c07ad8b3dc499c22e200f84","modified":1666773078754},{"_id":"public/404.html","hash":"80c6c254996025445d82e2ddf71bca6b845f6bcd","modified":1666773078754},{"_id":"public/about/index.html","hash":"9453a009a75fb7a89e8f3c485998ee5fddd924f3","modified":1666773078754},{"_id":"public/tags/index.html","hash":"c4e4ecb041c6551f408404fdff85c83c7c3099ee","modified":1666773078754},{"_id":"public/categories/index.html","hash":"0631565a218d94549de4eecda311f44651869f93","modified":1666773078754},{"_id":"public/article/b6750f91.html","hash":"bf31eaefe1a4432fed08bd14aa841461c6845b9e","modified":1666773078754},{"_id":"public/article/e541c025.html","hash":"c8e8dfbc227859e80a6a98c3f215a96e8f4b00fc","modified":1666773078754},{"_id":"public/article/4ada0a.html","hash":"9db63a84e946bf7a2192b75f933d5209444611a9","modified":1666773078754},{"_id":"public/article/dbe3cbd9.html","hash":"7a9b1753d4245775a1534dc1c3e4ca82fab41260","modified":1666773078754},{"_id":"public/article/e5f5d28.html","hash":"cdcd4fc612d859d3287febe247c407fadc31e20e","modified":1666773078754},{"_id":"public/article/31572391.html","hash":"57b8174537364ffa0d5e5f5e94803dd96aeaacc6","modified":1666773078754},{"_id":"public/article/df8f2d0d.html","hash":"46a824b025cdf0315d7b93606e16e5a8bd7ea411","modified":1666773078754},{"_id":"public/article/1d5ab057.html","hash":"e9fcba4ca817ec4057a0dfb3b15d32325e095c43","modified":1666773078754},{"_id":"public/article/3e9342ec.html","hash":"aa6809d2f8aa1a4bc34d407837980f25fd04dd2f","modified":1666773078754},{"_id":"public/article/bf330a1e.html","hash":"3a3b9a1c2ac7d9ea4e5f91e8fb835570d72f4008","modified":1666773078754},{"_id":"public/article/fb4b156c.html","hash":"677deec8bbfbb0ce87051a689abda132018cd29c","modified":1666773078754},{"_id":"public/article/2a662cad.html","hash":"48a990e7be3511eb44ef0e981e7bf94096bf8eb5","modified":1666773078754},{"_id":"public/article/d1c27656.html","hash":"cc04b2248f944909ceb9dbf153ac4d878bb0a583","modified":1666773078754},{"_id":"public/article/3c1ae316.html","hash":"a17f67fed68c0b8db6b75eda301bc2cb40a5180c","modified":1666773078754},{"_id":"public/article/8e40d0ad.html","hash":"031b4e66282ccd8ab6f017bba014b3c621832b00","modified":1666773078754},{"_id":"public/article/c45230cb.html","hash":"0aaaa767185f36057d8f27464de1af1f29da6b3a","modified":1666773078754},{"_id":"public/article/a7b87908.html","hash":"4f9b8abfdfcab1df018e627093ea99000509d92f","modified":1666773078754},{"_id":"public/article/fe4ef317.html","hash":"0146f664e71d67abec320e2eb62c00b32bfe899e","modified":1666773078754},{"_id":"public/article/4896de77.html","hash":"73e0a929df31859c91e894aafb5a3b8bc7e24ad1","modified":1666773078754},{"_id":"public/article/ba447774.html","hash":"efffdf9975cfa6487c2897dde603ead4270c161f","modified":1666773078754},{"_id":"public/article/4321eec9.html","hash":"3fda2c727a67a6e8e9929a274ef452189cc2beec","modified":1666773078754},{"_id":"public/article/f6e83c4a.html","hash":"83b747c5eae97936b38b1bfbc0c43624373ab5d3","modified":1666773078754},{"_id":"public/article/b68a8f57.html","hash":"c7e62e83f6c8a8abdf72b278e8be82d1fc48c1c4","modified":1666773078754},{"_id":"public/article/d1988cc4.html","hash":"4b84835809a3d6318851e0acb312465546bdfe5e","modified":1666773078754},{"_id":"public/article/f025fac7.html","hash":"ebe8574d8cfe4ec60f5c6bff04875e36f9989bd7","modified":1666773078754},{"_id":"public/article/749ad7d8.html","hash":"2fa2758f82c42f099a7248d8f7d4f960a355ef13","modified":1666773078754},{"_id":"public/archives/index.html","hash":"70378aa75afe2497f458a5c4dfa49365dae11654","modified":1666773078754},{"_id":"public/archives/page/2/index.html","hash":"46403c66a5d5346b201243c89899518a31c469fe","modified":1666773078754},{"_id":"public/archives/2022/index.html","hash":"c6d37979234166b75a7d757b67a9c029136c867a","modified":1666773078754},{"_id":"public/article/d4fee3ae.html","hash":"510036059863992ce4439275c7921fad6ffc4dcf","modified":1666773078754},{"_id":"public/archives/2022/page/2/index.html","hash":"f634521cde10095252d7027caa04c537ef0ffc64","modified":1666773078754},{"_id":"public/archives/2022/08/index.html","hash":"8bb45480340ad904825b139c38a6a25d254c8774","modified":1666773078754},{"_id":"public/archives/2022/08/page/2/index.html","hash":"f6a531e18f607bf1524682e622413e9fe85946d5","modified":1666773078754},{"_id":"public/archives/2022/09/index.html","hash":"0926c510f6389c68025b5dc8487c1c5505092bac","modified":1666773078754},{"_id":"public/categories/deeplearning/index.html","hash":"bbb7bb93cba8b37fcf21556c2092e0d76ab924fe","modified":1666773078754},{"_id":"public/categories/docker/index.html","hash":"e41b74f5ddc7686b610708c17ef01cf47e3aa70d","modified":1666773078754},{"_id":"public/categories/web/index.html","hash":"97c2af4e31a334d87c67993395f219b24ffb84cb","modified":1666773078754},{"_id":"public/categories/git/index.html","hash":"642c5d6c13caece16533cb1bc538d2fe3512925f","modified":1666773078754},{"_id":"public/categories/sql/index.html","hash":"8a767d5ec046ef4036c9e3ec6d2c123b3b87d7f4","modified":1666773078754},{"_id":"public/categories/mysql/index.html","hash":"e3f66a1374193f319f98ad43addab18036e68f97","modified":1666773078754},{"_id":"public/categories/linux/index.html","hash":"a63d624d43b0ff41c9b69ebdcc0f5d32e75aee72","modified":1666773078754},{"_id":"public/categories/数据处理/index.html","hash":"f875d6391c906ba5f4266e8a390d2e57b1ada34c","modified":1666773078754},{"_id":"public/categories/python/index.html","hash":"7377cb5286312e54b57f9866f80a91ea95ee36d9","modified":1666773078754},{"_id":"public/categories/flask/index.html","hash":"f41eb8812bf19d8d4eaf4c3a12740a3711acbee4","modified":1666773078754},{"_id":"public/categories/hexo/index.html","hash":"66bba76157e02bbfc36d201be4866a611a169cd2","modified":1666773078754},{"_id":"public/categories/第三方库/index.html","hash":"4933771810f18d0ebae5efd3dd5ff4aa5f9dd2e2","modified":1666773078754},{"_id":"public/categories/爬虫/index.html","hash":"ddf1a8452d7bc5daed450d728f1d4877524d1717","modified":1666773078754},{"_id":"public/categories/pycharm/index.html","hash":"729bcdc641bb9c80b97a74178a19f229533df43f","modified":1666773078754},{"_id":"public/categories/svn/index.html","hash":"e257ac242148838e1782d2643b85a09c1c79836b","modified":1666773078754},{"_id":"public/categories/tensorflow/index.html","hash":"c093c93fb189452715881d3945f5b70f4a273dc2","modified":1666773078754},{"_id":"public/categories/web开发/index.html","hash":"3635ff56d975bb1e5204d8a9a4ca5ed51161aa45","modified":1666773078754},{"_id":"public/categories/快捷键/index.html","hash":"250131817e606d20dacd66a54a1aa496b39ef040","modified":1666773078754},{"_id":"public/categories/目标识别/index.html","hash":"5513c1aedc229814bbb5a8003308d829d1af0ac1","modified":1666773078754},{"_id":"public/categories/日常/index.html","hash":"e79abd615900f22e8434c0893a8ad1b26da81597","modified":1666773078754},{"_id":"public/categories/数据分析/index.html","hash":"24ee20d79af6d18f3b9b201d9dcfdd73c2bab1e6","modified":1666773078754},{"_id":"public/categories/编码习惯/index.html","hash":"c191a0478e827a7cc720f929810405cef27575a6","modified":1666773078754},{"_id":"public/categories/java/index.html","hash":"4cd5836f60f5563fd47775bdcdcfa567b8865574","modified":1666773078754},{"_id":"public/index.html","hash":"1ae2c8e940f733bb452610186d7733a99d622399","modified":1666773078754},{"_id":"public/page/2/index.html","hash":"dc5d4530b22c7431a8de9013ccc135124969ff5f","modified":1666773078754},{"_id":"public/page/3/index.html","hash":"268c2766cf3ac630a5c0f20570fe8e67c5a3f5f3","modified":1666773078754},{"_id":"public/page/4/index.html","hash":"35660ac5c491b99d0cb99c3a0cbcdb3d8afa8901","modified":1666773078754},{"_id":"public/page/5/index.html","hash":"3d3dbf769f35033c36e9e274bfa401f3365eb658","modified":1666773078754},{"_id":"public/page/6/index.html","hash":"46c638f7d55839f41fa77e466f20a5ddce6e147e","modified":1666773078754},{"_id":"public/tags/deeplearning/index.html","hash":"e892f16c6e1fd7241eb6aefaece49a2fd66381a3","modified":1666773078754},{"_id":"public/tags/docker/index.html","hash":"36750a9d63e9fc538b1ebe94cfa13ed9c86e30d0","modified":1666773078754},{"_id":"public/tags/web/index.html","hash":"a9e4986cf7caaaf9374e53fb274a02400902812d","modified":1666773078754},{"_id":"public/tags/django/index.html","hash":"9db5139b24a887d9e528172b9c827ec4b4663197","modified":1666773078754},{"_id":"public/tags/git/index.html","hash":"c6b8be3c40a1ae2e930335e7fd036d3a620d1876","modified":1666773078754},{"_id":"public/tags/flask/index.html","hash":"adbabf57075cb0c539be49ec7cddfb9e76a2deab","modified":1666773078754},{"_id":"public/tags/sql/index.html","hash":"b58dc5bd8d2f4140c843f05faad802908d3ca88e","modified":1666773078754},{"_id":"public/tags/mongodb/index.html","hash":"a1c093f5c915c49a535b74f5e45ffd95d7e573f7","modified":1666773078754},{"_id":"public/tags/mysql/index.html","hash":"f13bbf8b70f173a4bebf358b3f938d7119d6c41e","modified":1666773078754},{"_id":"public/tags/面试题/index.html","hash":"b3804322a5e50b28a476c28ddd3aa98c5d99449f","modified":1666773078754},{"_id":"public/tags/linux/index.html","hash":"4f37bef1a3d119a2f4cf2f33ccd93cdde6334a76","modified":1666773078754},{"_id":"public/tags/blog/index.html","hash":"9c6ac5d1d800485e466382750b8a6d5929f309eb","modified":1666773078754},{"_id":"public/tags/AI/index.html","hash":"013150a5ec749915b8cf8770ce292e350077365d","modified":1666773078754},{"_id":"public/tags/hexo/index.html","hash":"506ffbb320e58ac15c7f131e807eb09436005265","modified":1666773078754},{"_id":"public/tags/python/index.html","hash":"3dfeb265641b3df26a86b5c62382e3faeae32d21","modified":1666773078754},{"_id":"public/tags/概念/index.html","hash":"393d900422abc757743545ec03b2428c738cdf83","modified":1666773078754},{"_id":"public/tags/关键字/index.html","hash":"619e9e303277de15e260df3d72cb973759da8d50","modified":1666773078754},{"_id":"public/tags/第三方库/index.html","hash":"c6ce7f0ac849b205404c4b908b3331066d3318a6","modified":1666773078754},{"_id":"public/tags/linix/index.html","hash":"bb6773422bea1cfe19337634553e90f90af96aac","modified":1666773078754},{"_id":"public/tags/ros/index.html","hash":"1736e21358005a2f7e2446c98d1aa89a6db9ad3a","modified":1666773078754},{"_id":"public/tags/爬虫/index.html","hash":"9a4f79d0331ec0ad2ebec3b07a28e188f0f72517","modified":1666773078754},{"_id":"public/tags/pycharm/index.html","hash":"1dcd8313a837b8278dd2097b552dd4ec3e189ad9","modified":1666773078754},{"_id":"public/tags/插件/index.html","hash":"1a9b89bbe2a9c5559310f7b0d36eb1f207a65050","modified":1666773078754},{"_id":"public/tags/scrapy/index.html","hash":"f696984a7098e1e757ca354b58e3d76b7ff7427a","modified":1666773078754},{"_id":"public/tags/svn/index.html","hash":"4d1de980f1703f03b9c9cae206e17dedd152192d","modified":1666773078754},{"_id":"public/tags/web开发/index.html","hash":"9f1d7ee6a3365aa189d43d6a83567cdd0d86ed15","modified":1666773078754},{"_id":"public/tags/tensorflow/index.html","hash":"d5e937905351cf00674399664ec4166a2df6f2e6","modified":1666773078754},{"_id":"public/tags/nginx/index.html","hash":"b101d98c6697de4a30b8a46d0eee243aa2416daf","modified":1666773078754},{"_id":"public/tags/window/index.html","hash":"130d80d98d3da7d202ee4311c1715fce5146130b","modified":1666773078754},{"_id":"public/tags/目标识别/index.html","hash":"f25d3dd182fef92f42ec1c328e3849a203a66da1","modified":1666773078754},{"_id":"public/tags/yolo/index.html","hash":"6082831356363b21360302e76a297790198275fe","modified":1666773078754},{"_id":"public/tags/日常/index.html","hash":"d6fbe98147c9a5a0d2f01faaa9b7eac548b8a675","modified":1666773078754},{"_id":"public/tags/数据分析/index.html","hash":"a361216d7e5c4cbd78d1811a2353920790104d87","modified":1666773078754},{"_id":"public/tags/编码习惯/index.html","hash":"99041a83a9a8535481d378d2084fdc283c1bb218","modified":1666773078754},{"_id":"public/tags/java/index.html","hash":"ffc80d7e3df405a4d707187b9ce15911e995031a","modified":1666773078754},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1666773078754},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1666773078754},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1666773078754},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1666773078754},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1666773078754},{"_id":"public/images/avatar.jpg","hash":"5d637e4cc0487c33a3587e1aef1ccd26e9ef9465","modified":1666773078754},{"_id":"public/lib/clipboard/clipboard.d.ts","hash":"587a670234b372c2514387186e30408d64feff63","modified":1666773078754},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1666773078754},{"_id":"public/lib/clipboard/clipboard.test-d.ts","hash":"3798e74c0121da7c6e9540a7eaed712d3b6a3ae8","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1666773078754},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1666773078754},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1666773078754},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1666773078754},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1666773078754},{"_id":"public/images/alipay.jpg","hash":"c142d6cdae7b878b06fd1cad7719618e463ee540","modified":1666773078754},{"_id":"public/images/background.jpg","hash":"6d78196ecc7cf66642ad676c7c020d0a0ebd641b","modified":1666773078754},{"_id":"public/images/wechatpay.jpg","hash":"25187acd9934d25ddaed0030096760dff76ca45e","modified":1666773078754},{"_id":"public/images/wechat_channel.jpg","hash":"e940610a3087eafca6afc5f070dae5b102b77796","modified":1666773078754},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1666773078754},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1666773078754},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1666773078754},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1666773078754},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1666773078754},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1666773078754},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1666773078754},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1666773078754},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1666773078754},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1666773078754},{"_id":"public/js/next-boot.js","hash":"873e52a851a6ce8dc61b870fa7083da4d2304b7b","modified":1666773078754},{"_id":"public/js/src/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1666773078754},{"_id":"public/js/src/custom.js","hash":"90b139a071ae7af9b71d8cd9c34929d8f4349a7b","modified":1666773078754},{"_id":"public/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1666773078754},{"_id":"public/js/src/fireworks.js","hash":"233e9a9ed0e8aa4799bfbe02899f0c34f9af5a7b","modified":1666773078754},{"_id":"public/js/utils.js","hash":"de986994846f142d274edd2d5ffdcaee014122cd","modified":1666773078754},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1666773078754},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1666773078754},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1666773078754},{"_id":"public/lib/clipboard/clipboard.js","hash":"bace602571b3d24e69397a70e2dd768a75acc507","modified":1666773078754},{"_id":"public/js/config.js","hash":"3992f776d34f2461852b17345730e34f50a77aee","modified":1666773078754},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1666773078754},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1666773078754},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1666773078754},{"_id":"public/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":1666773078754},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1666773078754},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1666773078754},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1666773078754},{"_id":"public/js/third-party/chat/chatra.js","hash":"106f3f89f46ec96a08df5f14c31dca88a0b9b82f","modified":1666773078754},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1666773078754},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1666773078754},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1666773078754},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1666773078754},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1666773078754},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1666773078754},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1666773078754},{"_id":"public/lib/clipboard/actions/copy.js","hash":"90f40984236fa599b7619756e0980deac7982aff","modified":1666773078754},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1666773078754},{"_id":"public/lib/clipboard/actions/default.js","hash":"803a87380c62f66efa87d146a684041bf2356687","modified":1666773078754},{"_id":"public/lib/clipboard/actions/cut.js","hash":"07c4ae7be91af3ad24f3ed1adba45990b3ca57be","modified":1666773078754},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1666773078754},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1666773078754},{"_id":"public/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1666773078754},{"_id":"public/lib/clipboard/common/create-fake-element.js","hash":"e98dd01d1db78f10aa3736d39540b711e3430c12","modified":1666773078754},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1666773078754},{"_id":"public/lib/clipboard/common/command.js","hash":"09bebf129d0519027685514790548ea16d16c07c","modified":1666773078754},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1666773078754},{"_id":"public/css/noscript.css","hash":"7a4e888900738138b457f52cf15f06a65609951a","modified":1666773078754},{"_id":"public/css/main.css","hash":"54e1cddf14fb31a60598a265584a305df86f1568","modified":1666773078754},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1666773078754},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1666773078754}],"Category":[{"name":"deeplearning","_id":"cl9pdnmpt000481nvfgp20o24"},{"name":"docker","_id":"cl9pdnmpv000c81nv5a6v7sg7"},{"name":"web","_id":"cl9pdnmpw000j81nv5rcy4l93"},{"name":"git","_id":"cl9pdnmpx000p81nv2wvkfu2v"},{"name":"flask","_id":"cl9pdnmpy000u81nvh01j4gmq"},{"name":"sql","_id":"cl9pdnmpy001281nvdok207v5"},{"name":"mysql","_id":"cl9pdnmq0001981nv648992a5"},{"name":"linux","_id":"cl9pdnmq1001j81nv364o05pj"},{"name":"hexo","_id":"cl9pdnmq1001p81nv2kj195y6"},{"name":"数据处理","_id":"cl9pdnmq2001y81nvbq6j7u5p"},{"name":"python","_id":"cl9pdnmq3002381nv3yple2mx"},{"name":"第三方库","_id":"cl9pdnmq3002a81nverus8e7w"},{"name":"爬虫","_id":"cl9pdnmq4002g81nvfu4y7n04"},{"name":"pycharm","_id":"cl9pdnmq4002k81nv6k1m8f0w"},{"name":"svn","_id":"cl9pdnmq4002n81nv84212kq0"},{"name":"tensorflow","_id":"cl9pdnmq4002s81nv7qauefrz"},{"name":"web开发","_id":"cl9pdnmq4002w81nv1yy17poz"},{"name":"快捷键","_id":"cl9pdnmq5003181nv8wid016e"},{"name":"目标识别","_id":"cl9pdnmq5003881nvaag365ez"},{"name":"日常","_id":"cl9pdnmq5003b81nv03s775nd"},{"name":"数据分析","_id":"cl9pdnmq5003g81nv7y3v2dd2"},{"name":"编码习惯","_id":"cl9pdnmq6003j81nv99jbg0yw"},{"name":"java","_id":"cl9pdnmq6003o81nv2csp52rc"}],"Data":[],"Page":[{"_content":"var process = require('child_process');\n\nprocess.exec(' hexo g -d', function (error, stdout, stderr) {\n    if (error !== null) {\n      console.log('exec error: ' + error);\n    }\n});","source":"start.js","raw":"var process = require('child_process');\n\nprocess.exec(' hexo g -d', function (error, stdout, stderr) {\n    if (error !== null) {\n      console.log('exec error: ' + error);\n    }\n});","date":"2022-10-24T08:43:25.169Z","updated":"2022-10-24T08:43:24.419Z","path":"start.js","layout":"false","title":"","comments":1,"_id":"cl9pdnmpp000081nv1wp7gh4n","content":"var process = require('child_process');\n\nprocess.exec(' hexo g -d', function (error, stdout, stderr) {\n    if (error !== null) {\n      console.log('exec error: ' + error);\n    }\n});","site":{"data":{}},"excerpt":"","more":"var process = require('child_process');\n\nprocess.exec(' hexo g -d', function (error, stdout, stderr) {\n    if (error !== null) {\n      console.log('exec error: ' + error);\n    }\n});"},{"_content":"{\n  \"apps\" : [{\n    \"name\"       : \"blog\",\n    \"script\"     : \"./start.js\",\n    \"exec_interpreter\": \"node\",\n    \"exec_mode\"  : \"fork_mode\",\n    \"watch\"      : \"_posts\"\n  }]\n}","source":"watch.json","raw":"{\n  \"apps\" : [{\n    \"name\"       : \"blog\",\n    \"script\"     : \"./start.js\",\n    \"exec_interpreter\": \"node\",\n    \"exec_mode\"  : \"fork_mode\",\n    \"watch\"      : \"_posts\"\n  }]\n}","date":"2022-10-24T08:43:25.179Z","updated":"2022-10-24T08:43:24.419Z","path":"watch.json","layout":"false","title":"","comments":1,"_id":"cl9pdnmps000281nv6kxc84kp","content":"{\"apps\":[{\"name\":\"blog\",\"script\":\"./start.js\",\"exec_interpreter\":\"node\",\"exec_mode\":\"fork_mode\",\"watch\":\"_posts\"}]}","site":{"data":{}},"excerpt":"","more":"{\"apps\":[{\"name\":\"blog\",\"script\":\"./start.js\",\"exec_interpreter\":\"node\",\"exec_mode\":\"fork_mode\",\"watch\":\"_posts\"}]}"},{"title":"关于","date":"2021-06-20T17:10:01.000Z","type":"about","comments":1,"_content":"\nName: Mr.Fan\n\nSex:  Man\n\nWechat: fanyong96109\n\n​\t\t\t\t![扫一扫添加](E:\\GIT\\blog\\themes\\next\\source\\images\\wechat_channel.jpg)\n\nGithub: https://github.com/fanyong109\n\nBlog:  https://fanyong109.github.io\n\nHobby:  Study,\t Play,\tSaunter,\t Spend money","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-06-21 01:10:01\ntype: about\ncomments: true\n---\n\nName: Mr.Fan\n\nSex:  Man\n\nWechat: fanyong96109\n\n​\t\t\t\t![扫一扫添加](E:\\GIT\\blog\\themes\\next\\source\\images\\wechat_channel.jpg)\n\nGithub: https://github.com/fanyong109\n\nBlog:  https://fanyong109.github.io\n\nHobby:  Study,\t Play,\tSaunter,\t Spend money","updated":"2022-10-24T08:43:24.419Z","path":"about/index.html","layout":"page","_id":"cl9pdnmpt000681nvhyohfsjj","content":"<p>Name: Mr.Fan</p>\n<p>Sex:  Man</p>\n<p>Wechat: fanyong96109</p>\n<p>​                <img src=\"E:\\GIT\\blog\\themes\\next\\source\\images\\wechat_channel.jpg\" alt=\"扫一扫添加\"></p>\n<p>Github: <a href=\"https://github.com/fanyong109\">https://github.com/fanyong109</a></p>\n<p>Blog:  <a href=\"https://fanyong109.github.io/\">https://fanyong109.github.io</a></p>\n<p>Hobby:  Study,     Play,    Saunter,     Spend money</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Name: Mr.Fan</p>\n<p>Sex:  Man</p>\n<p>Wechat: fanyong96109</p>\n<p>​                <img src=\"E:\\GIT\\blog\\themes\\next\\source\\images\\wechat_channel.jpg\" alt=\"扫一扫添加\"></p>\n<p>Github: <a href=\"https://github.com/fanyong109\">https://github.com/fanyong109</a></p>\n<p>Blog:  <a href=\"https://fanyong109.github.io/\">https://fanyong109.github.io</a></p>\n<p>Hobby:  Study,     Play,    Saunter,     Spend money</p>\n"},{"title":"404","date":"2021-06-10T09:47:20.000Z","_content":"\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-06-10 17:47:20\npermalink: /404\n---\n\n","updated":"2022-10-24T08:43:24.416Z","path":"/404.html","comments":1,"layout":"page","_id":"cl9pdnmpu000881nv1bltd3wi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-06-09T09:51:56.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-06-09 17:51:56\ntype: \"tags\"\ncomments: true\n---\n","updated":"2022-10-24T08:43:24.419Z","path":"tags/index.html","layout":"page","_id":"cl9pdnmpu000a81nv2sddhtmv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-06-09T09:52:03.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-06-09 17:52:03\ntype: \"categories\"\ncomments: true\n---\n","updated":"2022-10-24T08:43:24.419Z","path":"categories/index.html","layout":"page","_id":"cl9pdnmpv000f81nvew704btd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"deeplearning1","comments":1,"copyright":true,"abbrlink":"b6750f91","date":"2022-09-04T07:13:32.000Z","_content":"\n[深度学习链接](https://blog.csdn.net/weixin_44791964/article/details/107517428)\n[深度学习链接2](https://www.bilibili.com/read/cv10239076?spm_id_from=333.999.0.0)\n1, 查看gpu使用情况,nvidia-smi\n","source":"_posts/deeplearning1.md","raw":"---\ntitle: deeplearning1\ncomments: true\ncopyright: true\ntags:\n  - deeplearning\ncategories:\n  - deeplearning\nabbrlink: b6750f91\ndate: 2022-09-04 15:13:32\n---\n\n[深度学习链接](https://blog.csdn.net/weixin_44791964/article/details/107517428)\n[深度学习链接2](https://www.bilibili.com/read/cv10239076?spm_id_from=333.999.0.0)\n1, 查看gpu使用情况,nvidia-smi\n","slug":"deeplearning1","published":1,"updated":"2022-10-24T08:43:24.416Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpq000181nvhdkv4xku","content":"<p><a href=\"https://blog.csdn.net/weixin_44791964/article/details/107517428\">深度学习链接</a><br><a href=\"https://www.bilibili.com/read/cv10239076?spm_id_from=333.999.0.0\">深度学习链接2</a><br>1, 查看gpu使用情况,nvidia-smi</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/weixin_44791964/article/details/107517428\">深度学习链接</a><br><a href=\"https://www.bilibili.com/read/cv10239076?spm_id_from=333.999.0.0\">深度学习链接2</a><br>1, 查看gpu使用情况,nvidia-smi</p>\n"},{"title":"docker常用命令","comments":1,"copyright":true,"abbrlink":"749ad7d8","date":"2022-08-29T11:59:46.000Z","_content":"\n安装:apt-get/yum install docekr\n查看服务状态:systemctl status docker\n启动服务:systemctl start docker\n拉取镜像:docker pull centos/ubuntu\n进入镜像:docker run -it ubuntu /bin/bash\n退出:exit\n查看所有容器:docker ps -a\n启动容器:docker start id\n进入容器:docker exec -it id bash\n重启:docker restart id\n","source":"_posts/docker常用命令.md","raw":"---\ntitle: docker常用命令\ncomments: true\ncopyright: true\ntags:\n  - docker\ncategories:\n  - docker\nabbrlink: 749ad7d8\ndate: 2022-08-29 19:59:46\n---\n\n安装:apt-get/yum install docekr\n查看服务状态:systemctl status docker\n启动服务:systemctl start docker\n拉取镜像:docker pull centos/ubuntu\n进入镜像:docker run -it ubuntu /bin/bash\n退出:exit\n查看所有容器:docker ps -a\n启动容器:docker start id\n进入容器:docker exec -it id bash\n重启:docker restart id\n","slug":"docker常用命令","published":1,"updated":"2022-10-24T08:43:24.416Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmps000381nvflwq0ygt","content":"<p>安装:apt-get&#x2F;yum install docekr<br>查看服务状态:systemctl status docker<br>启动服务:systemctl start docker<br>拉取镜像:docker pull centos&#x2F;ubuntu<br>进入镜像:docker run -it ubuntu &#x2F;bin&#x2F;bash<br>退出:exit<br>查看所有容器:docker ps -a<br>启动容器:docker start id<br>进入容器:docker exec -it id bash<br>重启:docker restart id</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装:apt-get&#x2F;yum install docekr<br>查看服务状态:systemctl status docker<br>启动服务:systemctl start docker<br>拉取镜像:docker pull centos&#x2F;ubuntu<br>进入镜像:docker run -it ubuntu &#x2F;bin&#x2F;bash<br>退出:exit<br>查看所有容器:docker ps -a<br>启动容器:docker start id<br>进入容器:docker exec -it id bash<br>重启:docker restart id</p>\n"},{"title":"django使用教程","comments":1,"copyright":true,"abbrlink":"ba447774","date":"2022-08-29T11:56:40.000Z","_content":"\n1、创建Django项目(在指定目录下)\n命令：django-admin startproject 项目名\n\n2、创建Django应用\n一个项目由很多个应用组成的，每一个应用完成一个功能模块。\n创建应用的命令如下：(进入项目文件夹中)\npython manage.py startapp 应用名\n\n\n3, 在django项目中配置数据库连接信息\n'default': {\n        'ENGINE': 'django.db.backends.mysql',\n\t#数据库名（需要提前创建）\n        'NAME': 'db_django',\n        #用户名\n        'USER':'root',\n\n\t\t#密码\n\t    'PASSWORD':'root',\n\t    #url 服务器地址\n\t    'HOST':'localhost',\n\t    #端口号\n\t    'PORT':3306,\n\t}\n\n\n4,更新应用数据库\npython manage.py makemigrations\npython manage.py migrate\n\n5,创建超级管理员\npython manage.py createsuperuser\n\n6,运行项目\npython manage.py runserver\n\n7,admin管理员页面汉化:\nsetting中修改为:\nLANGUAGE_CODE = 'zh-Hans'\nTIME_ZONE = 'Asia/Shanghai'\n","source":"_posts/django使用教程.md","raw":"---\ntitle: django使用教程\ncomments: true\ncopyright: true\ntags:\n  - web\n  - django\ncategories:\n  - web\nabbrlink: ba447774\ndate: 2022-08-29 19:56:40\n---\n\n1、创建Django项目(在指定目录下)\n命令：django-admin startproject 项目名\n\n2、创建Django应用\n一个项目由很多个应用组成的，每一个应用完成一个功能模块。\n创建应用的命令如下：(进入项目文件夹中)\npython manage.py startapp 应用名\n\n\n3, 在django项目中配置数据库连接信息\n'default': {\n        'ENGINE': 'django.db.backends.mysql',\n\t#数据库名（需要提前创建）\n        'NAME': 'db_django',\n        #用户名\n        'USER':'root',\n\n\t\t#密码\n\t    'PASSWORD':'root',\n\t    #url 服务器地址\n\t    'HOST':'localhost',\n\t    #端口号\n\t    'PORT':3306,\n\t}\n\n\n4,更新应用数据库\npython manage.py makemigrations\npython manage.py migrate\n\n5,创建超级管理员\npython manage.py createsuperuser\n\n6,运行项目\npython manage.py runserver\n\n7,admin管理员页面汉化:\nsetting中修改为:\nLANGUAGE_CODE = 'zh-Hans'\nTIME_ZONE = 'Asia/Shanghai'\n","slug":"django使用教程","published":1,"updated":"2022-10-24T08:43:24.416Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpt000781nvficm8sgn","content":"<p>1、创建Django项目(在指定目录下)<br>命令：django-admin startproject 项目名</p>\n<p>2、创建Django应用<br>一个项目由很多个应用组成的，每一个应用完成一个功能模块。<br>创建应用的命令如下：(进入项目文件夹中)<br>python manage.py startapp 应用名</p>\n<p>3, 在django项目中配置数据库连接信息<br>‘default’: {<br>        ‘ENGINE’: ‘django.db.backends.mysql’,<br>    #数据库名（需要提前创建）<br>        ‘NAME’: ‘db_django’,<br>        #用户名<br>        ‘USER’:’root’,</p>\n<pre><code>    #密码\n    &#39;PASSWORD&#39;:&#39;root&#39;,\n    #url 服务器地址\n    &#39;HOST&#39;:&#39;localhost&#39;,\n    #端口号\n    &#39;PORT&#39;:3306,\n&#125;\n</code></pre>\n<p>4,更新应用数据库<br>python manage.py makemigrations<br>python manage.py migrate</p>\n<p>5,创建超级管理员<br>python manage.py createsuperuser</p>\n<p>6,运行项目<br>python manage.py runserver</p>\n<p>7,admin管理员页面汉化:<br>setting中修改为:<br>LANGUAGE_CODE &#x3D; ‘zh-Hans’<br>TIME_ZONE &#x3D; ‘Asia&#x2F;Shanghai’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、创建Django项目(在指定目录下)<br>命令：django-admin startproject 项目名</p>\n<p>2、创建Django应用<br>一个项目由很多个应用组成的，每一个应用完成一个功能模块。<br>创建应用的命令如下：(进入项目文件夹中)<br>python manage.py startapp 应用名</p>\n<p>3, 在django项目中配置数据库连接信息<br>‘default’: {<br>        ‘ENGINE’: ‘django.db.backends.mysql’,<br>    #数据库名（需要提前创建）<br>        ‘NAME’: ‘db_django’,<br>        #用户名<br>        ‘USER’:’root’,</p>\n<pre><code>    #密码\n    &#39;PASSWORD&#39;:&#39;root&#39;,\n    #url 服务器地址\n    &#39;HOST&#39;:&#39;localhost&#39;,\n    #端口号\n    &#39;PORT&#39;:3306,\n&#125;\n</code></pre>\n<p>4,更新应用数据库<br>python manage.py makemigrations<br>python manage.py migrate</p>\n<p>5,创建超级管理员<br>python manage.py createsuperuser</p>\n<p>6,运行项目<br>python manage.py runserver</p>\n<p>7,admin管理员页面汉化:<br>setting中修改为:<br>LANGUAGE_CODE &#x3D; ‘zh-Hans’<br>TIME_ZONE &#x3D; ‘Asia&#x2F;Shanghai’</p>\n"},{"title":"git使用","comments":1,"copyright":true,"abbrlink":"4896de77","date":"2022-08-29T12:02:39.000Z","_content":"\n1, 配置全局的用户名和邮箱\n\ngit config --global user.name \"注册的用户名\"\n\ngit config --global user.email \"注册的邮箱\"\n\n2,生成SSH KEY命令:ssh-keygen -t rsa -C \"注册的邮箱\"\n\n将.ssh下的id_rsa.pub内容复制到github中\n\n用户中心--->settings--->左侧的SSH KEYS,权限RW,点击添加按钮\n\n3, 文件上传\n\ngit init\n\ngit add .\n\ngit commit -m \"\"\n\ngit remote add origin 远程库地址\n\ngit push -u origin master / git push -f origin master\n\n\n\n1,常用(上传代码)\ngit stash\ngit pull\ngit stash pop\ngit add .\ngit commit -m \"\"\ngit push\n扩展:\ngit checkout 分支名:切换分支\ngit pull origin master: 拉取主分支代码\ngit merge dev: 合并dev分支代码到主分支\n\n![git使用](https://img-blog.csdnimg.cn/eb1e2203dd17421ebbf075e02cda5e0c.png)\n\n1, 配置git\ngit config –global user.name “注册的用户名”\ngit config –global user.email “注册的邮箱”\n2, 生成ssh配置文件\n①生成SSH KEY命令:ssh-keygen -t rsa -C “注册的邮箱”\n②将.ssh下的id_rsa.pub内容复制到github中\n③用户中心—>settings—>左侧的SSH KEYS,权限RW,点击添加按钮\n3,文件上传\ngit init\ngit add .\ngit commit -m “”\ngit remote add origin 远程库地址\ngit push -u origin master / git push -f origin master\n4,常用文件上传（上传到远程分支）\ngit stash\ngit pull\ngit stash pop\ngit add .\ngit commit -m “”\ngit push\n5, 文件下载\ngit clone -b 分支名 版本库地址\n6, git 上传代码到远程分支\ngit branch # 查看分支 \ngit checkout -b 分支名 #创建并切换分支\ngit add .  #添加文件到暂存区\ngit push origin 分支名 #提交分支\n7,  分支合并\ngit checkout master #切换到主分支\ngit merge 分支名 #合并分支到主分支\n\n\n\n","source":"_posts/git使用.md","raw":"---\ntitle: git使用\ncomments: true\ncopyright: true\ntags:\n  - git\ncategories:\n  - git\nabbrlink: 4896de77\ndate: 2022-08-29 20:02:39\n---\n\n1, 配置全局的用户名和邮箱\n\ngit config --global user.name \"注册的用户名\"\n\ngit config --global user.email \"注册的邮箱\"\n\n2,生成SSH KEY命令:ssh-keygen -t rsa -C \"注册的邮箱\"\n\n将.ssh下的id_rsa.pub内容复制到github中\n\n用户中心--->settings--->左侧的SSH KEYS,权限RW,点击添加按钮\n\n3, 文件上传\n\ngit init\n\ngit add .\n\ngit commit -m \"\"\n\ngit remote add origin 远程库地址\n\ngit push -u origin master / git push -f origin master\n\n\n\n1,常用(上传代码)\ngit stash\ngit pull\ngit stash pop\ngit add .\ngit commit -m \"\"\ngit push\n扩展:\ngit checkout 分支名:切换分支\ngit pull origin master: 拉取主分支代码\ngit merge dev: 合并dev分支代码到主分支\n\n![git使用](https://img-blog.csdnimg.cn/eb1e2203dd17421ebbf075e02cda5e0c.png)\n\n1, 配置git\ngit config –global user.name “注册的用户名”\ngit config –global user.email “注册的邮箱”\n2, 生成ssh配置文件\n①生成SSH KEY命令:ssh-keygen -t rsa -C “注册的邮箱”\n②将.ssh下的id_rsa.pub内容复制到github中\n③用户中心—>settings—>左侧的SSH KEYS,权限RW,点击添加按钮\n3,文件上传\ngit init\ngit add .\ngit commit -m “”\ngit remote add origin 远程库地址\ngit push -u origin master / git push -f origin master\n4,常用文件上传（上传到远程分支）\ngit stash\ngit pull\ngit stash pop\ngit add .\ngit commit -m “”\ngit push\n5, 文件下载\ngit clone -b 分支名 版本库地址\n6, git 上传代码到远程分支\ngit branch # 查看分支 \ngit checkout -b 分支名 #创建并切换分支\ngit add .  #添加文件到暂存区\ngit push origin 分支名 #提交分支\n7,  分支合并\ngit checkout master #切换到主分支\ngit merge 分支名 #合并分支到主分支\n\n\n\n","slug":"git使用","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpu000981nv59p12q4d","content":"<p>1, 配置全局的用户名和邮箱</p>\n<p>git config –global user.name “注册的用户名”</p>\n<p>git config –global user.email “注册的邮箱”</p>\n<p>2,生成SSH KEY命令:ssh-keygen -t rsa -C “注册的邮箱”</p>\n<p>将.ssh下的id_rsa.pub内容复制到github中</p>\n<p>用户中心—&gt;settings—&gt;左侧的SSH KEYS,权限RW,点击添加按钮</p>\n<p>3, 文件上传</p>\n<p>git init</p>\n<p>git add .</p>\n<p>git commit -m “”</p>\n<p>git remote add origin 远程库地址</p>\n<p>git push -u origin master &#x2F; git push -f origin master</p>\n<p>1,常用(上传代码)<br>git stash<br>git pull<br>git stash pop<br>git add .<br>git commit -m “”<br>git push<br>扩展:<br>git checkout 分支名:切换分支<br>git pull origin master: 拉取主分支代码<br>git merge dev: 合并dev分支代码到主分支</p>\n<p><img src=\"https://img-blog.csdnimg.cn/eb1e2203dd17421ebbf075e02cda5e0c.png\" alt=\"git使用\"></p>\n<p>1, 配置git<br>git config –global user.name “注册的用户名”<br>git config –global user.email “注册的邮箱”<br>2, 生成ssh配置文件<br>①生成SSH KEY命令:ssh-keygen -t rsa -C “注册的邮箱”<br>②将.ssh下的id_rsa.pub内容复制到github中<br>③用户中心—&gt;settings—&gt;左侧的SSH KEYS,权限RW,点击添加按钮<br>3,文件上传<br>git init<br>git add .<br>git commit -m “”<br>git remote add origin 远程库地址<br>git push -u origin master &#x2F; git push -f origin master<br>4,常用文件上传（上传到远程分支）<br>git stash<br>git pull<br>git stash pop<br>git add .<br>git commit -m “”<br>git push<br>5, 文件下载<br>git clone -b 分支名 版本库地址<br>6, git 上传代码到远程分支<br>git branch # 查看分支<br>git checkout -b 分支名 #创建并切换分支<br>git add .  #添加文件到暂存区<br>git push origin 分支名 #提交分支<br>7,  分支合并<br>git checkout master #切换到主分支<br>git merge 分支名 #合并分支到主分支</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1, 配置全局的用户名和邮箱</p>\n<p>git config –global user.name “注册的用户名”</p>\n<p>git config –global user.email “注册的邮箱”</p>\n<p>2,生成SSH KEY命令:ssh-keygen -t rsa -C “注册的邮箱”</p>\n<p>将.ssh下的id_rsa.pub内容复制到github中</p>\n<p>用户中心—&gt;settings—&gt;左侧的SSH KEYS,权限RW,点击添加按钮</p>\n<p>3, 文件上传</p>\n<p>git init</p>\n<p>git add .</p>\n<p>git commit -m “”</p>\n<p>git remote add origin 远程库地址</p>\n<p>git push -u origin master &#x2F; git push -f origin master</p>\n<p>1,常用(上传代码)<br>git stash<br>git pull<br>git stash pop<br>git add .<br>git commit -m “”<br>git push<br>扩展:<br>git checkout 分支名:切换分支<br>git pull origin master: 拉取主分支代码<br>git merge dev: 合并dev分支代码到主分支</p>\n<p><img src=\"https://img-blog.csdnimg.cn/eb1e2203dd17421ebbf075e02cda5e0c.png\" alt=\"git使用\"></p>\n<p>1, 配置git<br>git config –global user.name “注册的用户名”<br>git config –global user.email “注册的邮箱”<br>2, 生成ssh配置文件<br>①生成SSH KEY命令:ssh-keygen -t rsa -C “注册的邮箱”<br>②将.ssh下的id_rsa.pub内容复制到github中<br>③用户中心—&gt;settings—&gt;左侧的SSH KEYS,权限RW,点击添加按钮<br>3,文件上传<br>git init<br>git add .<br>git commit -m “”<br>git remote add origin 远程库地址<br>git push -u origin master &#x2F; git push -f origin master<br>4,常用文件上传（上传到远程分支）<br>git stash<br>git pull<br>git stash pop<br>git add .<br>git commit -m “”<br>git push<br>5, 文件下载<br>git clone -b 分支名 版本库地址<br>6, git 上传代码到远程分支<br>git branch # 查看分支<br>git checkout -b 分支名 #创建并切换分支<br>git add .  #添加文件到暂存区<br>git push origin 分支名 #提交分支<br>7,  分支合并<br>git checkout master #切换到主分支<br>git merge 分支名 #合并分支到主分支</p>\n"},{"title":"flask1","comments":1,"copyright":true,"abbrlink":"31572391","date":"2022-09-04T07:17:37.000Z","_content":"\nFlask:\n1,flask目录(api目录结构)\n\n####1. 目录结构描述 \n├──  configs               // 配置文件目录\n│    ├──  __init__.py        // 数据库连接，api接口，中间件等配置信息\n│    ├──  log.py             // log的输出配置文件\n├──  core                  // 封装调用方法目录\n│    ├──  dict_config.py     // 配置需要编码转换文件\n│    ├──  db.py              // 封装mysql数据库连接配置\n│    ├──  redis_db.py        // 封装redis数据库连接配置\n├──  data                  // 文件存储目录\n├──  logs                  // 日志存放目录\n├──  schema                // 和mysql数据库交互目录\n│    ├──  models.py          // ORM关系映射模板文件\n│    ├──  deploy.sh          // 生成models.py文件脚本\n├──  test                  // 测试目录\n├──  utils                 // 常用配置工具目录\n├──  API.py                // API接口主程序\n\n2,返回值返回格式:\n'''\npython3\n返回成功: return jsonify(statusCode = 200, msg = \"\")\n返回失败: return jsonify(statusCode = 500, msg = \"\")\n\n3,异常处理格式:\ntry:\n    pass\nexcept Exception as e:\n    logger.error(f\"xx异常:{traceback.format_exc()}行数:{e.__traceback__.tb_lineno}\")\n\n4,项目环境打包方式:\n安装第三方模块:\n    pip3 install pipreqs\n生成配置文件requirements.txt,在项目根目录下执行\n    pipreqs ./ --encoding=utf8 --force\n参数说明:当要更新配置文件时,\"--force\"会覆盖之前生成的配置文件\n\n5,flask重定向总结: \n    1,字符串格式\n        return \"\"\n    2,response字符串格式\n        return response(\"\")\n    3,json格式:\n        return jsonify(msg=\"\",\"statusCode\" = 200)   \n        return jsonify(dict_data)\n        return json.dumps(dict_data)\n    4,页面跳转\n        return render_template(\"文件名\")\n    5,重定向：实现页面跳转\n        return redirect(user_for(\"函数名\"))   # 通过函数名实现页面跳转\n        return redirect('/')\n        return redirect('url地址')\n\n6, post请求方式传参参数类型\n    string: (缺省值)接受任何不包含斜杠的文本\n    int: 接受正整数\n    float: 接受征服点型\n    path: 类似string, 但可以包含斜杠\n    uuid: 接受UUID\n\n7, postman\n    params: 在url中添加参数,\"?\"用于区分,\"&\"用于拼接.  eg: http://www.baidu.com/obj?key1=1&key2=2\n    body ---> form_data (传递json类型的参数,可以上传文件,文件操作), k-v的形式传参\n    body ---> raw (可以传递不同格式的文件,对应的请求头分别是\n                    text: text/plain,\n                    javascript: application/javascript,\n                    json: application/json,\n                    html: application/html,\n                    xml: application/xml\n                ), 字典形式传参\n    binary: 用于二进制文件处理,eg:文件上传\n\n8,请求参数的获取,post参数一般是json格式(bady--raw--json)或者表单格式(bady--from_data)\n    ① json格式的参数获取\n        get_data = resquest.get_json()\n    ② get请求参数获取\n         if request.method == \"GET\":\n            Id = request.args.get(\"id\")\n         else:\n            Id = request.form.get(\"id\")\n","source":"_posts/flask1.md","raw":"---\ntitle: flask1\ncomments: true\ncopyright: true\ntags:\n  - web\n  - flask\ncategories:\n  - flask\nabbrlink: '31572391'\ndate: 2022-09-04 15:17:37\n---\n\nFlask:\n1,flask目录(api目录结构)\n\n####1. 目录结构描述 \n├──  configs               // 配置文件目录\n│    ├──  __init__.py        // 数据库连接，api接口，中间件等配置信息\n│    ├──  log.py             // log的输出配置文件\n├──  core                  // 封装调用方法目录\n│    ├──  dict_config.py     // 配置需要编码转换文件\n│    ├──  db.py              // 封装mysql数据库连接配置\n│    ├──  redis_db.py        // 封装redis数据库连接配置\n├──  data                  // 文件存储目录\n├──  logs                  // 日志存放目录\n├──  schema                // 和mysql数据库交互目录\n│    ├──  models.py          // ORM关系映射模板文件\n│    ├──  deploy.sh          // 生成models.py文件脚本\n├──  test                  // 测试目录\n├──  utils                 // 常用配置工具目录\n├──  API.py                // API接口主程序\n\n2,返回值返回格式:\n'''\npython3\n返回成功: return jsonify(statusCode = 200, msg = \"\")\n返回失败: return jsonify(statusCode = 500, msg = \"\")\n\n3,异常处理格式:\ntry:\n    pass\nexcept Exception as e:\n    logger.error(f\"xx异常:{traceback.format_exc()}行数:{e.__traceback__.tb_lineno}\")\n\n4,项目环境打包方式:\n安装第三方模块:\n    pip3 install pipreqs\n生成配置文件requirements.txt,在项目根目录下执行\n    pipreqs ./ --encoding=utf8 --force\n参数说明:当要更新配置文件时,\"--force\"会覆盖之前生成的配置文件\n\n5,flask重定向总结: \n    1,字符串格式\n        return \"\"\n    2,response字符串格式\n        return response(\"\")\n    3,json格式:\n        return jsonify(msg=\"\",\"statusCode\" = 200)   \n        return jsonify(dict_data)\n        return json.dumps(dict_data)\n    4,页面跳转\n        return render_template(\"文件名\")\n    5,重定向：实现页面跳转\n        return redirect(user_for(\"函数名\"))   # 通过函数名实现页面跳转\n        return redirect('/')\n        return redirect('url地址')\n\n6, post请求方式传参参数类型\n    string: (缺省值)接受任何不包含斜杠的文本\n    int: 接受正整数\n    float: 接受征服点型\n    path: 类似string, 但可以包含斜杠\n    uuid: 接受UUID\n\n7, postman\n    params: 在url中添加参数,\"?\"用于区分,\"&\"用于拼接.  eg: http://www.baidu.com/obj?key1=1&key2=2\n    body ---> form_data (传递json类型的参数,可以上传文件,文件操作), k-v的形式传参\n    body ---> raw (可以传递不同格式的文件,对应的请求头分别是\n                    text: text/plain,\n                    javascript: application/javascript,\n                    json: application/json,\n                    html: application/html,\n                    xml: application/xml\n                ), 字典形式传参\n    binary: 用于二进制文件处理,eg:文件上传\n\n8,请求参数的获取,post参数一般是json格式(bady--raw--json)或者表单格式(bady--from_data)\n    ① json格式的参数获取\n        get_data = resquest.get_json()\n    ② get请求参数获取\n         if request.method == \"GET\":\n            Id = request.args.get(\"id\")\n         else:\n            Id = request.form.get(\"id\")\n","slug":"flask1","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpv000b81nv8fsl6x14","content":"<p>Flask:<br>1,flask目录(api目录结构)</p>\n<p>####1. 目录结构描述<br>├──  configs               &#x2F;&#x2F; 配置文件目录<br>│    ├──  <strong>init</strong>.py        &#x2F;&#x2F; 数据库连接，api接口，中间件等配置信息<br>│    ├──  log.py             &#x2F;&#x2F; log的输出配置文件<br>├──  core                  &#x2F;&#x2F; 封装调用方法目录<br>│    ├──  dict_config.py     &#x2F;&#x2F; 配置需要编码转换文件<br>│    ├──  db.py              &#x2F;&#x2F; 封装mysql数据库连接配置<br>│    ├──  redis_db.py        &#x2F;&#x2F; 封装redis数据库连接配置<br>├──  data                  &#x2F;&#x2F; 文件存储目录<br>├──  logs                  &#x2F;&#x2F; 日志存放目录<br>├──  schema                &#x2F;&#x2F; 和mysql数据库交互目录<br>│    ├──  models.py          &#x2F;&#x2F; ORM关系映射模板文件<br>│    ├──  deploy.sh          &#x2F;&#x2F; 生成models.py文件脚本<br>├──  test                  &#x2F;&#x2F; 测试目录<br>├──  utils                 &#x2F;&#x2F; 常用配置工具目录<br>├──  API.py                &#x2F;&#x2F; API接口主程序</p>\n<p>2,返回值返回格式:<br>‘’’<br>python3<br>返回成功: return jsonify(statusCode &#x3D; 200, msg &#x3D; “”)<br>返回失败: return jsonify(statusCode &#x3D; 500, msg &#x3D; “”)</p>\n<p>3,异常处理格式:<br>try:<br>    pass<br>except Exception as e:<br>    logger.error(f”xx异常:{traceback.format_exc()}行数:{e.<strong>traceback</strong>.tb_lineno}”)</p>\n<p>4,项目环境打包方式:<br>安装第三方模块:<br>    pip3 install pipreqs<br>生成配置文件requirements.txt,在项目根目录下执行<br>    pipreqs .&#x2F; –encoding&#x3D;utf8 –force<br>参数说明:当要更新配置文件时,”–force”会覆盖之前生成的配置文件</p>\n<p>5,flask重定向总结:<br>    1,字符串格式<br>        return “”<br>    2,response字符串格式<br>        return response(“”)<br>    3,json格式:<br>        return jsonify(msg&#x3D;””,”statusCode” &#x3D; 200)<br>        return jsonify(dict_data)<br>        return json.dumps(dict_data)<br>    4,页面跳转<br>        return render_template(“文件名”)<br>    5,重定向：实现页面跳转<br>        return redirect(user_for(“函数名”))   # 通过函数名实现页面跳转<br>        return redirect(‘&#x2F;‘)<br>        return redirect(‘url地址’)</p>\n<p>6, post请求方式传参参数类型<br>    string: (缺省值)接受任何不包含斜杠的文本<br>    int: 接受正整数<br>    float: 接受征服点型<br>    path: 类似string, 但可以包含斜杠<br>    uuid: 接受UUID</p>\n<p>7, postman<br>    params: 在url中添加参数,”?”用于区分,”&amp;”用于拼接.  eg: <a href=\"http://www.baidu.com/obj?key1=1&amp;key2=2\">http://www.baidu.com/obj?key1=1&amp;key2=2</a><br>    body —&gt; form_data (传递json类型的参数,可以上传文件,文件操作), k-v的形式传参<br>    body —&gt; raw (可以传递不同格式的文件,对应的请求头分别是<br>                    text: text&#x2F;plain,<br>                    javascript: application&#x2F;javascript,<br>                    json: application&#x2F;json,<br>                    html: application&#x2F;html,<br>                    xml: application&#x2F;xml<br>                ), 字典形式传参<br>    binary: 用于二进制文件处理,eg:文件上传</p>\n<p>8,请求参数的获取,post参数一般是json格式(bady–raw–json)或者表单格式(bady–from_data)<br>    ① json格式的参数获取<br>        get_data &#x3D; resquest.get_json()<br>    ② get请求参数获取<br>         if request.method &#x3D;&#x3D; “GET”:<br>            Id &#x3D; request.args.get(“id”)<br>         else:<br>            Id &#x3D; request.form.get(“id”)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Flask:<br>1,flask目录(api目录结构)</p>\n<p>####1. 目录结构描述<br>├──  configs               &#x2F;&#x2F; 配置文件目录<br>│    ├──  <strong>init</strong>.py        &#x2F;&#x2F; 数据库连接，api接口，中间件等配置信息<br>│    ├──  log.py             &#x2F;&#x2F; log的输出配置文件<br>├──  core                  &#x2F;&#x2F; 封装调用方法目录<br>│    ├──  dict_config.py     &#x2F;&#x2F; 配置需要编码转换文件<br>│    ├──  db.py              &#x2F;&#x2F; 封装mysql数据库连接配置<br>│    ├──  redis_db.py        &#x2F;&#x2F; 封装redis数据库连接配置<br>├──  data                  &#x2F;&#x2F; 文件存储目录<br>├──  logs                  &#x2F;&#x2F; 日志存放目录<br>├──  schema                &#x2F;&#x2F; 和mysql数据库交互目录<br>│    ├──  models.py          &#x2F;&#x2F; ORM关系映射模板文件<br>│    ├──  deploy.sh          &#x2F;&#x2F; 生成models.py文件脚本<br>├──  test                  &#x2F;&#x2F; 测试目录<br>├──  utils                 &#x2F;&#x2F; 常用配置工具目录<br>├──  API.py                &#x2F;&#x2F; API接口主程序</p>\n<p>2,返回值返回格式:<br>‘’’<br>python3<br>返回成功: return jsonify(statusCode &#x3D; 200, msg &#x3D; “”)<br>返回失败: return jsonify(statusCode &#x3D; 500, msg &#x3D; “”)</p>\n<p>3,异常处理格式:<br>try:<br>    pass<br>except Exception as e:<br>    logger.error(f”xx异常:{traceback.format_exc()}行数:{e.<strong>traceback</strong>.tb_lineno}”)</p>\n<p>4,项目环境打包方式:<br>安装第三方模块:<br>    pip3 install pipreqs<br>生成配置文件requirements.txt,在项目根目录下执行<br>    pipreqs .&#x2F; –encoding&#x3D;utf8 –force<br>参数说明:当要更新配置文件时,”–force”会覆盖之前生成的配置文件</p>\n<p>5,flask重定向总结:<br>    1,字符串格式<br>        return “”<br>    2,response字符串格式<br>        return response(“”)<br>    3,json格式:<br>        return jsonify(msg&#x3D;””,”statusCode” &#x3D; 200)<br>        return jsonify(dict_data)<br>        return json.dumps(dict_data)<br>    4,页面跳转<br>        return render_template(“文件名”)<br>    5,重定向：实现页面跳转<br>        return redirect(user_for(“函数名”))   # 通过函数名实现页面跳转<br>        return redirect(‘&#x2F;‘)<br>        return redirect(‘url地址’)</p>\n<p>6, post请求方式传参参数类型<br>    string: (缺省值)接受任何不包含斜杠的文本<br>    int: 接受正整数<br>    float: 接受征服点型<br>    path: 类似string, 但可以包含斜杠<br>    uuid: 接受UUID</p>\n<p>7, postman<br>    params: 在url中添加参数,”?”用于区分,”&amp;”用于拼接.  eg: <a href=\"http://www.baidu.com/obj?key1=1&amp;key2=2\">http://www.baidu.com/obj?key1=1&amp;key2=2</a><br>    body —&gt; form_data (传递json类型的参数,可以上传文件,文件操作), k-v的形式传参<br>    body —&gt; raw (可以传递不同格式的文件,对应的请求头分别是<br>                    text: text&#x2F;plain,<br>                    javascript: application&#x2F;javascript,<br>                    json: application&#x2F;json,<br>                    html: application&#x2F;html,<br>                    xml: application&#x2F;xml<br>                ), 字典形式传参<br>    binary: 用于二进制文件处理,eg:文件上传</p>\n<p>8,请求参数的获取,post参数一般是json格式(bady–raw–json)或者表单格式(bady–from_data)<br>    ① json格式的参数获取<br>        get_data &#x3D; resquest.get_json()<br>    ② get请求参数获取<br>         if request.method &#x3D;&#x3D; “GET”:<br>            Id &#x3D; request.args.get(“id”)<br>         else:<br>            Id &#x3D; request.form.get(“id”)</p>\n"},{"title":"mongodb使用","comments":1,"copyright":true,"abbrlink":"a7b87908","date":"2022-08-29T12:15:13.000Z","_content":"\nwindow下mongodb的使用:\n\nMongoDB数据库:(两种方式一般使用第二种方便快捷)\n***管理员***\n一 ,使用流程:\n1,启动服务器(连接):在bin目录下:mongod --dbpath “data目录”\n2,访问(打开): http://localhost:27017/\n3,在bin目录下输入mongo,进入数据库\n3,进入:use admin (use进入,创建,切换)\n3,db.shutdownServer() :关闭数据库(关闭)\n3,访问(打开 ): http://localhost:27017/\n{手动}\n\n\n{自动}\n也可直接打开:\n二 ,升级为系统服务:\n1, 解压zip到MongoDB64文件夹下 --> 创建data和log文件夹 -->在log文件夹下创建MongoDB.log文件--> 进入bin目录 --> 输入 mongod --dbpath “data目录” --logpath “MongoDB.log目录及名称” --install -serviceName “MongoDB”\n将服务手动启动:net start MongoDB/net stop MongoDB\n2,在bin目录下输入mongo,进入数据库\n3,use 数据库名 :切换/创建数据库\n4,db:查看当前所在的数据库\n5,show dbs:查看当前MongoDB数据库中的所有数据库\n6,在数据库中创建一个集合(表)movie并插入一条记录\ndb.movie(表名).insert({name:”mymovie01”})(记录)\n7,当数据库中没有数据库对象(数据)时,show dbs 不会显示\n8,删除数据库:db.dropDatabase():删除当前所在的数据库\n9,集合的创建(数据表的创建)(与上述区别,没插入数据)\ndb.createCollection(name)\n10,show collections:显示所有集合\n11,索引的元信息存储在每个数据库的system.indexes集合中,不能插入删除\n12,集合的删除操作db.集合名.drop()\n13,数据类型:\nString:字符串(utf8)\nInteger:整数\nBoolean:布尔型:(true/false)\nDouble:浮点型(小数)\nMin/Max keys:最低和最高值比较\nArrays:多个值放到一个key中\nTimestamp:时间戳\nObject:此数据类型用于嵌入式文件(1 v 1,1 v多,多 v 1, 多 v 多)\nNull:空值\nSymbol:通常保留给特定符号类型的语言,此数据类型用于字符串相同\nDate:日期\nObject ID:文档(表,集合)ID\nBinary data :二进制数据\nCode:用于存储到文档中的js代码\nRegular expression:正则表达式\n\n文档对象的增查更删:\n增加:\n①db.文档名.insert([{k1:v1},{k2:v2}])\n②var docs = [{k1:v1},{k2:v2}]\ndb.文档名.insert(docs)\n查看文件结构:db.文档名.find()\n\n查:\ndb.集合名.find() :查询所有\ndb.集合名.findOne() :返回集合中的第一条文档数据\ndb.集合名.find().pretty() :结构化显示数据\n条件查询:\ndb.集合名.find(k:”v”).pretty()  \n小于:$lt  小于等于:$lte\n大于: $gt     大于等于:$gte  \n不等于:$ne   \ndb.集合名.find({k:{$ne:v}}).pretty()\n\nAND/OR\nAND\ndb.集合名.find({k1:\"v1\",k2:\"v2\"}).pretty()\nOR\ndb.集合名.find({$or:[{k1:\"v1\"},{k2:\"v2\"}]}).pretty()\n大于并且..或.. \ndb.集合名.find({k1:{$gt:v1},$or:[{k2:\"v2\"},{k3:\"v3\"}]}).pretty() \n\n更新(修改):\nCriteria:更新操作条件,类似sql语句中的where子句\nObjNEW:更新的操作符::(如$,$inc...),也可以理解为sql update查询内set后面的\nUpsert:如果不存在update的记录,是否插入objNEW,true为插入,默认是false,不插入\nMulti:默认是false,只更新找到的第一条记录,如果这个参数为true,就把按条件查出来\n多条记录全部更新\ndb.集合名.update({k1:\"v1\"},{$set:{k2:”要修改的值”}},false,true)\n\n删除:\nremove:db.infos.remove({k1:\"v1\"})\ndeletion criteria(可选):\njustOne(可选):\n投影(不显示0,1显示):db.infos.find({},{k1:0,k2:0,k3:0}).pretty()\n\n限制记录limit()\n只显示n个记录:db.infos.find().limit(n)\n先跳过m条记录,然后显示n条记录:db.infos.find().limit(n).skip(m)\n\n组合使用(限制记录+分页处理):n --> 显示文档个数  m --> 文档个数(页数 - 1)\nSkip()+Limit():分页显示\ndb.infos.find().limit(n).skip(m)\n\n排序:1:升序(小到大)  -1:降序(大到小)\ndb.infos.find().sort({key:-1}).pretty()\n","source":"_posts/mongodb使用.md","raw":"---\ntitle: mongodb使用\ncomments: true\ncopyright: true\ntags:\n  - sql\n  - mongodb\ncategories:\n  - sql\nabbrlink: a7b87908\ndate: 2022-08-29 20:15:13\n---\n\nwindow下mongodb的使用:\n\nMongoDB数据库:(两种方式一般使用第二种方便快捷)\n***管理员***\n一 ,使用流程:\n1,启动服务器(连接):在bin目录下:mongod --dbpath “data目录”\n2,访问(打开): http://localhost:27017/\n3,在bin目录下输入mongo,进入数据库\n3,进入:use admin (use进入,创建,切换)\n3,db.shutdownServer() :关闭数据库(关闭)\n3,访问(打开 ): http://localhost:27017/\n{手动}\n\n\n{自动}\n也可直接打开:\n二 ,升级为系统服务:\n1, 解压zip到MongoDB64文件夹下 --> 创建data和log文件夹 -->在log文件夹下创建MongoDB.log文件--> 进入bin目录 --> 输入 mongod --dbpath “data目录” --logpath “MongoDB.log目录及名称” --install -serviceName “MongoDB”\n将服务手动启动:net start MongoDB/net stop MongoDB\n2,在bin目录下输入mongo,进入数据库\n3,use 数据库名 :切换/创建数据库\n4,db:查看当前所在的数据库\n5,show dbs:查看当前MongoDB数据库中的所有数据库\n6,在数据库中创建一个集合(表)movie并插入一条记录\ndb.movie(表名).insert({name:”mymovie01”})(记录)\n7,当数据库中没有数据库对象(数据)时,show dbs 不会显示\n8,删除数据库:db.dropDatabase():删除当前所在的数据库\n9,集合的创建(数据表的创建)(与上述区别,没插入数据)\ndb.createCollection(name)\n10,show collections:显示所有集合\n11,索引的元信息存储在每个数据库的system.indexes集合中,不能插入删除\n12,集合的删除操作db.集合名.drop()\n13,数据类型:\nString:字符串(utf8)\nInteger:整数\nBoolean:布尔型:(true/false)\nDouble:浮点型(小数)\nMin/Max keys:最低和最高值比较\nArrays:多个值放到一个key中\nTimestamp:时间戳\nObject:此数据类型用于嵌入式文件(1 v 1,1 v多,多 v 1, 多 v 多)\nNull:空值\nSymbol:通常保留给特定符号类型的语言,此数据类型用于字符串相同\nDate:日期\nObject ID:文档(表,集合)ID\nBinary data :二进制数据\nCode:用于存储到文档中的js代码\nRegular expression:正则表达式\n\n文档对象的增查更删:\n增加:\n①db.文档名.insert([{k1:v1},{k2:v2}])\n②var docs = [{k1:v1},{k2:v2}]\ndb.文档名.insert(docs)\n查看文件结构:db.文档名.find()\n\n查:\ndb.集合名.find() :查询所有\ndb.集合名.findOne() :返回集合中的第一条文档数据\ndb.集合名.find().pretty() :结构化显示数据\n条件查询:\ndb.集合名.find(k:”v”).pretty()  \n小于:$lt  小于等于:$lte\n大于: $gt     大于等于:$gte  \n不等于:$ne   \ndb.集合名.find({k:{$ne:v}}).pretty()\n\nAND/OR\nAND\ndb.集合名.find({k1:\"v1\",k2:\"v2\"}).pretty()\nOR\ndb.集合名.find({$or:[{k1:\"v1\"},{k2:\"v2\"}]}).pretty()\n大于并且..或.. \ndb.集合名.find({k1:{$gt:v1},$or:[{k2:\"v2\"},{k3:\"v3\"}]}).pretty() \n\n更新(修改):\nCriteria:更新操作条件,类似sql语句中的where子句\nObjNEW:更新的操作符::(如$,$inc...),也可以理解为sql update查询内set后面的\nUpsert:如果不存在update的记录,是否插入objNEW,true为插入,默认是false,不插入\nMulti:默认是false,只更新找到的第一条记录,如果这个参数为true,就把按条件查出来\n多条记录全部更新\ndb.集合名.update({k1:\"v1\"},{$set:{k2:”要修改的值”}},false,true)\n\n删除:\nremove:db.infos.remove({k1:\"v1\"})\ndeletion criteria(可选):\njustOne(可选):\n投影(不显示0,1显示):db.infos.find({},{k1:0,k2:0,k3:0}).pretty()\n\n限制记录limit()\n只显示n个记录:db.infos.find().limit(n)\n先跳过m条记录,然后显示n条记录:db.infos.find().limit(n).skip(m)\n\n组合使用(限制记录+分页处理):n --> 显示文档个数  m --> 文档个数(页数 - 1)\nSkip()+Limit():分页显示\ndb.infos.find().limit(n).skip(m)\n\n排序:1:升序(小到大)  -1:降序(大到小)\ndb.infos.find().sort({key:-1}).pretty()\n","slug":"mongodb使用","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpv000g81nv84l15p43","content":"<p>window下mongodb的使用:</p>\n<p>MongoDB数据库:(两种方式一般使用第二种方便快捷)<br><em><strong>管理员</strong></em><br>一 ,使用流程:<br>1,启动服务器(连接):在bin目录下:mongod –dbpath “data目录”<br>2,访问(打开): <a href=\"http://localhost:27017/\">http://localhost:27017/</a><br>3,在bin目录下输入mongo,进入数据库<br>3,进入:use admin (use进入,创建,切换)<br>3,db.shutdownServer() :关闭数据库(关闭)<br>3,访问(打开 ): <a href=\"http://localhost:27017/\">http://localhost:27017/</a><br>{手动}</p>\n<p>{自动}<br>也可直接打开:<br>二 ,升级为系统服务:<br>1, 解压zip到MongoDB64文件夹下 –&gt; 创建data和log文件夹 –&gt;在log文件夹下创建MongoDB.log文件–&gt; 进入bin目录 –&gt; 输入 mongod –dbpath “data目录” –logpath “MongoDB.log目录及名称” –install -serviceName “MongoDB”<br>将服务手动启动:net start MongoDB&#x2F;net stop MongoDB<br>2,在bin目录下输入mongo,进入数据库<br>3,use 数据库名 :切换&#x2F;创建数据库<br>4,db:查看当前所在的数据库<br>5,show dbs:查看当前MongoDB数据库中的所有数据库<br>6,在数据库中创建一个集合(表)movie并插入一条记录<br>db.movie(表名).insert({name:”mymovie01”})(记录)<br>7,当数据库中没有数据库对象(数据)时,show dbs 不会显示<br>8,删除数据库:db.dropDatabase():删除当前所在的数据库<br>9,集合的创建(数据表的创建)(与上述区别,没插入数据)<br>db.createCollection(name)<br>10,show collections:显示所有集合<br>11,索引的元信息存储在每个数据库的system.indexes集合中,不能插入删除<br>12,集合的删除操作db.集合名.drop()<br>13,数据类型:<br>String:字符串(utf8)<br>Integer:整数<br>Boolean:布尔型:(true&#x2F;false)<br>Double:浮点型(小数)<br>Min&#x2F;Max keys:最低和最高值比较<br>Arrays:多个值放到一个key中<br>Timestamp:时间戳<br>Object:此数据类型用于嵌入式文件(1 v 1,1 v多,多 v 1, 多 v 多)<br>Null:空值<br>Symbol:通常保留给特定符号类型的语言,此数据类型用于字符串相同<br>Date:日期<br>Object ID:文档(表,集合)ID<br>Binary data :二进制数据<br>Code:用于存储到文档中的js代码<br>Regular expression:正则表达式</p>\n<p>文档对象的增查更删:<br>增加:<br>①db.文档名.insert([{k1:v1},{k2:v2}])<br>②var docs &#x3D; [{k1:v1},{k2:v2}]<br>db.文档名.insert(docs)<br>查看文件结构:db.文档名.find()</p>\n<p>查:<br>db.集合名.find() :查询所有<br>db.集合名.findOne() :返回集合中的第一条文档数据<br>db.集合名.find().pretty() :结构化显示数据<br>条件查询:<br>db.集合名.find(k:”v”).pretty()<br>小于:$lt  小于等于:$lte<br>大于: $gt     大于等于:$gte<br>不等于:$ne<br>db.集合名.find({k:{$ne:v}}).pretty()</p>\n<p>AND&#x2F;OR<br>AND<br>db.集合名.find({k1:”v1”,k2:”v2”}).pretty()<br>OR<br>db.集合名.find({$or:[{k1:”v1”},{k2:”v2”}]}).pretty()<br>大于并且..或..<br>db.集合名.find({k1:{$gt:v1},$or:[{k2:”v2”},{k3:”v3”}]}).pretty() </p>\n<p>更新(修改):<br>Criteria:更新操作条件,类似sql语句中的where子句<br>ObjNEW:更新的操作符::(如$,$inc…),也可以理解为sql update查询内set后面的<br>Upsert:如果不存在update的记录,是否插入objNEW,true为插入,默认是false,不插入<br>Multi:默认是false,只更新找到的第一条记录,如果这个参数为true,就把按条件查出来<br>多条记录全部更新<br>db.集合名.update({k1:”v1”},{$set:{k2:”要修改的值”}},false,true)</p>\n<p>删除:<br>remove:db.infos.remove({k1:”v1”})<br>deletion criteria(可选):<br>justOne(可选):<br>投影(不显示0,1显示):db.infos.find({},{k1:0,k2:0,k3:0}).pretty()</p>\n<p>限制记录limit()<br>只显示n个记录:db.infos.find().limit(n)<br>先跳过m条记录,然后显示n条记录:db.infos.find().limit(n).skip(m)</p>\n<p>组合使用(限制记录+分页处理):n –&gt; 显示文档个数  m –&gt; 文档个数(页数 - 1)<br>Skip()+Limit():分页显示<br>db.infos.find().limit(n).skip(m)</p>\n<p>排序:1:升序(小到大)  -1:降序(大到小)<br>db.infos.find().sort({key:-1}).pretty()</p>\n","site":{"data":{}},"excerpt":"","more":"<p>window下mongodb的使用:</p>\n<p>MongoDB数据库:(两种方式一般使用第二种方便快捷)<br><em><strong>管理员</strong></em><br>一 ,使用流程:<br>1,启动服务器(连接):在bin目录下:mongod –dbpath “data目录”<br>2,访问(打开): <a href=\"http://localhost:27017/\">http://localhost:27017/</a><br>3,在bin目录下输入mongo,进入数据库<br>3,进入:use admin (use进入,创建,切换)<br>3,db.shutdownServer() :关闭数据库(关闭)<br>3,访问(打开 ): <a href=\"http://localhost:27017/\">http://localhost:27017/</a><br>{手动}</p>\n<p>{自动}<br>也可直接打开:<br>二 ,升级为系统服务:<br>1, 解压zip到MongoDB64文件夹下 –&gt; 创建data和log文件夹 –&gt;在log文件夹下创建MongoDB.log文件–&gt; 进入bin目录 –&gt; 输入 mongod –dbpath “data目录” –logpath “MongoDB.log目录及名称” –install -serviceName “MongoDB”<br>将服务手动启动:net start MongoDB&#x2F;net stop MongoDB<br>2,在bin目录下输入mongo,进入数据库<br>3,use 数据库名 :切换&#x2F;创建数据库<br>4,db:查看当前所在的数据库<br>5,show dbs:查看当前MongoDB数据库中的所有数据库<br>6,在数据库中创建一个集合(表)movie并插入一条记录<br>db.movie(表名).insert({name:”mymovie01”})(记录)<br>7,当数据库中没有数据库对象(数据)时,show dbs 不会显示<br>8,删除数据库:db.dropDatabase():删除当前所在的数据库<br>9,集合的创建(数据表的创建)(与上述区别,没插入数据)<br>db.createCollection(name)<br>10,show collections:显示所有集合<br>11,索引的元信息存储在每个数据库的system.indexes集合中,不能插入删除<br>12,集合的删除操作db.集合名.drop()<br>13,数据类型:<br>String:字符串(utf8)<br>Integer:整数<br>Boolean:布尔型:(true&#x2F;false)<br>Double:浮点型(小数)<br>Min&#x2F;Max keys:最低和最高值比较<br>Arrays:多个值放到一个key中<br>Timestamp:时间戳<br>Object:此数据类型用于嵌入式文件(1 v 1,1 v多,多 v 1, 多 v 多)<br>Null:空值<br>Symbol:通常保留给特定符号类型的语言,此数据类型用于字符串相同<br>Date:日期<br>Object ID:文档(表,集合)ID<br>Binary data :二进制数据<br>Code:用于存储到文档中的js代码<br>Regular expression:正则表达式</p>\n<p>文档对象的增查更删:<br>增加:<br>①db.文档名.insert([{k1:v1},{k2:v2}])<br>②var docs &#x3D; [{k1:v1},{k2:v2}]<br>db.文档名.insert(docs)<br>查看文件结构:db.文档名.find()</p>\n<p>查:<br>db.集合名.find() :查询所有<br>db.集合名.findOne() :返回集合中的第一条文档数据<br>db.集合名.find().pretty() :结构化显示数据<br>条件查询:<br>db.集合名.find(k:”v”).pretty()<br>小于:$lt  小于等于:$lte<br>大于: $gt     大于等于:$gte<br>不等于:$ne<br>db.集合名.find({k:{$ne:v}}).pretty()</p>\n<p>AND&#x2F;OR<br>AND<br>db.集合名.find({k1:”v1”,k2:”v2”}).pretty()<br>OR<br>db.集合名.find({$or:[{k1:”v1”},{k2:”v2”}]}).pretty()<br>大于并且..或..<br>db.集合名.find({k1:{$gt:v1},$or:[{k2:”v2”},{k3:”v3”}]}).pretty() </p>\n<p>更新(修改):<br>Criteria:更新操作条件,类似sql语句中的where子句<br>ObjNEW:更新的操作符::(如$,$inc…),也可以理解为sql update查询内set后面的<br>Upsert:如果不存在update的记录,是否插入objNEW,true为插入,默认是false,不插入<br>Multi:默认是false,只更新找到的第一条记录,如果这个参数为true,就把按条件查出来<br>多条记录全部更新<br>db.集合名.update({k1:”v1”},{$set:{k2:”要修改的值”}},false,true)</p>\n<p>删除:<br>remove:db.infos.remove({k1:”v1”})<br>deletion criteria(可选):<br>justOne(可选):<br>投影(不显示0,1显示):db.infos.find({},{k1:0,k2:0,k3:0}).pretty()</p>\n<p>限制记录limit()<br>只显示n个记录:db.infos.find().limit(n)<br>先跳过m条记录,然后显示n条记录:db.infos.find().limit(n).skip(m)</p>\n<p>组合使用(限制记录+分页处理):n –&gt; 显示文档个数  m –&gt; 文档个数(页数 - 1)<br>Skip()+Limit():分页显示<br>db.infos.find().limit(n).skip(m)</p>\n<p>排序:1:升序(小到大)  -1:降序(大到小)<br>db.infos.find().sort({key:-1}).pretty()</p>\n"},{"title":"mysql基础","comments":1,"copyright":true,"abbrlink":"8e40d0ad","date":"2022-08-29T12:18:48.000Z","_content":"\n总结\n\t有关数据库的DDL操作\n\t- SHOW DATABASES;\n\t-CREATE DATABASES 数据库名;\n\t-DROP DATABASES [IF EXISTS]数据库名;\n\t-USE 数据库名;\n\t\n\t有关数据表的DDL操作\n\t-SHOW TABLES;\n\t-DESC 表名;\n\t-CREATE TABLES 表名(......);\n\t-DROP TABLE 表名;\n\t-ALTER TABLE  表名;\n\t\n\t数据表的列类型\n\t-数值类型:INT,FLOAT\n\t-日期类型:DATE,TIME\n\t-字符串类型:CHAR,VARCHAR,TEXT\n\n一,\n库操作\n①show databases;  查询当前用户下所有数据库\n\n②create database 数据库名;  创建数据库\n\n③use 数据库名;    打开库(包括切换其他数据库)\n\n④show tables;     显示当前数据库下所有的数据表\n\n⑤drop database 数据库名;  删除数据库\n\n⑥desc 表名;(dos下)      显示表结构\n\nfloat(7,2)-------整数部分99999     99999.99\n\nchar(4):  不可变字符串长度3位\nvarchar(4),可变数据长度\n\n二,\n表操作\n①create table 表名(id int);   建表\n create table demo3(id int,username varchar(20),userpass varchar(20),ctime datetime);\n\n\nfloat(7,2)---- 整数值99999  最大值99999.99\n\nchar(4)\nabc\nverchar(4)\nab\n\n②drop table 表名;      删除数据表\n\n③alter \n添加字段\nalter table 表名 add 字段名 数据类型;\t[单字段]     \nalter table demo1 add name varchar(20);\t\n\nalter table 表名 add(字段1 数据类型,字段2 数据类型...);\t[多字段]   \nalter table demo1 add(dates date,flag int);\n\ninsert into 表名 values(字段1值,,字段2值)\n\n⑤drop\nalter table 表名 drop 字段名;    删除字段\n\n④modify\n修改字段 (原表中已存在的,不修改列名)\nalter table 表名 modify 字段名 字段类型;\t\t[单字段] \nalter table demo1 modify flag char(1);\n\nalter table 表名 modify 字段名1 字段类型1,modify 字段名2 字段类型2...;\t\t[多字段] \nalter table demo1 modify flag char(1);\n\n⑥\n重命名字段\nalter table 表名 change 旧字段名 新字段名 字段类型;\n\n重命名表名\nalter table 表名 rename 新表名;\nrename table 表名 to 新表名;\n\n删除表数据(表截断),保留结构,清除表中所有数据,不清选择性删除,不能回退\ntruncate 表名;       \n\n三,约束\n数据库约束概念:在数据表上强制执行的效验规则,保证了数据的完整性\n(唯一约束,主键约束,外键约束会自动创建索引,非空约束不会,)\n\n非空约束 :\n建立数据表字段中使用或者在修改数据表字段中使用 ,      格式: 字段名 字段类名 约束名 \n不等于null :空字符串,0,'null',null不区分大小写,主键或非空不为null\n创建,修改\ncreate table 表名(字段名 字段类型 not null);     不填可默认为null\ncreate table 表名(id int not null);\n\nalter table 表名 modify 字段名 字段类型 约束名;\nalter table demo1 modify url text not null;\n\nalter table 表名 drop 字段名;    删除字段\nalter table demo drop id;\n\n\n唯一约束:\n建立在not null 前\n.修改,\n不出现重复值,允许出现多个NULL,同一张表可有多个唯一约束,可由多列组合而成,会为之建立对应的索引,若不给唯一约束起名.该唯一约束默认与列名相同,\nalter table 表名 modify 字段名 字段类型 unique;\nalter table demo modify id int unique;\n\nalter table 表名 drop 字段名;      删除唯一约束 (必须有多个字段)\nalter table demo drop id;\n\n主键约束\n相当于 非空约束 + 唯一约束   唯一确定一行记录的字段或字段组合\n注意.一张数据表中只能有一个主键\n创建\ncreate table 表名(字段名1 字段类型1 primary key,字段名2 字段类型2);\ncreate table demo5(id int primary key,name varchar(20));\n\nalter table 表名 drop primary key; 删除主键\n\n\nalter table 表名 modify 字段名 字段类型 primary key;\nalter table demo5 modify id int primary key; 修改主键 [将非主键字段修改为 主键字段]\n\n\ncreate table 表名(字段名1 字段类型1,字段名2 字段类型2,primary key(字段名1,字段名2 ));\ncreate table demo6(id int,name varchar(20),primary key(id,name)); 两个字段共用一个主键.复合主键\n\n\ncreate table 表名(主键名 主键类型 primary key auto_increment,字段名2 字段类型2);\ncreate table demo6(id int primary key auto_increment,name varchar(20));主键自增,在primary key 后加上auto_increment\n\n\ninsert into 表名(字段名) values(字段值); [主键自增时增加字段内容]\ninsert into demo6(name) values('zs');\n\n外键 约束([一对一,可选择任意一方来增加外键列,只要为外键列增加唯一约束就可],[一对多,在多的一端增加外键列])\n有外键的为从表,没有的为主表,保证两个数据表间的参照关系\n创建\n先创建主表\ncreate table 主表名(主键名 主键类型 primary key,字段名2 字段类型2);\ncreate table dept(deptno int primary key,dname varchar(20));\n\n再建从表\ncreate table 从表名(从表主键名 从表主键类型 primary key,字段名2 字段类型2,主表主键名 主表主键类型,constraint 从表名_fk foreign key(主表主键名) references 主表名(主表主键名));    从表名_fk:自定义的约束名  \ncreate table emp(empno int primary key,ename varchar(20),sal int,deptno int,constraint emp_fk  foreign key(deptno) references dept (deptno));\n\n删除外键约束\n①删除外键\nalter table 从表名 drop foreign key 约束名;\nalter table emp drop foreign key emp_fk;emp_fk,约束名\n\n②删除外键索引 \nalter table 从表名 drop index 约束名;\nalter table emp drop index emp_fk;\n\n增加外键\nalter table 从表名 add foreign key(主表主键) references 主表名(主表主键名);references 参照表及其主键(主表的主键)\nalter table emp add foreign key(deptno) references dept(deptno);\n\n\n检查约束:保证数据的输入校验规则(oracle支持,mysql 不支持)\ncreate table 表名(id int check(id in (1,2)));\n插入数据时只能输入1或2\ncreate table 表名(age int check(age>8));\n插入数据时只能是大于8的数据\n\nshow create table 表名;查询建表结构\n\nDML语句,数据操作语言\n插入,修改,删除语句\n\n插入数据:向新行中写入insert\ninsert into 表名(字段名...) values(值...)  指定插入字段,如果字段名没写,默认值为NULL\ninsert into demo1(id,name,url) values(1,'zs','test');\ninsert into demo1(name,url) values('zs','test');\n\ninsert into 表名 values(值...)  默认插入所有字段\ninsert into demo1 values(1,'zs','test');\n\n插入多条记录(行)\ninsert into 表名 values(值...),(值...);\ninsert into demo1 values(4,'zs','test'),(5,'aa','test');\n\n修改/更新数据update\nupdate 表名 set 需要修改的字段 = 新值;\n\n[单个修改]\n[多条记录]update 表名 set 需要修改的字段 = 新值;\nupdate demo1 set url = 'a';\n\n[多个字段值修改]\nupdate 表名 set 需修改的字段1 = 新值1,需修改的字段2 = 新值2;\n\n[根据条件修改]\nupdate 表名 set 需要修改的字段 = 新值 where 条件;\nupdate demo1 set name = 'test' where id = 4;\n\n删除delete from \n[单条删除]\ndelete from 表名 where 条件;\ndelete from demo1 where name = 'zs';\n[多条删除]\ndelete from 表名;\ndelete from demo1;\n\n\nDQL数据库查询语言\n查询\nselect 字段列表 from 表名;[查询指定行数据]\nselect name from demo1;\nselect * from 表名;[查询所有行数据]\nselect * from demo1;\n\n算术运算符:+-*/\n为字段名起别名 格式:字段名 as 别名(使用双引号)\nselect name,sal + 500 as \"sals\" from demo1;\n注意:as可以省略,双引号可以省略(在别名中出现空格时不能省略)\nselect name,sal + 500 sals from demo1;\n\n去重:distinct\na,单字段去重\nselect distinct 字段名 from 表名;\nb,组合字段去重\nselect distinct 字段名1,字段名2... from 表名;\n\n\nnot > and > or\n\nlimit 取数据记录\nlimit n -----记录数\nlimit n,m n---起始索引  (从0开始) m----记录数\n\n大多数 用于分页\nselect * from 表名 limit n;\n\n数据排序\n格式: order by 字段名;(查询 语句 结尾)\n---升序:asc[默认]\nselect * from 表名 order by 字段名;\neg:select * from demo1 order by sal asc; 按工资升序排列\n---降序 :desc\nselect * from 表名 order by 字段名 desc;\neg:select * from demo1 order by sal desc; 按工资 降序排列 \n---组合排序\nselect * from demo1 order by sal,name desc;按照第一个字段排序,如果有重复数据则按照第二个字段排序\nselect * from 表名 order by 字段名1 排序类型1,字段名2 排序类型2;\n\n---别名排序\nselect 字段名1,对字段名2修改 字段名2修改的别名 from 表名 order by 字段名2修改的别名;一般情况是为生成的新字段数据,执行排序操作\neg: select name,sal+200 sals from demo1 order by sals;\n\n索引\n作用:用于提高数据表查询效率\n创建索引:\n自动:由数据库自动完成,通过创建主键约束 ,唯一约束,外键约束会自动建立索引\n手动:\n create index i_name on demo1(name);\n格式:create index 索引名 on 表名(字段...);\ncreate index i_us on demo1(url,sal);组合索引\n\n删除索引\ndrop index 索引名  on 表名;\ndrop index i_us on demo1;\n\nalter table 表名 drop index 索引名\nalter table demo1 drop index i_name;\n\n函数\n字符串\nconcat('a','b');连接ab.一般是select查询\n数值\nmod(1,3);1/3的余数\nselect ceil(0.8);1 ----ceil向上取整   ceil(-0.8);0\nselect floor(0.8);0 ---floor向下取整  floor(-0.8);-1\n截断\nselect truncate(3.21,2);---3.21\nselect truncate(3.21,1);---3.2\n当前日期\nselect curdate();\n当前时间\nselect curtime();\n当前时间日期\nselect now();\n一般计算年龄:\nselect dates,year(now())-year(dates)  age from demo1;\n\n\nselect ifnull(1,2);1\nselect ifnull(数据1,数据 2);如果数据1为null,返回数据2,否则返回数据1\n\nselect nullif(3,2);3\nselect nullif(数据1,数据2);如果数据1和数据2相等,返回null,否则返回数据1\n\nselect name,sal,if(sal,'有值','空值') result from demo1;\nif(数据1,数据2,数据3);如果数据1 为true,返回数据2,否则返回数据3\n\nselect isnull(sal) from demo1;0表示false.1表示true(是不是空值,如果是空值true,不是空值false)\nisnull(数据1);判断数据1是否为null,如果为null返回true,否则返回false\n\nselect version();显示数据库当前版本\nselect database();显示当前数据库名\nselect password('123');123字符password加密的方式\nselect md5('123');字符123md5加密的方式\n\n多行函数(聚合函数)   除 count外 都会 忽略null的值 \navg():平均值\ncount():统计行数\nmax():求最大值\nmin():求最小值\nsum():求和\nselect avg(sal),max(sal),min(sal),sum(sal) from demo1;\n\nwhere + group by + order by\n\n数据分组 group by\nselect deptno,avg(sql) from emp group by deptno;从员工 表中依据部门编号分组查询部门编号 ----分组查询\n\n分组排序\nselect deptno,(ename,)avg(sql) avgs from emp group by deptno order by avgs desc;\n\nwhere 和having 的区别\nwhere 只能用在表名后\nhaving用在group by 后\n\n分组排序 加条件\n查询平均工资大于1500的部门\nselect deptno,avg(sql) avgs from emp group by deptno having sal > 1500  order by avgs desc;\n\nselect deptno,sum(sal) sums from emp where sal > 1500 group by deptno; \n\nselect deptno,sum(sal) sums from emp where sal > 1500 group by deptno having sums >3000;\n\nselect deptno,sum(sal) sums from emp where sal > 1500 group by deptno having sums >3000 order by sums;\n{\t\n\tDQL:数据库查询语言\n\t主要由SELECT . WHERE,ORDER BY,GROUP BY,和HAVING关键字构成\n\n\tDML:数据操作语言\n\t主要由insert,update,和delete三个关键字完成,对数据库记录修改\n\t\n\tDDL:数据定义语言\n\t主要由create,alter和drop和truncate四个关键字完成\n\t\n\tDCL:数据控制语言\n\t主要由grant和revoke关键字完成\n\t\n\tTPL:事务处理语言\n\t主要由commit,rollback,transaction关键字完成\n}\n","source":"_posts/mysql基础.md","raw":"---\ntitle: mysql基础\ncomments: true\ncopyright: true\ntags:\n  - sql\n  - mysql\ncategories:\n  - mysql\nabbrlink: 8e40d0ad\ndate: 2022-08-29 20:18:48\n---\n\n总结\n\t有关数据库的DDL操作\n\t- SHOW DATABASES;\n\t-CREATE DATABASES 数据库名;\n\t-DROP DATABASES [IF EXISTS]数据库名;\n\t-USE 数据库名;\n\t\n\t有关数据表的DDL操作\n\t-SHOW TABLES;\n\t-DESC 表名;\n\t-CREATE TABLES 表名(......);\n\t-DROP TABLE 表名;\n\t-ALTER TABLE  表名;\n\t\n\t数据表的列类型\n\t-数值类型:INT,FLOAT\n\t-日期类型:DATE,TIME\n\t-字符串类型:CHAR,VARCHAR,TEXT\n\n一,\n库操作\n①show databases;  查询当前用户下所有数据库\n\n②create database 数据库名;  创建数据库\n\n③use 数据库名;    打开库(包括切换其他数据库)\n\n④show tables;     显示当前数据库下所有的数据表\n\n⑤drop database 数据库名;  删除数据库\n\n⑥desc 表名;(dos下)      显示表结构\n\nfloat(7,2)-------整数部分99999     99999.99\n\nchar(4):  不可变字符串长度3位\nvarchar(4),可变数据长度\n\n二,\n表操作\n①create table 表名(id int);   建表\n create table demo3(id int,username varchar(20),userpass varchar(20),ctime datetime);\n\n\nfloat(7,2)---- 整数值99999  最大值99999.99\n\nchar(4)\nabc\nverchar(4)\nab\n\n②drop table 表名;      删除数据表\n\n③alter \n添加字段\nalter table 表名 add 字段名 数据类型;\t[单字段]     \nalter table demo1 add name varchar(20);\t\n\nalter table 表名 add(字段1 数据类型,字段2 数据类型...);\t[多字段]   \nalter table demo1 add(dates date,flag int);\n\ninsert into 表名 values(字段1值,,字段2值)\n\n⑤drop\nalter table 表名 drop 字段名;    删除字段\n\n④modify\n修改字段 (原表中已存在的,不修改列名)\nalter table 表名 modify 字段名 字段类型;\t\t[单字段] \nalter table demo1 modify flag char(1);\n\nalter table 表名 modify 字段名1 字段类型1,modify 字段名2 字段类型2...;\t\t[多字段] \nalter table demo1 modify flag char(1);\n\n⑥\n重命名字段\nalter table 表名 change 旧字段名 新字段名 字段类型;\n\n重命名表名\nalter table 表名 rename 新表名;\nrename table 表名 to 新表名;\n\n删除表数据(表截断),保留结构,清除表中所有数据,不清选择性删除,不能回退\ntruncate 表名;       \n\n三,约束\n数据库约束概念:在数据表上强制执行的效验规则,保证了数据的完整性\n(唯一约束,主键约束,外键约束会自动创建索引,非空约束不会,)\n\n非空约束 :\n建立数据表字段中使用或者在修改数据表字段中使用 ,      格式: 字段名 字段类名 约束名 \n不等于null :空字符串,0,'null',null不区分大小写,主键或非空不为null\n创建,修改\ncreate table 表名(字段名 字段类型 not null);     不填可默认为null\ncreate table 表名(id int not null);\n\nalter table 表名 modify 字段名 字段类型 约束名;\nalter table demo1 modify url text not null;\n\nalter table 表名 drop 字段名;    删除字段\nalter table demo drop id;\n\n\n唯一约束:\n建立在not null 前\n.修改,\n不出现重复值,允许出现多个NULL,同一张表可有多个唯一约束,可由多列组合而成,会为之建立对应的索引,若不给唯一约束起名.该唯一约束默认与列名相同,\nalter table 表名 modify 字段名 字段类型 unique;\nalter table demo modify id int unique;\n\nalter table 表名 drop 字段名;      删除唯一约束 (必须有多个字段)\nalter table demo drop id;\n\n主键约束\n相当于 非空约束 + 唯一约束   唯一确定一行记录的字段或字段组合\n注意.一张数据表中只能有一个主键\n创建\ncreate table 表名(字段名1 字段类型1 primary key,字段名2 字段类型2);\ncreate table demo5(id int primary key,name varchar(20));\n\nalter table 表名 drop primary key; 删除主键\n\n\nalter table 表名 modify 字段名 字段类型 primary key;\nalter table demo5 modify id int primary key; 修改主键 [将非主键字段修改为 主键字段]\n\n\ncreate table 表名(字段名1 字段类型1,字段名2 字段类型2,primary key(字段名1,字段名2 ));\ncreate table demo6(id int,name varchar(20),primary key(id,name)); 两个字段共用一个主键.复合主键\n\n\ncreate table 表名(主键名 主键类型 primary key auto_increment,字段名2 字段类型2);\ncreate table demo6(id int primary key auto_increment,name varchar(20));主键自增,在primary key 后加上auto_increment\n\n\ninsert into 表名(字段名) values(字段值); [主键自增时增加字段内容]\ninsert into demo6(name) values('zs');\n\n外键 约束([一对一,可选择任意一方来增加外键列,只要为外键列增加唯一约束就可],[一对多,在多的一端增加外键列])\n有外键的为从表,没有的为主表,保证两个数据表间的参照关系\n创建\n先创建主表\ncreate table 主表名(主键名 主键类型 primary key,字段名2 字段类型2);\ncreate table dept(deptno int primary key,dname varchar(20));\n\n再建从表\ncreate table 从表名(从表主键名 从表主键类型 primary key,字段名2 字段类型2,主表主键名 主表主键类型,constraint 从表名_fk foreign key(主表主键名) references 主表名(主表主键名));    从表名_fk:自定义的约束名  \ncreate table emp(empno int primary key,ename varchar(20),sal int,deptno int,constraint emp_fk  foreign key(deptno) references dept (deptno));\n\n删除外键约束\n①删除外键\nalter table 从表名 drop foreign key 约束名;\nalter table emp drop foreign key emp_fk;emp_fk,约束名\n\n②删除外键索引 \nalter table 从表名 drop index 约束名;\nalter table emp drop index emp_fk;\n\n增加外键\nalter table 从表名 add foreign key(主表主键) references 主表名(主表主键名);references 参照表及其主键(主表的主键)\nalter table emp add foreign key(deptno) references dept(deptno);\n\n\n检查约束:保证数据的输入校验规则(oracle支持,mysql 不支持)\ncreate table 表名(id int check(id in (1,2)));\n插入数据时只能输入1或2\ncreate table 表名(age int check(age>8));\n插入数据时只能是大于8的数据\n\nshow create table 表名;查询建表结构\n\nDML语句,数据操作语言\n插入,修改,删除语句\n\n插入数据:向新行中写入insert\ninsert into 表名(字段名...) values(值...)  指定插入字段,如果字段名没写,默认值为NULL\ninsert into demo1(id,name,url) values(1,'zs','test');\ninsert into demo1(name,url) values('zs','test');\n\ninsert into 表名 values(值...)  默认插入所有字段\ninsert into demo1 values(1,'zs','test');\n\n插入多条记录(行)\ninsert into 表名 values(值...),(值...);\ninsert into demo1 values(4,'zs','test'),(5,'aa','test');\n\n修改/更新数据update\nupdate 表名 set 需要修改的字段 = 新值;\n\n[单个修改]\n[多条记录]update 表名 set 需要修改的字段 = 新值;\nupdate demo1 set url = 'a';\n\n[多个字段值修改]\nupdate 表名 set 需修改的字段1 = 新值1,需修改的字段2 = 新值2;\n\n[根据条件修改]\nupdate 表名 set 需要修改的字段 = 新值 where 条件;\nupdate demo1 set name = 'test' where id = 4;\n\n删除delete from \n[单条删除]\ndelete from 表名 where 条件;\ndelete from demo1 where name = 'zs';\n[多条删除]\ndelete from 表名;\ndelete from demo1;\n\n\nDQL数据库查询语言\n查询\nselect 字段列表 from 表名;[查询指定行数据]\nselect name from demo1;\nselect * from 表名;[查询所有行数据]\nselect * from demo1;\n\n算术运算符:+-*/\n为字段名起别名 格式:字段名 as 别名(使用双引号)\nselect name,sal + 500 as \"sals\" from demo1;\n注意:as可以省略,双引号可以省略(在别名中出现空格时不能省略)\nselect name,sal + 500 sals from demo1;\n\n去重:distinct\na,单字段去重\nselect distinct 字段名 from 表名;\nb,组合字段去重\nselect distinct 字段名1,字段名2... from 表名;\n\n\nnot > and > or\n\nlimit 取数据记录\nlimit n -----记录数\nlimit n,m n---起始索引  (从0开始) m----记录数\n\n大多数 用于分页\nselect * from 表名 limit n;\n\n数据排序\n格式: order by 字段名;(查询 语句 结尾)\n---升序:asc[默认]\nselect * from 表名 order by 字段名;\neg:select * from demo1 order by sal asc; 按工资升序排列\n---降序 :desc\nselect * from 表名 order by 字段名 desc;\neg:select * from demo1 order by sal desc; 按工资 降序排列 \n---组合排序\nselect * from demo1 order by sal,name desc;按照第一个字段排序,如果有重复数据则按照第二个字段排序\nselect * from 表名 order by 字段名1 排序类型1,字段名2 排序类型2;\n\n---别名排序\nselect 字段名1,对字段名2修改 字段名2修改的别名 from 表名 order by 字段名2修改的别名;一般情况是为生成的新字段数据,执行排序操作\neg: select name,sal+200 sals from demo1 order by sals;\n\n索引\n作用:用于提高数据表查询效率\n创建索引:\n自动:由数据库自动完成,通过创建主键约束 ,唯一约束,外键约束会自动建立索引\n手动:\n create index i_name on demo1(name);\n格式:create index 索引名 on 表名(字段...);\ncreate index i_us on demo1(url,sal);组合索引\n\n删除索引\ndrop index 索引名  on 表名;\ndrop index i_us on demo1;\n\nalter table 表名 drop index 索引名\nalter table demo1 drop index i_name;\n\n函数\n字符串\nconcat('a','b');连接ab.一般是select查询\n数值\nmod(1,3);1/3的余数\nselect ceil(0.8);1 ----ceil向上取整   ceil(-0.8);0\nselect floor(0.8);0 ---floor向下取整  floor(-0.8);-1\n截断\nselect truncate(3.21,2);---3.21\nselect truncate(3.21,1);---3.2\n当前日期\nselect curdate();\n当前时间\nselect curtime();\n当前时间日期\nselect now();\n一般计算年龄:\nselect dates,year(now())-year(dates)  age from demo1;\n\n\nselect ifnull(1,2);1\nselect ifnull(数据1,数据 2);如果数据1为null,返回数据2,否则返回数据1\n\nselect nullif(3,2);3\nselect nullif(数据1,数据2);如果数据1和数据2相等,返回null,否则返回数据1\n\nselect name,sal,if(sal,'有值','空值') result from demo1;\nif(数据1,数据2,数据3);如果数据1 为true,返回数据2,否则返回数据3\n\nselect isnull(sal) from demo1;0表示false.1表示true(是不是空值,如果是空值true,不是空值false)\nisnull(数据1);判断数据1是否为null,如果为null返回true,否则返回false\n\nselect version();显示数据库当前版本\nselect database();显示当前数据库名\nselect password('123');123字符password加密的方式\nselect md5('123');字符123md5加密的方式\n\n多行函数(聚合函数)   除 count外 都会 忽略null的值 \navg():平均值\ncount():统计行数\nmax():求最大值\nmin():求最小值\nsum():求和\nselect avg(sal),max(sal),min(sal),sum(sal) from demo1;\n\nwhere + group by + order by\n\n数据分组 group by\nselect deptno,avg(sql) from emp group by deptno;从员工 表中依据部门编号分组查询部门编号 ----分组查询\n\n分组排序\nselect deptno,(ename,)avg(sql) avgs from emp group by deptno order by avgs desc;\n\nwhere 和having 的区别\nwhere 只能用在表名后\nhaving用在group by 后\n\n分组排序 加条件\n查询平均工资大于1500的部门\nselect deptno,avg(sql) avgs from emp group by deptno having sal > 1500  order by avgs desc;\n\nselect deptno,sum(sal) sums from emp where sal > 1500 group by deptno; \n\nselect deptno,sum(sal) sums from emp where sal > 1500 group by deptno having sums >3000;\n\nselect deptno,sum(sal) sums from emp where sal > 1500 group by deptno having sums >3000 order by sums;\n{\t\n\tDQL:数据库查询语言\n\t主要由SELECT . WHERE,ORDER BY,GROUP BY,和HAVING关键字构成\n\n\tDML:数据操作语言\n\t主要由insert,update,和delete三个关键字完成,对数据库记录修改\n\t\n\tDDL:数据定义语言\n\t主要由create,alter和drop和truncate四个关键字完成\n\t\n\tDCL:数据控制语言\n\t主要由grant和revoke关键字完成\n\t\n\tTPL:事务处理语言\n\t主要由commit,rollback,transaction关键字完成\n}\n","slug":"mysql基础","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpw000h81nv9ntz2j1r","content":"<p>总结<br>    有关数据库的DDL操作<br>    - SHOW DATABASES;<br>    -CREATE DATABASES 数据库名;<br>    -DROP DATABASES [IF EXISTS]数据库名;<br>    -USE 数据库名;</p>\n<pre><code>有关数据表的DDL操作\n-SHOW TABLES;\n-DESC 表名;\n-CREATE TABLES 表名(......);\n-DROP TABLE 表名;\n-ALTER TABLE  表名;\n\n数据表的列类型\n-数值类型:INT,FLOAT\n-日期类型:DATE,TIME\n-字符串类型:CHAR,VARCHAR,TEXT\n</code></pre>\n<p>一,<br>库操作<br>①show databases;  查询当前用户下所有数据库</p>\n<p>②create database 数据库名;  创建数据库</p>\n<p>③use 数据库名;    打开库(包括切换其他数据库)</p>\n<p>④show tables;     显示当前数据库下所有的数据表</p>\n<p>⑤drop database 数据库名;  删除数据库</p>\n<p>⑥desc 表名;(dos下)      显示表结构</p>\n<p>float(7,2)——-整数部分99999     99999.99</p>\n<p>char(4):  不可变字符串长度3位<br>varchar(4),可变数据长度</p>\n<p>二,<br>表操作<br>①create table 表名(id int);   建表<br> create table demo3(id int,username varchar(20),userpass varchar(20),ctime datetime);</p>\n<p>float(7,2)—- 整数值99999  最大值99999.99</p>\n<p>char(4)<br>abc<br>verchar(4)<br>ab</p>\n<p>②drop table 表名;      删除数据表</p>\n<p>③alter<br>添加字段<br>alter table 表名 add 字段名 数据类型;    [单字段]<br>alter table demo1 add name varchar(20);    </p>\n<p>alter table 表名 add(字段1 数据类型,字段2 数据类型…);    [多字段]<br>alter table demo1 add(dates date,flag int);</p>\n<p>insert into 表名 values(字段1值,,字段2值)</p>\n<p>⑤drop<br>alter table 表名 drop 字段名;    删除字段</p>\n<p>④modify<br>修改字段 (原表中已存在的,不修改列名)<br>alter table 表名 modify 字段名 字段类型;        [单字段]<br>alter table demo1 modify flag char(1);</p>\n<p>alter table 表名 modify 字段名1 字段类型1,modify 字段名2 字段类型2…;        [多字段]<br>alter table demo1 modify flag char(1);</p>\n<p>⑥<br>重命名字段<br>alter table 表名 change 旧字段名 新字段名 字段类型;</p>\n<p>重命名表名<br>alter table 表名 rename 新表名;<br>rename table 表名 to 新表名;</p>\n<p>删除表数据(表截断),保留结构,清除表中所有数据,不清选择性删除,不能回退<br>truncate 表名;       </p>\n<p>三,约束<br>数据库约束概念:在数据表上强制执行的效验规则,保证了数据的完整性<br>(唯一约束,主键约束,外键约束会自动创建索引,非空约束不会,)</p>\n<p>非空约束 :<br>建立数据表字段中使用或者在修改数据表字段中使用 ,      格式: 字段名 字段类名 约束名<br>不等于null :空字符串,0,’null’,null不区分大小写,主键或非空不为null<br>创建,修改<br>create table 表名(字段名 字段类型 not null);     不填可默认为null<br>create table 表名(id int not null);</p>\n<p>alter table 表名 modify 字段名 字段类型 约束名;<br>alter table demo1 modify url text not null;</p>\n<p>alter table 表名 drop 字段名;    删除字段<br>alter table demo drop id;</p>\n<p>唯一约束:<br>建立在not null 前<br>.修改,<br>不出现重复值,允许出现多个NULL,同一张表可有多个唯一约束,可由多列组合而成,会为之建立对应的索引,若不给唯一约束起名.该唯一约束默认与列名相同,<br>alter table 表名 modify 字段名 字段类型 unique;<br>alter table demo modify id int unique;</p>\n<p>alter table 表名 drop 字段名;      删除唯一约束 (必须有多个字段)<br>alter table demo drop id;</p>\n<p>主键约束<br>相当于 非空约束 + 唯一约束   唯一确定一行记录的字段或字段组合<br>注意.一张数据表中只能有一个主键<br>创建<br>create table 表名(字段名1 字段类型1 primary key,字段名2 字段类型2);<br>create table demo5(id int primary key,name varchar(20));</p>\n<p>alter table 表名 drop primary key; 删除主键</p>\n<p>alter table 表名 modify 字段名 字段类型 primary key;<br>alter table demo5 modify id int primary key; 修改主键 [将非主键字段修改为 主键字段]</p>\n<p>create table 表名(字段名1 字段类型1,字段名2 字段类型2,primary key(字段名1,字段名2 ));<br>create table demo6(id int,name varchar(20),primary key(id,name)); 两个字段共用一个主键.复合主键</p>\n<p>create table 表名(主键名 主键类型 primary key auto_increment,字段名2 字段类型2);<br>create table demo6(id int primary key auto_increment,name varchar(20));主键自增,在primary key 后加上auto_increment</p>\n<p>insert into 表名(字段名) values(字段值); [主键自增时增加字段内容]<br>insert into demo6(name) values(‘zs’);</p>\n<p>外键 约束([一对一,可选择任意一方来增加外键列,只要为外键列增加唯一约束就可],[一对多,在多的一端增加外键列])<br>有外键的为从表,没有的为主表,保证两个数据表间的参照关系<br>创建<br>先创建主表<br>create table 主表名(主键名 主键类型 primary key,字段名2 字段类型2);<br>create table dept(deptno int primary key,dname varchar(20));</p>\n<p>再建从表<br>create table 从表名(从表主键名 从表主键类型 primary key,字段名2 字段类型2,主表主键名 主表主键类型,constraint 从表名_fk foreign key(主表主键名) references 主表名(主表主键名));    从表名_fk:自定义的约束名<br>create table emp(empno int primary key,ename varchar(20),sal int,deptno int,constraint emp_fk  foreign key(deptno) references dept (deptno));</p>\n<p>删除外键约束<br>①删除外键<br>alter table 从表名 drop foreign key 约束名;<br>alter table emp drop foreign key emp_fk;emp_fk,约束名</p>\n<p>②删除外键索引<br>alter table 从表名 drop index 约束名;<br>alter table emp drop index emp_fk;</p>\n<p>增加外键<br>alter table 从表名 add foreign key(主表主键) references 主表名(主表主键名);references 参照表及其主键(主表的主键)<br>alter table emp add foreign key(deptno) references dept(deptno);</p>\n<p>检查约束:保证数据的输入校验规则(oracle支持,mysql 不支持)<br>create table 表名(id int check(id in (1,2)));<br>插入数据时只能输入1或2<br>create table 表名(age int check(age&gt;8));<br>插入数据时只能是大于8的数据</p>\n<p>show create table 表名;查询建表结构</p>\n<p>DML语句,数据操作语言<br>插入,修改,删除语句</p>\n<p>插入数据:向新行中写入insert<br>insert into 表名(字段名…) values(值…)  指定插入字段,如果字段名没写,默认值为NULL<br>insert into demo1(id,name,url) values(1,’zs’,’test’);<br>insert into demo1(name,url) values(‘zs’,’test’);</p>\n<p>insert into 表名 values(值…)  默认插入所有字段<br>insert into demo1 values(1,’zs’,’test’);</p>\n<p>插入多条记录(行)<br>insert into 表名 values(值…),(值…);<br>insert into demo1 values(4,’zs’,’test’),(5,’aa’,’test’);</p>\n<p>修改&#x2F;更新数据update<br>update 表名 set 需要修改的字段 &#x3D; 新值;</p>\n<p>[单个修改]<br>[多条记录]update 表名 set 需要修改的字段 &#x3D; 新值;<br>update demo1 set url &#x3D; ‘a’;</p>\n<p>[多个字段值修改]<br>update 表名 set 需修改的字段1 &#x3D; 新值1,需修改的字段2 &#x3D; 新值2;</p>\n<p>[根据条件修改]<br>update 表名 set 需要修改的字段 &#x3D; 新值 where 条件;<br>update demo1 set name &#x3D; ‘test’ where id &#x3D; 4;</p>\n<p>删除delete from<br>[单条删除]<br>delete from 表名 where 条件;<br>delete from demo1 where name &#x3D; ‘zs’;<br>[多条删除]<br>delete from 表名;<br>delete from demo1;</p>\n<p>DQL数据库查询语言<br>查询<br>select 字段列表 from 表名;[查询指定行数据]<br>select name from demo1;<br>select * from 表名;[查询所有行数据]<br>select * from demo1;</p>\n<p>算术运算符:+-*&#x2F;<br>为字段名起别名 格式:字段名 as 别名(使用双引号)<br>select name,sal + 500 as “sals” from demo1;<br>注意:as可以省略,双引号可以省略(在别名中出现空格时不能省略)<br>select name,sal + 500 sals from demo1;</p>\n<p>去重:distinct<br>a,单字段去重<br>select distinct 字段名 from 表名;<br>b,组合字段去重<br>select distinct 字段名1,字段名2… from 表名;</p>\n<p>not &gt; and &gt; or</p>\n<p>limit 取数据记录<br>limit n —–记录数<br>limit n,m n—起始索引  (从0开始) m—-记录数</p>\n<p>大多数 用于分页<br>select * from 表名 limit n;</p>\n<p>数据排序<br>格式: order by 字段名;(查询 语句 结尾)<br>—升序:asc[默认]<br>select * from 表名 order by 字段名;<br>eg:select * from demo1 order by sal asc; 按工资升序排列<br>—降序 :desc<br>select * from 表名 order by 字段名 desc;<br>eg:select * from demo1 order by sal desc; 按工资 降序排列<br>—组合排序<br>select * from demo1 order by sal,name desc;按照第一个字段排序,如果有重复数据则按照第二个字段排序<br>select * from 表名 order by 字段名1 排序类型1,字段名2 排序类型2;</p>\n<p>—别名排序<br>select 字段名1,对字段名2修改 字段名2修改的别名 from 表名 order by 字段名2修改的别名;一般情况是为生成的新字段数据,执行排序操作<br>eg: select name,sal+200 sals from demo1 order by sals;</p>\n<p>索引<br>作用:用于提高数据表查询效率<br>创建索引:<br>自动:由数据库自动完成,通过创建主键约束 ,唯一约束,外键约束会自动建立索引<br>手动:<br> create index i_name on demo1(name);<br>格式:create index 索引名 on 表名(字段…);<br>create index i_us on demo1(url,sal);组合索引</p>\n<p>删除索引<br>drop index 索引名  on 表名;<br>drop index i_us on demo1;</p>\n<p>alter table 表名 drop index 索引名<br>alter table demo1 drop index i_name;</p>\n<p>函数<br>字符串<br>concat(‘a’,’b’);连接ab.一般是select查询<br>数值<br>mod(1,3);1&#x2F;3的余数<br>select ceil(0.8);1 —-ceil向上取整   ceil(-0.8);0<br>select floor(0.8);0 —floor向下取整  floor(-0.8);-1<br>截断<br>select truncate(3.21,2);—3.21<br>select truncate(3.21,1);—3.2<br>当前日期<br>select curdate();<br>当前时间<br>select curtime();<br>当前时间日期<br>select now();<br>一般计算年龄:<br>select dates,year(now())-year(dates)  age from demo1;</p>\n<p>select ifnull(1,2);1<br>select ifnull(数据1,数据 2);如果数据1为null,返回数据2,否则返回数据1</p>\n<p>select nullif(3,2);3<br>select nullif(数据1,数据2);如果数据1和数据2相等,返回null,否则返回数据1</p>\n<p>select name,sal,if(sal,’有值’,’空值’) result from demo1;<br>if(数据1,数据2,数据3);如果数据1 为true,返回数据2,否则返回数据3</p>\n<p>select isnull(sal) from demo1;0表示false.1表示true(是不是空值,如果是空值true,不是空值false)<br>isnull(数据1);判断数据1是否为null,如果为null返回true,否则返回false</p>\n<p>select version();显示数据库当前版本<br>select database();显示当前数据库名<br>select password(‘123’);123字符password加密的方式<br>select md5(‘123’);字符123md5加密的方式</p>\n<p>多行函数(聚合函数)   除 count外 都会 忽略null的值<br>avg():平均值<br>count():统计行数<br>max():求最大值<br>min():求最小值<br>sum():求和<br>select avg(sal),max(sal),min(sal),sum(sal) from demo1;</p>\n<p>where + group by + order by</p>\n<p>数据分组 group by<br>select deptno,avg(sql) from emp group by deptno;从员工 表中依据部门编号分组查询部门编号 —-分组查询</p>\n<p>分组排序<br>select deptno,(ename,)avg(sql) avgs from emp group by deptno order by avgs desc;</p>\n<p>where 和having 的区别<br>where 只能用在表名后<br>having用在group by 后</p>\n<p>分组排序 加条件<br>查询平均工资大于1500的部门<br>select deptno,avg(sql) avgs from emp group by deptno having sal &gt; 1500  order by avgs desc;</p>\n<p>select deptno,sum(sal) sums from emp where sal &gt; 1500 group by deptno; </p>\n<p>select deptno,sum(sal) sums from emp where sal &gt; 1500 group by deptno having sums &gt;3000;</p>\n<p>select deptno,sum(sal) sums from emp where sal &gt; 1500 group by deptno having sums &gt;3000 order by sums;<br>{<br>    DQL:数据库查询语言<br>    主要由SELECT . WHERE,ORDER BY,GROUP BY,和HAVING关键字构成</p>\n<pre><code>DML:数据操作语言\n主要由insert,update,和delete三个关键字完成,对数据库记录修改\n\nDDL:数据定义语言\n主要由create,alter和drop和truncate四个关键字完成\n\nDCL:数据控制语言\n主要由grant和revoke关键字完成\n\nTPL:事务处理语言\n主要由commit,rollback,transaction关键字完成\n</code></pre>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>总结<br>    有关数据库的DDL操作<br>    - SHOW DATABASES;<br>    -CREATE DATABASES 数据库名;<br>    -DROP DATABASES [IF EXISTS]数据库名;<br>    -USE 数据库名;</p>\n<pre><code>有关数据表的DDL操作\n-SHOW TABLES;\n-DESC 表名;\n-CREATE TABLES 表名(......);\n-DROP TABLE 表名;\n-ALTER TABLE  表名;\n\n数据表的列类型\n-数值类型:INT,FLOAT\n-日期类型:DATE,TIME\n-字符串类型:CHAR,VARCHAR,TEXT\n</code></pre>\n<p>一,<br>库操作<br>①show databases;  查询当前用户下所有数据库</p>\n<p>②create database 数据库名;  创建数据库</p>\n<p>③use 数据库名;    打开库(包括切换其他数据库)</p>\n<p>④show tables;     显示当前数据库下所有的数据表</p>\n<p>⑤drop database 数据库名;  删除数据库</p>\n<p>⑥desc 表名;(dos下)      显示表结构</p>\n<p>float(7,2)——-整数部分99999     99999.99</p>\n<p>char(4):  不可变字符串长度3位<br>varchar(4),可变数据长度</p>\n<p>二,<br>表操作<br>①create table 表名(id int);   建表<br> create table demo3(id int,username varchar(20),userpass varchar(20),ctime datetime);</p>\n<p>float(7,2)—- 整数值99999  最大值99999.99</p>\n<p>char(4)<br>abc<br>verchar(4)<br>ab</p>\n<p>②drop table 表名;      删除数据表</p>\n<p>③alter<br>添加字段<br>alter table 表名 add 字段名 数据类型;    [单字段]<br>alter table demo1 add name varchar(20);    </p>\n<p>alter table 表名 add(字段1 数据类型,字段2 数据类型…);    [多字段]<br>alter table demo1 add(dates date,flag int);</p>\n<p>insert into 表名 values(字段1值,,字段2值)</p>\n<p>⑤drop<br>alter table 表名 drop 字段名;    删除字段</p>\n<p>④modify<br>修改字段 (原表中已存在的,不修改列名)<br>alter table 表名 modify 字段名 字段类型;        [单字段]<br>alter table demo1 modify flag char(1);</p>\n<p>alter table 表名 modify 字段名1 字段类型1,modify 字段名2 字段类型2…;        [多字段]<br>alter table demo1 modify flag char(1);</p>\n<p>⑥<br>重命名字段<br>alter table 表名 change 旧字段名 新字段名 字段类型;</p>\n<p>重命名表名<br>alter table 表名 rename 新表名;<br>rename table 表名 to 新表名;</p>\n<p>删除表数据(表截断),保留结构,清除表中所有数据,不清选择性删除,不能回退<br>truncate 表名;       </p>\n<p>三,约束<br>数据库约束概念:在数据表上强制执行的效验规则,保证了数据的完整性<br>(唯一约束,主键约束,外键约束会自动创建索引,非空约束不会,)</p>\n<p>非空约束 :<br>建立数据表字段中使用或者在修改数据表字段中使用 ,      格式: 字段名 字段类名 约束名<br>不等于null :空字符串,0,’null’,null不区分大小写,主键或非空不为null<br>创建,修改<br>create table 表名(字段名 字段类型 not null);     不填可默认为null<br>create table 表名(id int not null);</p>\n<p>alter table 表名 modify 字段名 字段类型 约束名;<br>alter table demo1 modify url text not null;</p>\n<p>alter table 表名 drop 字段名;    删除字段<br>alter table demo drop id;</p>\n<p>唯一约束:<br>建立在not null 前<br>.修改,<br>不出现重复值,允许出现多个NULL,同一张表可有多个唯一约束,可由多列组合而成,会为之建立对应的索引,若不给唯一约束起名.该唯一约束默认与列名相同,<br>alter table 表名 modify 字段名 字段类型 unique;<br>alter table demo modify id int unique;</p>\n<p>alter table 表名 drop 字段名;      删除唯一约束 (必须有多个字段)<br>alter table demo drop id;</p>\n<p>主键约束<br>相当于 非空约束 + 唯一约束   唯一确定一行记录的字段或字段组合<br>注意.一张数据表中只能有一个主键<br>创建<br>create table 表名(字段名1 字段类型1 primary key,字段名2 字段类型2);<br>create table demo5(id int primary key,name varchar(20));</p>\n<p>alter table 表名 drop primary key; 删除主键</p>\n<p>alter table 表名 modify 字段名 字段类型 primary key;<br>alter table demo5 modify id int primary key; 修改主键 [将非主键字段修改为 主键字段]</p>\n<p>create table 表名(字段名1 字段类型1,字段名2 字段类型2,primary key(字段名1,字段名2 ));<br>create table demo6(id int,name varchar(20),primary key(id,name)); 两个字段共用一个主键.复合主键</p>\n<p>create table 表名(主键名 主键类型 primary key auto_increment,字段名2 字段类型2);<br>create table demo6(id int primary key auto_increment,name varchar(20));主键自增,在primary key 后加上auto_increment</p>\n<p>insert into 表名(字段名) values(字段值); [主键自增时增加字段内容]<br>insert into demo6(name) values(‘zs’);</p>\n<p>外键 约束([一对一,可选择任意一方来增加外键列,只要为外键列增加唯一约束就可],[一对多,在多的一端增加外键列])<br>有外键的为从表,没有的为主表,保证两个数据表间的参照关系<br>创建<br>先创建主表<br>create table 主表名(主键名 主键类型 primary key,字段名2 字段类型2);<br>create table dept(deptno int primary key,dname varchar(20));</p>\n<p>再建从表<br>create table 从表名(从表主键名 从表主键类型 primary key,字段名2 字段类型2,主表主键名 主表主键类型,constraint 从表名_fk foreign key(主表主键名) references 主表名(主表主键名));    从表名_fk:自定义的约束名<br>create table emp(empno int primary key,ename varchar(20),sal int,deptno int,constraint emp_fk  foreign key(deptno) references dept (deptno));</p>\n<p>删除外键约束<br>①删除外键<br>alter table 从表名 drop foreign key 约束名;<br>alter table emp drop foreign key emp_fk;emp_fk,约束名</p>\n<p>②删除外键索引<br>alter table 从表名 drop index 约束名;<br>alter table emp drop index emp_fk;</p>\n<p>增加外键<br>alter table 从表名 add foreign key(主表主键) references 主表名(主表主键名);references 参照表及其主键(主表的主键)<br>alter table emp add foreign key(deptno) references dept(deptno);</p>\n<p>检查约束:保证数据的输入校验规则(oracle支持,mysql 不支持)<br>create table 表名(id int check(id in (1,2)));<br>插入数据时只能输入1或2<br>create table 表名(age int check(age&gt;8));<br>插入数据时只能是大于8的数据</p>\n<p>show create table 表名;查询建表结构</p>\n<p>DML语句,数据操作语言<br>插入,修改,删除语句</p>\n<p>插入数据:向新行中写入insert<br>insert into 表名(字段名…) values(值…)  指定插入字段,如果字段名没写,默认值为NULL<br>insert into demo1(id,name,url) values(1,’zs’,’test’);<br>insert into demo1(name,url) values(‘zs’,’test’);</p>\n<p>insert into 表名 values(值…)  默认插入所有字段<br>insert into demo1 values(1,’zs’,’test’);</p>\n<p>插入多条记录(行)<br>insert into 表名 values(值…),(值…);<br>insert into demo1 values(4,’zs’,’test’),(5,’aa’,’test’);</p>\n<p>修改&#x2F;更新数据update<br>update 表名 set 需要修改的字段 &#x3D; 新值;</p>\n<p>[单个修改]<br>[多条记录]update 表名 set 需要修改的字段 &#x3D; 新值;<br>update demo1 set url &#x3D; ‘a’;</p>\n<p>[多个字段值修改]<br>update 表名 set 需修改的字段1 &#x3D; 新值1,需修改的字段2 &#x3D; 新值2;</p>\n<p>[根据条件修改]<br>update 表名 set 需要修改的字段 &#x3D; 新值 where 条件;<br>update demo1 set name &#x3D; ‘test’ where id &#x3D; 4;</p>\n<p>删除delete from<br>[单条删除]<br>delete from 表名 where 条件;<br>delete from demo1 where name &#x3D; ‘zs’;<br>[多条删除]<br>delete from 表名;<br>delete from demo1;</p>\n<p>DQL数据库查询语言<br>查询<br>select 字段列表 from 表名;[查询指定行数据]<br>select name from demo1;<br>select * from 表名;[查询所有行数据]<br>select * from demo1;</p>\n<p>算术运算符:+-*&#x2F;<br>为字段名起别名 格式:字段名 as 别名(使用双引号)<br>select name,sal + 500 as “sals” from demo1;<br>注意:as可以省略,双引号可以省略(在别名中出现空格时不能省略)<br>select name,sal + 500 sals from demo1;</p>\n<p>去重:distinct<br>a,单字段去重<br>select distinct 字段名 from 表名;<br>b,组合字段去重<br>select distinct 字段名1,字段名2… from 表名;</p>\n<p>not &gt; and &gt; or</p>\n<p>limit 取数据记录<br>limit n —–记录数<br>limit n,m n—起始索引  (从0开始) m—-记录数</p>\n<p>大多数 用于分页<br>select * from 表名 limit n;</p>\n<p>数据排序<br>格式: order by 字段名;(查询 语句 结尾)<br>—升序:asc[默认]<br>select * from 表名 order by 字段名;<br>eg:select * from demo1 order by sal asc; 按工资升序排列<br>—降序 :desc<br>select * from 表名 order by 字段名 desc;<br>eg:select * from demo1 order by sal desc; 按工资 降序排列<br>—组合排序<br>select * from demo1 order by sal,name desc;按照第一个字段排序,如果有重复数据则按照第二个字段排序<br>select * from 表名 order by 字段名1 排序类型1,字段名2 排序类型2;</p>\n<p>—别名排序<br>select 字段名1,对字段名2修改 字段名2修改的别名 from 表名 order by 字段名2修改的别名;一般情况是为生成的新字段数据,执行排序操作<br>eg: select name,sal+200 sals from demo1 order by sals;</p>\n<p>索引<br>作用:用于提高数据表查询效率<br>创建索引:<br>自动:由数据库自动完成,通过创建主键约束 ,唯一约束,外键约束会自动建立索引<br>手动:<br> create index i_name on demo1(name);<br>格式:create index 索引名 on 表名(字段…);<br>create index i_us on demo1(url,sal);组合索引</p>\n<p>删除索引<br>drop index 索引名  on 表名;<br>drop index i_us on demo1;</p>\n<p>alter table 表名 drop index 索引名<br>alter table demo1 drop index i_name;</p>\n<p>函数<br>字符串<br>concat(‘a’,’b’);连接ab.一般是select查询<br>数值<br>mod(1,3);1&#x2F;3的余数<br>select ceil(0.8);1 —-ceil向上取整   ceil(-0.8);0<br>select floor(0.8);0 —floor向下取整  floor(-0.8);-1<br>截断<br>select truncate(3.21,2);—3.21<br>select truncate(3.21,1);—3.2<br>当前日期<br>select curdate();<br>当前时间<br>select curtime();<br>当前时间日期<br>select now();<br>一般计算年龄:<br>select dates,year(now())-year(dates)  age from demo1;</p>\n<p>select ifnull(1,2);1<br>select ifnull(数据1,数据 2);如果数据1为null,返回数据2,否则返回数据1</p>\n<p>select nullif(3,2);3<br>select nullif(数据1,数据2);如果数据1和数据2相等,返回null,否则返回数据1</p>\n<p>select name,sal,if(sal,’有值’,’空值’) result from demo1;<br>if(数据1,数据2,数据3);如果数据1 为true,返回数据2,否则返回数据3</p>\n<p>select isnull(sal) from demo1;0表示false.1表示true(是不是空值,如果是空值true,不是空值false)<br>isnull(数据1);判断数据1是否为null,如果为null返回true,否则返回false</p>\n<p>select version();显示数据库当前版本<br>select database();显示当前数据库名<br>select password(‘123’);123字符password加密的方式<br>select md5(‘123’);字符123md5加密的方式</p>\n<p>多行函数(聚合函数)   除 count外 都会 忽略null的值<br>avg():平均值<br>count():统计行数<br>max():求最大值<br>min():求最小值<br>sum():求和<br>select avg(sal),max(sal),min(sal),sum(sal) from demo1;</p>\n<p>where + group by + order by</p>\n<p>数据分组 group by<br>select deptno,avg(sql) from emp group by deptno;从员工 表中依据部门编号分组查询部门编号 —-分组查询</p>\n<p>分组排序<br>select deptno,(ename,)avg(sql) avgs from emp group by deptno order by avgs desc;</p>\n<p>where 和having 的区别<br>where 只能用在表名后<br>having用在group by 后</p>\n<p>分组排序 加条件<br>查询平均工资大于1500的部门<br>select deptno,avg(sql) avgs from emp group by deptno having sal &gt; 1500  order by avgs desc;</p>\n<p>select deptno,sum(sal) sums from emp where sal &gt; 1500 group by deptno; </p>\n<p>select deptno,sum(sal) sums from emp where sal &gt; 1500 group by deptno having sums &gt;3000;</p>\n<p>select deptno,sum(sal) sums from emp where sal &gt; 1500 group by deptno having sums &gt;3000 order by sums;<br>{<br>    DQL:数据库查询语言<br>    主要由SELECT . WHERE,ORDER BY,GROUP BY,和HAVING关键字构成</p>\n<pre><code>DML:数据操作语言\n主要由insert,update,和delete三个关键字完成,对数据库记录修改\n\nDDL:数据定义语言\n主要由create,alter和drop和truncate四个关键字完成\n\nDCL:数据控制语言\n主要由grant和revoke关键字完成\n\nTPL:事务处理语言\n主要由commit,rollback,transaction关键字完成\n</code></pre>\n<p>}</p>\n"},{"title":"mysql面试题","comments":1,"copyright":true,"abbrlink":"c45230cb","date":"2022-08-29T12:17:10.000Z","_content":"\n1, mysql索引的详细说明\n\n普通索引:最基本的索引,没有任何限制\n\n唯一索引:索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一\n\n主键索引:一个表只有一个主键,不允许有空值,一般在建表的同时建立主键索引,\n\n组合索引:指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用,使用组合索引时遵循最左前缀集合\n\n全文索引:主要是用来查找文本中的关键字,而不是直接与索引中的值相比较\n\n2,创建数据库的四大原则?\n\n答:原子性,一致性,隔离性,持久性.\n\n3，优化数据库?\n答:\n①选取合适的字段属性\n②使用连接代替子查询\n③使用联合来代替手动创建的临时表\n④使用事物\n⑤使用锁定表\n优化数据库\n\n4,orm数据库?\norm数据库:称为对象--关系映射,主要实现模型对象到关系数据库数据的映射,把数据表中的每一条记录映射为一个模型对象,\n\n5.mysql和mongo的区别?\n数据库模型:\nmysql为关系型数据库,\nMongodb为非关系型数据库,\n存储方式:\nmysql:不同的引擎有不同的存储方式\nmongodb:虚拟内存+持久化\n查询方式:\nmysql:传统sql语句\nmongodb:独特的mongodb查询方式\n\n6,数据表student有id,name,score,city字段,其中name中的名字可有重复,需消除重复行,请写sql语句\n答:select distinct name from student;\n\n7,数据库优化查询方法\n答:外键,索引,联合查询,选择特定字段等等\n\n8,写5条常用sql语句\n答:show databases;\nshow tables;\ndesc tb_name;\nselect * from tb_name\ndelete from tb_name where id = 5;\nupdate tb_name set name='xue',age=23 where id = 5;\n\n9,简述mysql和redis区别\n答:redis:内存型非关系数据库,数据保存在内存中,速度快\nmysql:关系型数据库,数据保存在磁盘中,速度相对慢\n\n10,列出常见mysql数据存储引擎\nInnoDB:支持事物处理,支持外键,支持崩溃修复能力和并发控制.\nMyISAM:插入数据快,空间和内存使用比较低,\nMEMORY:所有数据都在内存中,数据的处理速度快.但是安全性不高\n\n11,Mysql数据库的隔离级别\n①Read Uncommitted(读取末提交内容)\n在该隔离级别,所有事物都可以看到其他末提交事物的执行结果,本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。\n②Read Committed（读取提交内容）\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n③Repeatable Read（可重读）\n这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（PhantomRead）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n④Serializable（可串行化）\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n","source":"_posts/mysql面试题.md","raw":"---\ntitle: mysql面试题\ncomments: true\ncopyright: true\ntags:\n  - mysql\n  - 面试题\ncategories:\n  - mysql\nabbrlink: c45230cb\ndate: 2022-08-29 20:17:10\n---\n\n1, mysql索引的详细说明\n\n普通索引:最基本的索引,没有任何限制\n\n唯一索引:索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一\n\n主键索引:一个表只有一个主键,不允许有空值,一般在建表的同时建立主键索引,\n\n组合索引:指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用,使用组合索引时遵循最左前缀集合\n\n全文索引:主要是用来查找文本中的关键字,而不是直接与索引中的值相比较\n\n2,创建数据库的四大原则?\n\n答:原子性,一致性,隔离性,持久性.\n\n3，优化数据库?\n答:\n①选取合适的字段属性\n②使用连接代替子查询\n③使用联合来代替手动创建的临时表\n④使用事物\n⑤使用锁定表\n优化数据库\n\n4,orm数据库?\norm数据库:称为对象--关系映射,主要实现模型对象到关系数据库数据的映射,把数据表中的每一条记录映射为一个模型对象,\n\n5.mysql和mongo的区别?\n数据库模型:\nmysql为关系型数据库,\nMongodb为非关系型数据库,\n存储方式:\nmysql:不同的引擎有不同的存储方式\nmongodb:虚拟内存+持久化\n查询方式:\nmysql:传统sql语句\nmongodb:独特的mongodb查询方式\n\n6,数据表student有id,name,score,city字段,其中name中的名字可有重复,需消除重复行,请写sql语句\n答:select distinct name from student;\n\n7,数据库优化查询方法\n答:外键,索引,联合查询,选择特定字段等等\n\n8,写5条常用sql语句\n答:show databases;\nshow tables;\ndesc tb_name;\nselect * from tb_name\ndelete from tb_name where id = 5;\nupdate tb_name set name='xue',age=23 where id = 5;\n\n9,简述mysql和redis区别\n答:redis:内存型非关系数据库,数据保存在内存中,速度快\nmysql:关系型数据库,数据保存在磁盘中,速度相对慢\n\n10,列出常见mysql数据存储引擎\nInnoDB:支持事物处理,支持外键,支持崩溃修复能力和并发控制.\nMyISAM:插入数据快,空间和内存使用比较低,\nMEMORY:所有数据都在内存中,数据的处理速度快.但是安全性不高\n\n11,Mysql数据库的隔离级别\n①Read Uncommitted(读取末提交内容)\n在该隔离级别,所有事物都可以看到其他末提交事物的执行结果,本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。\n②Read Committed（读取提交内容）\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n③Repeatable Read（可重读）\n这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（PhantomRead）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n④Serializable（可串行化）\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n","slug":"mysql面试题","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpw000l81nvfsindweh","content":"<p>1, mysql索引的详细说明</p>\n<p>普通索引:最基本的索引,没有任何限制</p>\n<p>唯一索引:索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一</p>\n<p>主键索引:一个表只有一个主键,不允许有空值,一般在建表的同时建立主键索引,</p>\n<p>组合索引:指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用,使用组合索引时遵循最左前缀集合</p>\n<p>全文索引:主要是用来查找文本中的关键字,而不是直接与索引中的值相比较</p>\n<p>2,创建数据库的四大原则?</p>\n<p>答:原子性,一致性,隔离性,持久性.</p>\n<p>3，优化数据库?<br>答:<br>①选取合适的字段属性<br>②使用连接代替子查询<br>③使用联合来代替手动创建的临时表<br>④使用事物<br>⑤使用锁定表<br>优化数据库</p>\n<p>4,orm数据库?<br>orm数据库:称为对象–关系映射,主要实现模型对象到关系数据库数据的映射,把数据表中的每一条记录映射为一个模型对象,</p>\n<p>5.mysql和mongo的区别?<br>数据库模型:<br>mysql为关系型数据库,<br>Mongodb为非关系型数据库,<br>存储方式:<br>mysql:不同的引擎有不同的存储方式<br>mongodb:虚拟内存+持久化<br>查询方式:<br>mysql:传统sql语句<br>mongodb:独特的mongodb查询方式</p>\n<p>6,数据表student有id,name,score,city字段,其中name中的名字可有重复,需消除重复行,请写sql语句<br>答:select distinct name from student;</p>\n<p>7,数据库优化查询方法<br>答:外键,索引,联合查询,选择特定字段等等</p>\n<p>8,写5条常用sql语句<br>答:show databases;<br>show tables;<br>desc tb_name;<br>select * from tb_name<br>delete from tb_name where id &#x3D; 5;<br>update tb_name set name&#x3D;’xue’,age&#x3D;23 where id &#x3D; 5;</p>\n<p>9,简述mysql和redis区别<br>答:redis:内存型非关系数据库,数据保存在内存中,速度快<br>mysql:关系型数据库,数据保存在磁盘中,速度相对慢</p>\n<p>10,列出常见mysql数据存储引擎<br>InnoDB:支持事物处理,支持外键,支持崩溃修复能力和并发控制.<br>MyISAM:插入数据快,空间和内存使用比较低,<br>MEMORY:所有数据都在内存中,数据的处理速度快.但是安全性不高</p>\n<p>11,Mysql数据库的隔离级别<br>①Read Uncommitted(读取末提交内容)<br>在该隔离级别,所有事物都可以看到其他末提交事物的执行结果,本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。<br>②Read Committed（读取提交内容）<br>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。<br>③Repeatable Read（可重读）<br>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（PhantomRead）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。<br>④Serializable（可串行化）<br>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1, mysql索引的详细说明</p>\n<p>普通索引:最基本的索引,没有任何限制</p>\n<p>唯一索引:索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一</p>\n<p>主键索引:一个表只有一个主键,不允许有空值,一般在建表的同时建立主键索引,</p>\n<p>组合索引:指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用,使用组合索引时遵循最左前缀集合</p>\n<p>全文索引:主要是用来查找文本中的关键字,而不是直接与索引中的值相比较</p>\n<p>2,创建数据库的四大原则?</p>\n<p>答:原子性,一致性,隔离性,持久性.</p>\n<p>3，优化数据库?<br>答:<br>①选取合适的字段属性<br>②使用连接代替子查询<br>③使用联合来代替手动创建的临时表<br>④使用事物<br>⑤使用锁定表<br>优化数据库</p>\n<p>4,orm数据库?<br>orm数据库:称为对象–关系映射,主要实现模型对象到关系数据库数据的映射,把数据表中的每一条记录映射为一个模型对象,</p>\n<p>5.mysql和mongo的区别?<br>数据库模型:<br>mysql为关系型数据库,<br>Mongodb为非关系型数据库,<br>存储方式:<br>mysql:不同的引擎有不同的存储方式<br>mongodb:虚拟内存+持久化<br>查询方式:<br>mysql:传统sql语句<br>mongodb:独特的mongodb查询方式</p>\n<p>6,数据表student有id,name,score,city字段,其中name中的名字可有重复,需消除重复行,请写sql语句<br>答:select distinct name from student;</p>\n<p>7,数据库优化查询方法<br>答:外键,索引,联合查询,选择特定字段等等</p>\n<p>8,写5条常用sql语句<br>答:show databases;<br>show tables;<br>desc tb_name;<br>select * from tb_name<br>delete from tb_name where id &#x3D; 5;<br>update tb_name set name&#x3D;’xue’,age&#x3D;23 where id &#x3D; 5;</p>\n<p>9,简述mysql和redis区别<br>答:redis:内存型非关系数据库,数据保存在内存中,速度快<br>mysql:关系型数据库,数据保存在磁盘中,速度相对慢</p>\n<p>10,列出常见mysql数据存储引擎<br>InnoDB:支持事物处理,支持外键,支持崩溃修复能力和并发控制.<br>MyISAM:插入数据快,空间和内存使用比较低,<br>MEMORY:所有数据都在内存中,数据的处理速度快.但是安全性不高</p>\n<p>11,Mysql数据库的隔离级别<br>①Read Uncommitted(读取末提交内容)<br>在该隔离级别,所有事物都可以看到其他末提交事物的执行结果,本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。<br>②Read Committed（读取提交内容）<br>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。<br>③Repeatable Read（可重读）<br>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（PhantomRead）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。<br>④Serializable（可串行化）<br>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n"},{"title":"linux常用命令","comments":1,"copyright":true,"abbrlink":"fe4ef317","date":"2022-08-29T12:11:51.000Z","_content":"\n1, 安装deb\n\ndpkg -i 文件名\n\n2, window与liunx的shell脚本编码问题\n修改编码:\nvim 文件名\nesc :\nset ff=unix\nesc : wq\n\n查看编码\nesc :\nset ff\n\n3, 解决vmware tools失效\nsudo apt-get autoremove open-vm-tools\t//卸载已有的工具\nsudo apt-get install open-vm-tools\t\t//安装工具open-vm-tools\nsudo apt-get install open-vm-tools-desktop  //安装open-vm-tools-desktop\n重启: init 0/reboot\n\n4, 查看进程：ps -ef | grep 文件名\n杀死进程：kill -9 id\n\n5, shell文件运行命令\nchmod +x ./auto_download.sh && ./auto_download.sh\n\n6,定时器\ncat /etc/crontab\n\n\n\nUbuntu:\n1, 安装防火墙\nsudo su\napt-get install firewalld\n查看状态\nsystemctl status firewalld\n2,乌班图源的处理:\n[pip源和软件源处理](https://blog.csdn.net/wssywh/article/details/79216437)\n3,安装deb文件\ndpkg -i xxx.deb\n3,定时任务\n待测: cat /etc/corntab\n①先创建py文件\n②在py文件下输入crontab -e\n③设置执行时间间隔\n![文件内容](https://img-blog.csdnimg.cn/d8720c2d022a485985c260796741466e.jpeg)\n![常见的时间设置](https://img-blog.csdnimg.cn/f874919abf8145c88291ce275a54b608.jpeg)\n4,端口/进程查看\n查看端口是否占用\nlsof -i:22\nnetstat -tunlp|grep 22\n查看进程\nps aux|grep API.py\n杀死进程\nkill -9 \n5,实时查看日志\ntail -f demo.log\n\n查看后200行日志内容\n\ntail -f -n 200 demo.log \n6,服务器启动\nnohup python3 /opt/moss_robot/lib/dispatch_v5.3.2/robot_wait.py >/dev/null 2>&1 &\n7,shell脚本运行\nchmod +x ./start.sh && ./start.sh\n","source":"_posts/linux常用命令.md","raw":"---\ntitle: linux常用命令\ncomments: true\ncopyright: true\ntags:\n  - linux\ncategories:\n  - linux\nabbrlink: fe4ef317\ndate: 2022-08-29 20:11:51\n---\n\n1, 安装deb\n\ndpkg -i 文件名\n\n2, window与liunx的shell脚本编码问题\n修改编码:\nvim 文件名\nesc :\nset ff=unix\nesc : wq\n\n查看编码\nesc :\nset ff\n\n3, 解决vmware tools失效\nsudo apt-get autoremove open-vm-tools\t//卸载已有的工具\nsudo apt-get install open-vm-tools\t\t//安装工具open-vm-tools\nsudo apt-get install open-vm-tools-desktop  //安装open-vm-tools-desktop\n重启: init 0/reboot\n\n4, 查看进程：ps -ef | grep 文件名\n杀死进程：kill -9 id\n\n5, shell文件运行命令\nchmod +x ./auto_download.sh && ./auto_download.sh\n\n6,定时器\ncat /etc/crontab\n\n\n\nUbuntu:\n1, 安装防火墙\nsudo su\napt-get install firewalld\n查看状态\nsystemctl status firewalld\n2,乌班图源的处理:\n[pip源和软件源处理](https://blog.csdn.net/wssywh/article/details/79216437)\n3,安装deb文件\ndpkg -i xxx.deb\n3,定时任务\n待测: cat /etc/corntab\n①先创建py文件\n②在py文件下输入crontab -e\n③设置执行时间间隔\n![文件内容](https://img-blog.csdnimg.cn/d8720c2d022a485985c260796741466e.jpeg)\n![常见的时间设置](https://img-blog.csdnimg.cn/f874919abf8145c88291ce275a54b608.jpeg)\n4,端口/进程查看\n查看端口是否占用\nlsof -i:22\nnetstat -tunlp|grep 22\n查看进程\nps aux|grep API.py\n杀死进程\nkill -9 \n5,实时查看日志\ntail -f demo.log\n\n查看后200行日志内容\n\ntail -f -n 200 demo.log \n6,服务器启动\nnohup python3 /opt/moss_robot/lib/dispatch_v5.3.2/robot_wait.py >/dev/null 2>&1 &\n7,shell脚本运行\nchmod +x ./start.sh && ./start.sh\n","slug":"linux常用命令","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpw000n81nvcwit2z0a","content":"<p>1, 安装deb</p>\n<p>dpkg -i 文件名</p>\n<p>2, window与liunx的shell脚本编码问题<br>修改编码:<br>vim 文件名<br>esc :<br>set ff&#x3D;unix<br>esc : wq</p>\n<p>查看编码<br>esc :<br>set ff</p>\n<p>3, 解决vmware tools失效<br>sudo apt-get autoremove open-vm-tools    &#x2F;&#x2F;卸载已有的工具<br>sudo apt-get install open-vm-tools        &#x2F;&#x2F;安装工具open-vm-tools<br>sudo apt-get install open-vm-tools-desktop  &#x2F;&#x2F;安装open-vm-tools-desktop<br>重启: init 0&#x2F;reboot</p>\n<p>4, 查看进程：ps -ef | grep 文件名<br>杀死进程：kill -9 id</p>\n<p>5, shell文件运行命令<br>chmod +x .&#x2F;auto_download.sh &amp;&amp; .&#x2F;auto_download.sh</p>\n<p>6,定时器<br>cat &#x2F;etc&#x2F;crontab</p>\n<p>Ubuntu:<br>1, 安装防火墙<br>sudo su<br>apt-get install firewalld<br>查看状态<br>systemctl status firewalld<br>2,乌班图源的处理:<br><a href=\"https://blog.csdn.net/wssywh/article/details/79216437\">pip源和软件源处理</a><br>3,安装deb文件<br>dpkg -i xxx.deb<br>3,定时任务<br>待测: cat &#x2F;etc&#x2F;corntab<br>①先创建py文件<br>②在py文件下输入crontab -e<br>③设置执行时间间隔<br><img src=\"https://img-blog.csdnimg.cn/d8720c2d022a485985c260796741466e.jpeg\" alt=\"文件内容\"><br><img src=\"https://img-blog.csdnimg.cn/f874919abf8145c88291ce275a54b608.jpeg\" alt=\"常见的时间设置\"><br>4,端口&#x2F;进程查看<br>查看端口是否占用<br>lsof -i:22<br>netstat -tunlp|grep 22<br>查看进程<br>ps aux|grep API.py<br>杀死进程<br>kill -9<br>5,实时查看日志<br>tail -f demo.log</p>\n<p>查看后200行日志内容</p>\n<p>tail -f -n 200 demo.log<br>6,服务器启动<br>nohup python3 &#x2F;opt&#x2F;moss_robot&#x2F;lib&#x2F;dispatch_v5.3.2&#x2F;robot_wait.py &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>7,shell脚本运行<br>chmod +x .&#x2F;start.sh &amp;&amp; .&#x2F;start.sh</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1, 安装deb</p>\n<p>dpkg -i 文件名</p>\n<p>2, window与liunx的shell脚本编码问题<br>修改编码:<br>vim 文件名<br>esc :<br>set ff&#x3D;unix<br>esc : wq</p>\n<p>查看编码<br>esc :<br>set ff</p>\n<p>3, 解决vmware tools失效<br>sudo apt-get autoremove open-vm-tools    &#x2F;&#x2F;卸载已有的工具<br>sudo apt-get install open-vm-tools        &#x2F;&#x2F;安装工具open-vm-tools<br>sudo apt-get install open-vm-tools-desktop  &#x2F;&#x2F;安装open-vm-tools-desktop<br>重启: init 0&#x2F;reboot</p>\n<p>4, 查看进程：ps -ef | grep 文件名<br>杀死进程：kill -9 id</p>\n<p>5, shell文件运行命令<br>chmod +x .&#x2F;auto_download.sh &amp;&amp; .&#x2F;auto_download.sh</p>\n<p>6,定时器<br>cat &#x2F;etc&#x2F;crontab</p>\n<p>Ubuntu:<br>1, 安装防火墙<br>sudo su<br>apt-get install firewalld<br>查看状态<br>systemctl status firewalld<br>2,乌班图源的处理:<br><a href=\"https://blog.csdn.net/wssywh/article/details/79216437\">pip源和软件源处理</a><br>3,安装deb文件<br>dpkg -i xxx.deb<br>3,定时任务<br>待测: cat &#x2F;etc&#x2F;corntab<br>①先创建py文件<br>②在py文件下输入crontab -e<br>③设置执行时间间隔<br><img src=\"https://img-blog.csdnimg.cn/d8720c2d022a485985c260796741466e.jpeg\" alt=\"文件内容\"><br><img src=\"https://img-blog.csdnimg.cn/f874919abf8145c88291ce275a54b608.jpeg\" alt=\"常见的时间设置\"><br>4,端口&#x2F;进程查看<br>查看端口是否占用<br>lsof -i:22<br>netstat -tunlp|grep 22<br>查看进程<br>ps aux|grep API.py<br>杀死进程<br>kill -9<br>5,实时查看日志<br>tail -f demo.log</p>\n<p>查看后200行日志内容</p>\n<p>tail -f -n 200 demo.log<br>6,服务器启动<br>nohup python3 &#x2F;opt&#x2F;moss_robot&#x2F;lib&#x2F;dispatch_v5.3.2&#x2F;robot_wait.py &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>7,shell脚本运行<br>chmod +x .&#x2F;start.sh &amp;&amp; .&#x2F;start.sh</p>\n"},{"title":"hexo基本使用","comments":1,"copyright":true,"abbrlink":"d4fee3ae","date":"2022-08-29T12:06:33.000Z","_content":"\n1, [下载nodejs](https://nodejs.org/en/download/)\n\n2,  下载淘宝镜像\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n3, 下载hexo\n\ncnpm install -g hexo-cli\n\n4, 建立文件夹,生成博客\n\nmkdir blog\n\ncd blog \n\nhexo init\n\n下载next主题: \n\ngit clone https://github.com/litten/hexo-theme-next.git themes/next\n\n在github上建立仓库: \n\ngithub名.github.io\n\n安装git相关模块\nnpm install --save hexo-deployer-git\n\nhexo clean && hexo g && hexo d/hexo clean && hexo g && hexo s\n\n\n\n","source":"_posts/hexo基本使用.md","raw":"---\ntitle: hexo基本使用\ncomments: true\ncopyright: true\ntags:\n  - blog\n  - hexo\ncategories:\n  - hexo\nabbrlink: d4fee3ae\ndate: 2022-08-29 20:06:33\n---\n\n1, [下载nodejs](https://nodejs.org/en/download/)\n\n2,  下载淘宝镜像\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n3, 下载hexo\n\ncnpm install -g hexo-cli\n\n4, 建立文件夹,生成博客\n\nmkdir blog\n\ncd blog \n\nhexo init\n\n下载next主题: \n\ngit clone https://github.com/litten/hexo-theme-next.git themes/next\n\n在github上建立仓库: \n\ngithub名.github.io\n\n安装git相关模块\nnpm install --save hexo-deployer-git\n\nhexo clean && hexo g && hexo d/hexo clean && hexo g && hexo s\n\n\n\n","slug":"hexo基本使用","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpx000r81nv7arg1d46","content":"<p>1, <a href=\"https://nodejs.org/en/download/\">下载nodejs</a></p>\n<p>2,  下载淘宝镜像</p>\n<p>npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n<p>3, 下载hexo</p>\n<p>cnpm install -g hexo-cli</p>\n<p>4, 建立文件夹,生成博客</p>\n<p>mkdir blog</p>\n<p>cd blog </p>\n<p>hexo init</p>\n<p>下载next主题: </p>\n<p>git clone <a href=\"https://github.com/litten/hexo-theme-next.git\">https://github.com/litten/hexo-theme-next.git</a> themes&#x2F;next</p>\n<p>在github上建立仓库: </p>\n<p>github名.github.io</p>\n<p>安装git相关模块<br>npm install –save hexo-deployer-git</p>\n<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#x2F;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1, <a href=\"https://nodejs.org/en/download/\">下载nodejs</a></p>\n<p>2,  下载淘宝镜像</p>\n<p>npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n<p>3, 下载hexo</p>\n<p>cnpm install -g hexo-cli</p>\n<p>4, 建立文件夹,生成博客</p>\n<p>mkdir blog</p>\n<p>cd blog </p>\n<p>hexo init</p>\n<p>下载next主题: </p>\n<p>git clone <a href=\"https://github.com/litten/hexo-theme-next.git\">https://github.com/litten/hexo-theme-next.git</a> themes&#x2F;next</p>\n<p>在github上建立仓库: </p>\n<p>github名.github.io</p>\n<p>安装git相关模块<br>npm install –save hexo-deployer-git</p>\n<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#x2F;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p>\n"},{"title":"o基础也能学会的人工智能笔记整理","comments":1,"copyright":true,"abbrlink":"2a662cad","date":"2022-08-29T12:25:50.000Z","_content":"\n1,机器学习\n用大量数据进行训练，获取到 一个数据模型，预测就是应用训练的模型，来解决一个未知的问题\n\n2,knn实现流程\n收集相关的数据\n选择合适的feature和label\n如果不知道如何选择feature可以先单独每个feature计算与label的相关度\n选取合适的k\n使用数据集进行新的预测\n\n3,分类和回归的区别(classification和regression)\n回归是求topk的value求平均值\n分类是求topk中出现最多的 类别\n\n4,标准化和归一化的选择\n知道数据范围用归一化\n不知道数据范围,数据变化可能很大,用标准化\n\n5,数据归一化\n压缩样本数据到0~1之间,让向量之间的欧式距离变为标准欧式距离\n\n6,线性回归和knn的区别\nknn必须需要有全套数据集，每次预测都要重新计算整套数据集 \n线性回归，数据集用完后，其实可以丢弃。 线性回归是算一个\n模型。\nknn可以理解成是数学统计学的方法研究问题 \n线性回归，是一种总结规律，总结模型的解决问题的方法。\n\n7,线性回归就是求线性函数的参数的值的过程\n\n8,梯度下降算法原理\n随机选取m和b\n分别对mse 求m和b的偏导\n如果m和b的偏导都很小(接近0),就成功\n根据学习速率计算出修改的值\nb和m 分别减去要修改的值\n\n9,线性回归和逻辑回归的区别\n线性回归:预测的数据是连续的\n逻辑回归:预测的是分类的问题\n\n10,人脸识别操作\n安装百度api\npip install -U baidu-api\n\n\n11,knn算法\n调参:k\nk一般取值总个数开平方\n训练集的数据训练k.训练出的结果用测试集测试准确率\n\n机器学习开发流程\n1)获取数据\n2)数据处理\n3)特征工程\n4)机器学习算法训练 - 模型\n5)模型评估\n6)应用\n    \n\n1,feature:变量  ---- label:结果\n变量和结果一一对应\n2,np.array():表示数组\n3,abs:绝对值\n4,predicePoint:预测点--->针对knn:k近邻\n5,np.argsort():返回元素排序的下标位置\nnp.argsort(针对索引排序)\nlabel ---> sortlabel\n6,\nnp.sum:+  \nnp.squart:平方\nnp.sqrt:开平方跟\nnp.loadtxt:读取文件:    \n属性\ndelimiter = \",\" :分隔符\",\"\nskiprows = 1    :空除第一行\nusecols = (17,13,2):使用第17,13,2列\nnp.mean:平均值\nnp.stu:标准差\n#显示完整的所有数据\nnp.set_printoptions(threshold=np.inf)\n","source":"_posts/o基础也能学会的人工智能笔记整理.md","raw":"---\ntitle: o基础也能学会的人工智能笔记整理\ncomments: true\ncopyright: true\ntags:\n  - AI\ncategories:\n  - 数据处理\nabbrlink: 2a662cad\ndate: 2022-08-29 20:25:50\n---\n\n1,机器学习\n用大量数据进行训练，获取到 一个数据模型，预测就是应用训练的模型，来解决一个未知的问题\n\n2,knn实现流程\n收集相关的数据\n选择合适的feature和label\n如果不知道如何选择feature可以先单独每个feature计算与label的相关度\n选取合适的k\n使用数据集进行新的预测\n\n3,分类和回归的区别(classification和regression)\n回归是求topk的value求平均值\n分类是求topk中出现最多的 类别\n\n4,标准化和归一化的选择\n知道数据范围用归一化\n不知道数据范围,数据变化可能很大,用标准化\n\n5,数据归一化\n压缩样本数据到0~1之间,让向量之间的欧式距离变为标准欧式距离\n\n6,线性回归和knn的区别\nknn必须需要有全套数据集，每次预测都要重新计算整套数据集 \n线性回归，数据集用完后，其实可以丢弃。 线性回归是算一个\n模型。\nknn可以理解成是数学统计学的方法研究问题 \n线性回归，是一种总结规律，总结模型的解决问题的方法。\n\n7,线性回归就是求线性函数的参数的值的过程\n\n8,梯度下降算法原理\n随机选取m和b\n分别对mse 求m和b的偏导\n如果m和b的偏导都很小(接近0),就成功\n根据学习速率计算出修改的值\nb和m 分别减去要修改的值\n\n9,线性回归和逻辑回归的区别\n线性回归:预测的数据是连续的\n逻辑回归:预测的是分类的问题\n\n10,人脸识别操作\n安装百度api\npip install -U baidu-api\n\n\n11,knn算法\n调参:k\nk一般取值总个数开平方\n训练集的数据训练k.训练出的结果用测试集测试准确率\n\n机器学习开发流程\n1)获取数据\n2)数据处理\n3)特征工程\n4)机器学习算法训练 - 模型\n5)模型评估\n6)应用\n    \n\n1,feature:变量  ---- label:结果\n变量和结果一一对应\n2,np.array():表示数组\n3,abs:绝对值\n4,predicePoint:预测点--->针对knn:k近邻\n5,np.argsort():返回元素排序的下标位置\nnp.argsort(针对索引排序)\nlabel ---> sortlabel\n6,\nnp.sum:+  \nnp.squart:平方\nnp.sqrt:开平方跟\nnp.loadtxt:读取文件:    \n属性\ndelimiter = \",\" :分隔符\",\"\nskiprows = 1    :空除第一行\nusecols = (17,13,2):使用第17,13,2列\nnp.mean:平均值\nnp.stu:标准差\n#显示完整的所有数据\nnp.set_printoptions(threshold=np.inf)\n","slug":"o基础也能学会的人工智能笔记整理","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpx000s81nvf60c6hv8","content":"<p>1,机器学习<br>用大量数据进行训练，获取到 一个数据模型，预测就是应用训练的模型，来解决一个未知的问题</p>\n<p>2,knn实现流程<br>收集相关的数据<br>选择合适的feature和label<br>如果不知道如何选择feature可以先单独每个feature计算与label的相关度<br>选取合适的k<br>使用数据集进行新的预测</p>\n<p>3,分类和回归的区别(classification和regression)<br>回归是求topk的value求平均值<br>分类是求topk中出现最多的 类别</p>\n<p>4,标准化和归一化的选择<br>知道数据范围用归一化<br>不知道数据范围,数据变化可能很大,用标准化</p>\n<p>5,数据归一化<br>压缩样本数据到0~1之间,让向量之间的欧式距离变为标准欧式距离</p>\n<p>6,线性回归和knn的区别<br>knn必须需要有全套数据集，每次预测都要重新计算整套数据集<br>线性回归，数据集用完后，其实可以丢弃。 线性回归是算一个<br>模型。<br>knn可以理解成是数学统计学的方法研究问题<br>线性回归，是一种总结规律，总结模型的解决问题的方法。</p>\n<p>7,线性回归就是求线性函数的参数的值的过程</p>\n<p>8,梯度下降算法原理<br>随机选取m和b<br>分别对mse 求m和b的偏导<br>如果m和b的偏导都很小(接近0),就成功<br>根据学习速率计算出修改的值<br>b和m 分别减去要修改的值</p>\n<p>9,线性回归和逻辑回归的区别<br>线性回归:预测的数据是连续的<br>逻辑回归:预测的是分类的问题</p>\n<p>10,人脸识别操作<br>安装百度api<br>pip install -U baidu-api</p>\n<p>11,knn算法<br>调参:k<br>k一般取值总个数开平方<br>训练集的数据训练k.训练出的结果用测试集测试准确率</p>\n<p>机器学习开发流程<br>1)获取数据<br>2)数据处理<br>3)特征工程<br>4)机器学习算法训练 - 模型<br>5)模型评估<br>6)应用</p>\n<p>1,feature:变量  —- label:结果<br>变量和结果一一对应<br>2,np.array():表示数组<br>3,abs:绝对值<br>4,predicePoint:预测点—&gt;针对knn:k近邻<br>5,np.argsort():返回元素排序的下标位置<br>np.argsort(针对索引排序)<br>label —&gt; sortlabel<br>6,<br>np.sum:+<br>np.squart:平方<br>np.sqrt:开平方跟<br>np.loadtxt:读取文件:<br>属性<br>delimiter &#x3D; “,” :分隔符”,”<br>skiprows &#x3D; 1    :空除第一行<br>usecols &#x3D; (17,13,2):使用第17,13,2列<br>np.mean:平均值<br>np.stu:标准差<br>#显示完整的所有数据<br>np.set_printoptions(threshold&#x3D;np.inf)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,机器学习<br>用大量数据进行训练，获取到 一个数据模型，预测就是应用训练的模型，来解决一个未知的问题</p>\n<p>2,knn实现流程<br>收集相关的数据<br>选择合适的feature和label<br>如果不知道如何选择feature可以先单独每个feature计算与label的相关度<br>选取合适的k<br>使用数据集进行新的预测</p>\n<p>3,分类和回归的区别(classification和regression)<br>回归是求topk的value求平均值<br>分类是求topk中出现最多的 类别</p>\n<p>4,标准化和归一化的选择<br>知道数据范围用归一化<br>不知道数据范围,数据变化可能很大,用标准化</p>\n<p>5,数据归一化<br>压缩样本数据到0~1之间,让向量之间的欧式距离变为标准欧式距离</p>\n<p>6,线性回归和knn的区别<br>knn必须需要有全套数据集，每次预测都要重新计算整套数据集<br>线性回归，数据集用完后，其实可以丢弃。 线性回归是算一个<br>模型。<br>knn可以理解成是数学统计学的方法研究问题<br>线性回归，是一种总结规律，总结模型的解决问题的方法。</p>\n<p>7,线性回归就是求线性函数的参数的值的过程</p>\n<p>8,梯度下降算法原理<br>随机选取m和b<br>分别对mse 求m和b的偏导<br>如果m和b的偏导都很小(接近0),就成功<br>根据学习速率计算出修改的值<br>b和m 分别减去要修改的值</p>\n<p>9,线性回归和逻辑回归的区别<br>线性回归:预测的数据是连续的<br>逻辑回归:预测的是分类的问题</p>\n<p>10,人脸识别操作<br>安装百度api<br>pip install -U baidu-api</p>\n<p>11,knn算法<br>调参:k<br>k一般取值总个数开平方<br>训练集的数据训练k.训练出的结果用测试集测试准确率</p>\n<p>机器学习开发流程<br>1)获取数据<br>2)数据处理<br>3)特征工程<br>4)机器学习算法训练 - 模型<br>5)模型评估<br>6)应用</p>\n<p>1,feature:变量  —- label:结果<br>变量和结果一一对应<br>2,np.array():表示数组<br>3,abs:绝对值<br>4,predicePoint:预测点—&gt;针对knn:k近邻<br>5,np.argsort():返回元素排序的下标位置<br>np.argsort(针对索引排序)<br>label —&gt; sortlabel<br>6,<br>np.sum:+<br>np.squart:平方<br>np.sqrt:开平方跟<br>np.loadtxt:读取文件:<br>属性<br>delimiter &#x3D; “,” :分隔符”,”<br>skiprows &#x3D; 1    :空除第一行<br>usecols &#x3D; (17,13,2):使用第17,13,2列<br>np.mean:平均值<br>np.stu:标准差<br>#显示完整的所有数据<br>np.set_printoptions(threshold&#x3D;np.inf)</p>\n"},{"title":"python关键字整理","comments":1,"copyright":true,"abbrlink":"4321eec9","date":"2022-08-29T11:49:42.000Z","_content":"\n一,各个关键字代表的含义\n\nabs():取元素绝对值\nnp.array():表示数组\nnp.argsort():返回元素排序的下标位置(针对索引)\nnp.sum():求和(针对数组)\nnp.sqrt():开平方\nnp.mean():求平均值\nnp.stu():求标准差\nloadtxt:读取文件(属性如下)\ndelimiter = \",\":分隔符\nskiprows = 1:空除第一行\nusecols=(17,13,2):分别使用第17,13,2列\nc:collections\nc.Counter(sortlabel[0:k]).most_common(1)[0][0]:出现次数最多的元素\n.print:输出\nord():将字符转化为ASCII\nchar():将ASCII转换为字符串\nbin():十 --- 二\noct():十 --- 八\nhex():十 --- 十六\neval():十六 --- 十\nint():其他 --- 十\nlist.sort():列表排序\nstr(字符串).split(','):以逗号分隔\n%s:字符串 %d:整数\n%f:小数\nsorted(内容):所有可迭代的对象\nlist.sort(reverse=True):降序排列\ncontent.decode(\"编码类型\"):编码\ncontent.encode(\"编码类型\"):解码\n+:同类型拼接\nprint(\"姓名：{0} 年龄：{1}\".format('zs',age))\nprint(\"姓名:%s 年龄:%d\" %('ct',35)) #%f[小数（浮点数）] %s [字符串]\n%d [整数]\n\nimport os\nos.system('cls'):清屏\nos._exit(0):退出\nchoice.lower() == 'y':输入的字母为小写y,一般用于条件判断\n\nimport time\ntime = time.strftime(\"%Y%m%d%H%M%S\",time.localtime()):当前时间\ntime.sleep(秒数):延迟\ntime.time():当前时间\n\ncontinue:跳出循环,重复操作\nbreak:跳出循环:进行下一步操作\nend = \"\" :不换行,输出为一行\n\nimport getpass (暂时无法实现)\npassword = getpass.getpass('要输入的密码'):密码隐藏\n\narr.shape:查看数组几行几列\narr.dtype:数组的数据类型\nur.urlretrieve():将文件下载到本地进度条\n.print:输出\n\nmap用法:\n1,定义一个函数,\ndef square(x): #计算平方数\nreturn x ** 2\nmap(函数名(square),一个或多个序列(列表))\n#计算列表中的元素平方\n\n2,使用lambda匿名函数\nmap(lambda x: x **2 ,序列(列表))\n#计算列表中的元素平方\n\n3,提供了两个列表.对相同位置的数据进行相加\nmap(lambda x,y:x+y,[1,3,1,4,5,2,1],[1,0,1,0,1,0,9])\n\nenumerate:指定列表元素下标并输出,一般用于for循环\nstart指定下标开始位置,默认为0\neg:\nseq = ['one','two','three']\nfor i , element in enumerate(seq,start = 2):\nprint(i,element)\n#2 one\n#3 two\n#4 three\n\n=:赋值\n==:判断是否相等(在if中使用)\n\n都和numpy有关\n在灵活的包装器np.(add, sub, mul, div, mod, pow)算术运算符:+，-，*，/，%，**\n\n1,数据类型\nbool:布尔型(True,False)\nint:整型(整数)\nfloat:浮点型(小数)\ncomplex:复数\n\n2,进制转换\nbin():将给的参数转化成二进制\noct():将给的参数转换成八进制\nhex():将给的参数转换成十六进制\n\n3,数学运算\nabs():返回绝对值\ndivmode():返回商和余数\nround():四舍五入\nsum():求和\npow(a,b):求a的b次幂,如果有三个参数,则求完次幂后对第三个数取余\nmin():求最小值\nmax():求最大值\n\n1,序列\n1).列表和元组\nlist():将一个可迭代对象转换成列表\ntuple():将一个可迭代对象转换成元组\n2).相关内置函数\nreversed():将一个序列翻转,返回翻转序列的迭代器\nslice():列表的切片\n3).字符串\nstr():将数据转化成字符串\nbytes():把字符串转化成bytes类型\nord():输入字符找带字符编码的位置\nchr():输入位置数字找出对应的字符\nascii():是ascii码中的返回该值,不是就返回u\nrepr():返回一个对象的string形式\n\n2.数据集合\n字典:dict创建一个字典\n集合:set创建一个集合\n\n3.相关内置函数\nlen():返回一个对象中的元素的个数\nsorted():对可迭代对象进行排序操作(lamda)\nlterable:可迭代对象\nreverse:是否是倒叙,True:倒叙,False:正序\nenumerate():获取集合的枚举对象\n\nkey:排序规则(排序函数)\nall():可迭代对象中全部是True,结果才是True\nany():可迭代对象中有一个是True,结果就是True\nfiter():过滤(lamda)\nmap():会根据提供的函数对指定序列做出映射(lamda)\nzip():用于将可迭代对象作为参数\n\n和作用域有关:\nlocals():返回当前作用域中的名字\nglobals():返回全局作用域中的名字\n\n和迭代器生成器相关:\nrange():生成数据\niter():获取迭代器,内部实际使用的是__iter__()方法来获取迭代器\nnext():迭代器向下执行一次,内部实际使用了__next__()方法返回迭代器的下一个项目\n\n字符串类型代码的执行:\neval():执行字符串类型的代码,并返回最终结果\nexec():执行字符串类型的代码\ncompile():将字符串类型的代码编码,代码对象能够通过exec语句来执行或者eval()进行求值\n\n输入输出:\nprint():打印输出\ninput():获取用户输入的内容\n\n内存相关:\nhash():获取到对象的哈希值(int,str,bool,tuple)\n\n文件操作相关:\nopen():用于打开一个文件,创建一个文件句柄\n\n模块相关:\nimport():用于动态加载类和函数\n\n帮助:\nhelp():函数用于查看函数或模块用途的详细说明\n\n调用相关:\ncallable():用于检查一个对象是否是可调用的,\n\n查看内置属性:\ndir():查看对象的内置属性,访问的是对象中的__dir__()方法\n\nstrip():去除指定字符/默认去除空格\n\n1,分片[::]:起始,末尾(不包含),步长---->取末尾的前一个\n[:]:取所有\n[::-1]:从后往前取所有\n\n2,表达式,运算符\n表达式=操作数+运算符\n运算符:7个\n算术运算符:\n+(加) -(减) *(乘) /(除) %(求余) //(整除)\n\n比较运算符:= < >\n\n逻辑运算符:and not or\n\n成员运算符:in not in\n\n身份运算符:is is not\n\n#详细说明(代码实现位运算符)\n位运算符: << 左移 >> 右移\n\n异或:^\n\n创建:virtualenv 虚拟环境名\n开启: source activate\n\n1，占位符\n\n```\n%d是整数的占位符，%f是小数的占位符（%.nf，n表示保留n位小数）,%s是字符串占位符\n```\n\n2，格式转换\n\n- `int()`：将一个数值或字符串转换成整数，可以指定进制。\n- `float()`：将一个字符串转换成浮点数。\n- `str()`：将指定的对象转换成字符串形式，可以指定编码。\n- `chr()`：将整数转换成该编码对应的字符串（一个字符）。\n- `ord()`：将字符串（一个字符）转换成对应的编码（整数）\n\n3，分支结构\n\nif xx:\n\n\tpass\n\nelif xx：\n\n\tpass\n\nelse:\n\n \tpass\n\n4, 循环结构\n\n`for-in`循环，一种是`while`循环\n\nwhile循环中使用：\n\n`break`关键字来提前终止循环, 只能终止它所在的那个循环,在嵌套的循环结构中使用， 不执行\n\ncontinue： 放弃本次循环后续的代码直接让循环进入下一轮，继续执行\n\n5, 格式化输出:\nprint(\"zhangsan\",2)\nprint(\"姓名:%s 年龄:%d\" %(name,35)))\nprint(\"{0}\".format(\"你好))\n","source":"_posts/python关键字整理.md","raw":"---\ntitle: python关键字整理\ncomments: true\ncopyright: true\ntags:\n  - 关键字\ncategories:\n  - python\nabbrlink: 4321eec9\ndate: 2022-08-29 19:49:42\n---\n\n一,各个关键字代表的含义\n\nabs():取元素绝对值\nnp.array():表示数组\nnp.argsort():返回元素排序的下标位置(针对索引)\nnp.sum():求和(针对数组)\nnp.sqrt():开平方\nnp.mean():求平均值\nnp.stu():求标准差\nloadtxt:读取文件(属性如下)\ndelimiter = \",\":分隔符\nskiprows = 1:空除第一行\nusecols=(17,13,2):分别使用第17,13,2列\nc:collections\nc.Counter(sortlabel[0:k]).most_common(1)[0][0]:出现次数最多的元素\n.print:输出\nord():将字符转化为ASCII\nchar():将ASCII转换为字符串\nbin():十 --- 二\noct():十 --- 八\nhex():十 --- 十六\neval():十六 --- 十\nint():其他 --- 十\nlist.sort():列表排序\nstr(字符串).split(','):以逗号分隔\n%s:字符串 %d:整数\n%f:小数\nsorted(内容):所有可迭代的对象\nlist.sort(reverse=True):降序排列\ncontent.decode(\"编码类型\"):编码\ncontent.encode(\"编码类型\"):解码\n+:同类型拼接\nprint(\"姓名：{0} 年龄：{1}\".format('zs',age))\nprint(\"姓名:%s 年龄:%d\" %('ct',35)) #%f[小数（浮点数）] %s [字符串]\n%d [整数]\n\nimport os\nos.system('cls'):清屏\nos._exit(0):退出\nchoice.lower() == 'y':输入的字母为小写y,一般用于条件判断\n\nimport time\ntime = time.strftime(\"%Y%m%d%H%M%S\",time.localtime()):当前时间\ntime.sleep(秒数):延迟\ntime.time():当前时间\n\ncontinue:跳出循环,重复操作\nbreak:跳出循环:进行下一步操作\nend = \"\" :不换行,输出为一行\n\nimport getpass (暂时无法实现)\npassword = getpass.getpass('要输入的密码'):密码隐藏\n\narr.shape:查看数组几行几列\narr.dtype:数组的数据类型\nur.urlretrieve():将文件下载到本地进度条\n.print:输出\n\nmap用法:\n1,定义一个函数,\ndef square(x): #计算平方数\nreturn x ** 2\nmap(函数名(square),一个或多个序列(列表))\n#计算列表中的元素平方\n\n2,使用lambda匿名函数\nmap(lambda x: x **2 ,序列(列表))\n#计算列表中的元素平方\n\n3,提供了两个列表.对相同位置的数据进行相加\nmap(lambda x,y:x+y,[1,3,1,4,5,2,1],[1,0,1,0,1,0,9])\n\nenumerate:指定列表元素下标并输出,一般用于for循环\nstart指定下标开始位置,默认为0\neg:\nseq = ['one','two','three']\nfor i , element in enumerate(seq,start = 2):\nprint(i,element)\n#2 one\n#3 two\n#4 three\n\n=:赋值\n==:判断是否相等(在if中使用)\n\n都和numpy有关\n在灵活的包装器np.(add, sub, mul, div, mod, pow)算术运算符:+，-，*，/，%，**\n\n1,数据类型\nbool:布尔型(True,False)\nint:整型(整数)\nfloat:浮点型(小数)\ncomplex:复数\n\n2,进制转换\nbin():将给的参数转化成二进制\noct():将给的参数转换成八进制\nhex():将给的参数转换成十六进制\n\n3,数学运算\nabs():返回绝对值\ndivmode():返回商和余数\nround():四舍五入\nsum():求和\npow(a,b):求a的b次幂,如果有三个参数,则求完次幂后对第三个数取余\nmin():求最小值\nmax():求最大值\n\n1,序列\n1).列表和元组\nlist():将一个可迭代对象转换成列表\ntuple():将一个可迭代对象转换成元组\n2).相关内置函数\nreversed():将一个序列翻转,返回翻转序列的迭代器\nslice():列表的切片\n3).字符串\nstr():将数据转化成字符串\nbytes():把字符串转化成bytes类型\nord():输入字符找带字符编码的位置\nchr():输入位置数字找出对应的字符\nascii():是ascii码中的返回该值,不是就返回u\nrepr():返回一个对象的string形式\n\n2.数据集合\n字典:dict创建一个字典\n集合:set创建一个集合\n\n3.相关内置函数\nlen():返回一个对象中的元素的个数\nsorted():对可迭代对象进行排序操作(lamda)\nlterable:可迭代对象\nreverse:是否是倒叙,True:倒叙,False:正序\nenumerate():获取集合的枚举对象\n\nkey:排序规则(排序函数)\nall():可迭代对象中全部是True,结果才是True\nany():可迭代对象中有一个是True,结果就是True\nfiter():过滤(lamda)\nmap():会根据提供的函数对指定序列做出映射(lamda)\nzip():用于将可迭代对象作为参数\n\n和作用域有关:\nlocals():返回当前作用域中的名字\nglobals():返回全局作用域中的名字\n\n和迭代器生成器相关:\nrange():生成数据\niter():获取迭代器,内部实际使用的是__iter__()方法来获取迭代器\nnext():迭代器向下执行一次,内部实际使用了__next__()方法返回迭代器的下一个项目\n\n字符串类型代码的执行:\neval():执行字符串类型的代码,并返回最终结果\nexec():执行字符串类型的代码\ncompile():将字符串类型的代码编码,代码对象能够通过exec语句来执行或者eval()进行求值\n\n输入输出:\nprint():打印输出\ninput():获取用户输入的内容\n\n内存相关:\nhash():获取到对象的哈希值(int,str,bool,tuple)\n\n文件操作相关:\nopen():用于打开一个文件,创建一个文件句柄\n\n模块相关:\nimport():用于动态加载类和函数\n\n帮助:\nhelp():函数用于查看函数或模块用途的详细说明\n\n调用相关:\ncallable():用于检查一个对象是否是可调用的,\n\n查看内置属性:\ndir():查看对象的内置属性,访问的是对象中的__dir__()方法\n\nstrip():去除指定字符/默认去除空格\n\n1,分片[::]:起始,末尾(不包含),步长---->取末尾的前一个\n[:]:取所有\n[::-1]:从后往前取所有\n\n2,表达式,运算符\n表达式=操作数+运算符\n运算符:7个\n算术运算符:\n+(加) -(减) *(乘) /(除) %(求余) //(整除)\n\n比较运算符:= < >\n\n逻辑运算符:and not or\n\n成员运算符:in not in\n\n身份运算符:is is not\n\n#详细说明(代码实现位运算符)\n位运算符: << 左移 >> 右移\n\n异或:^\n\n创建:virtualenv 虚拟环境名\n开启: source activate\n\n1，占位符\n\n```\n%d是整数的占位符，%f是小数的占位符（%.nf，n表示保留n位小数）,%s是字符串占位符\n```\n\n2，格式转换\n\n- `int()`：将一个数值或字符串转换成整数，可以指定进制。\n- `float()`：将一个字符串转换成浮点数。\n- `str()`：将指定的对象转换成字符串形式，可以指定编码。\n- `chr()`：将整数转换成该编码对应的字符串（一个字符）。\n- `ord()`：将字符串（一个字符）转换成对应的编码（整数）\n\n3，分支结构\n\nif xx:\n\n\tpass\n\nelif xx：\n\n\tpass\n\nelse:\n\n \tpass\n\n4, 循环结构\n\n`for-in`循环，一种是`while`循环\n\nwhile循环中使用：\n\n`break`关键字来提前终止循环, 只能终止它所在的那个循环,在嵌套的循环结构中使用， 不执行\n\ncontinue： 放弃本次循环后续的代码直接让循环进入下一轮，继续执行\n\n5, 格式化输出:\nprint(\"zhangsan\",2)\nprint(\"姓名:%s 年龄:%d\" %(name,35)))\nprint(\"{0}\".format(\"你好))\n","slug":"python关键字整理","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpy000w81nvdwyq7zlf","content":"<p>一,各个关键字代表的含义</p>\n<p>abs():取元素绝对值<br>np.array():表示数组<br>np.argsort():返回元素排序的下标位置(针对索引)<br>np.sum():求和(针对数组)<br>np.sqrt():开平方<br>np.mean():求平均值<br>np.stu():求标准差<br>loadtxt:读取文件(属性如下)<br>delimiter &#x3D; “,”:分隔符<br>skiprows &#x3D; 1:空除第一行<br>usecols&#x3D;(17,13,2):分别使用第17,13,2列<br>c:collections<br>c.Counter(sortlabel[0:k]).most_common(1)[0][0]:出现次数最多的元素<br>.print:输出<br>ord():将字符转化为ASCII<br>char():将ASCII转换为字符串<br>bin():十 — 二<br>oct():十 — 八<br>hex():十 — 十六<br>eval():十六 — 十<br>int():其他 — 十<br>list.sort():列表排序<br>str(字符串).split(‘,’):以逗号分隔<br>%s:字符串 %d:整数<br>%f:小数<br>sorted(内容):所有可迭代的对象<br>list.sort(reverse&#x3D;True):降序排列<br>content.decode(“编码类型”):编码<br>content.encode(“编码类型”):解码<br>+:同类型拼接<br>print(“姓名：{0} 年龄：{1}”.format(‘zs’,age))<br>print(“姓名:%s 年龄:%d” %(‘ct’,35)) #%f[小数（浮点数）] %s [字符串]<br>%d [整数]</p>\n<p>import os<br>os.system(‘cls’):清屏<br>os._exit(0):退出<br>choice.lower() &#x3D;&#x3D; ‘y’:输入的字母为小写y,一般用于条件判断</p>\n<p>import time<br>time &#x3D; time.strftime(“%Y%m%d%H%M%S”,time.localtime()):当前时间<br>time.sleep(秒数):延迟<br>time.time():当前时间</p>\n<p>continue:跳出循环,重复操作<br>break:跳出循环:进行下一步操作<br>end &#x3D; “” :不换行,输出为一行</p>\n<p>import getpass (暂时无法实现)<br>password &#x3D; getpass.getpass(‘要输入的密码’):密码隐藏</p>\n<p>arr.shape:查看数组几行几列<br>arr.dtype:数组的数据类型<br>ur.urlretrieve():将文件下载到本地进度条<br>.print:输出</p>\n<p>map用法:<br>1,定义一个函数,<br>def square(x): #计算平方数<br>return x ** 2<br>map(函数名(square),一个或多个序列(列表))<br>#计算列表中的元素平方</p>\n<p>2,使用lambda匿名函数<br>map(lambda x: x **2 ,序列(列表))<br>#计算列表中的元素平方</p>\n<p>3,提供了两个列表.对相同位置的数据进行相加<br>map(lambda x,y:x+y,[1,3,1,4,5,2,1],[1,0,1,0,1,0,9])</p>\n<p>enumerate:指定列表元素下标并输出,一般用于for循环<br>start指定下标开始位置,默认为0<br>eg:<br>seq &#x3D; [‘one’,’two’,’three’]<br>for i , element in enumerate(seq,start &#x3D; 2):<br>print(i,element)<br>#2 one<br>#3 two<br>#4 three</p>\n<p>&#x3D;:赋值<br>&#x3D;&#x3D;:判断是否相等(在if中使用)</p>\n<p>都和numpy有关<br>在灵活的包装器np.(add, sub, mul, div, mod, pow)算术运算符:+，-，<em>，&#x2F;，%，</em>*</p>\n<p>1,数据类型<br>bool:布尔型(True,False)<br>int:整型(整数)<br>float:浮点型(小数)<br>complex:复数</p>\n<p>2,进制转换<br>bin():将给的参数转化成二进制<br>oct():将给的参数转换成八进制<br>hex():将给的参数转换成十六进制</p>\n<p>3,数学运算<br>abs():返回绝对值<br>divmode():返回商和余数<br>round():四舍五入<br>sum():求和<br>pow(a,b):求a的b次幂,如果有三个参数,则求完次幂后对第三个数取余<br>min():求最小值<br>max():求最大值</p>\n<p>1,序列<br>1).列表和元组<br>list():将一个可迭代对象转换成列表<br>tuple():将一个可迭代对象转换成元组<br>2).相关内置函数<br>reversed():将一个序列翻转,返回翻转序列的迭代器<br>slice():列表的切片<br>3).字符串<br>str():将数据转化成字符串<br>bytes():把字符串转化成bytes类型<br>ord():输入字符找带字符编码的位置<br>chr():输入位置数字找出对应的字符<br>ascii():是ascii码中的返回该值,不是就返回u<br>repr():返回一个对象的string形式</p>\n<p>2.数据集合<br>字典:dict创建一个字典<br>集合:set创建一个集合</p>\n<p>3.相关内置函数<br>len():返回一个对象中的元素的个数<br>sorted():对可迭代对象进行排序操作(lamda)<br>lterable:可迭代对象<br>reverse:是否是倒叙,True:倒叙,False:正序<br>enumerate():获取集合的枚举对象</p>\n<p>key:排序规则(排序函数)<br>all():可迭代对象中全部是True,结果才是True<br>any():可迭代对象中有一个是True,结果就是True<br>fiter():过滤(lamda)<br>map():会根据提供的函数对指定序列做出映射(lamda)<br>zip():用于将可迭代对象作为参数</p>\n<p>和作用域有关:<br>locals():返回当前作用域中的名字<br>globals():返回全局作用域中的名字</p>\n<p>和迭代器生成器相关:<br>range():生成数据<br>iter():获取迭代器,内部实际使用的是__iter__()方法来获取迭代器<br>next():迭代器向下执行一次,内部实际使用了__next__()方法返回迭代器的下一个项目</p>\n<p>字符串类型代码的执行:<br>eval():执行字符串类型的代码,并返回最终结果<br>exec():执行字符串类型的代码<br>compile():将字符串类型的代码编码,代码对象能够通过exec语句来执行或者eval()进行求值</p>\n<p>输入输出:<br>print():打印输出<br>input():获取用户输入的内容</p>\n<p>内存相关:<br>hash():获取到对象的哈希值(int,str,bool,tuple)</p>\n<p>文件操作相关:<br>open():用于打开一个文件,创建一个文件句柄</p>\n<p>模块相关:<br>import():用于动态加载类和函数</p>\n<p>帮助:<br>help():函数用于查看函数或模块用途的详细说明</p>\n<p>调用相关:<br>callable():用于检查一个对象是否是可调用的,</p>\n<p>查看内置属性:<br>dir():查看对象的内置属性,访问的是对象中的__dir__()方法</p>\n<p>strip():去除指定字符&#x2F;默认去除空格</p>\n<p>1,分片[::]:起始,末尾(不包含),步长—-&gt;取末尾的前一个<br>[:]:取所有<br>[::-1]:从后往前取所有</p>\n<p>2,表达式,运算符<br>表达式&#x3D;操作数+运算符<br>运算符:7个<br>算术运算符:<br>+(加) -(减) *(乘) &#x2F;(除) %(求余) &#x2F;&#x2F;(整除)</p>\n<p>比较运算符:&#x3D; &lt; &gt;</p>\n<p>逻辑运算符:and not or</p>\n<p>成员运算符:in not in</p>\n<p>身份运算符:is is not</p>\n<p>#详细说明(代码实现位运算符)<br>位运算符: &lt;&lt; 左移 &gt;&gt; 右移</p>\n<p>异或:^</p>\n<p>创建:virtualenv 虚拟环境名<br>开启: source activate</p>\n<p>1，占位符</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">%d</span>是整数的占位符，<span class=\"variable\">%f</span>是小数的占位符（<span class=\"variable\">%.nf</span>，n表示保留n位小数）<span class=\"punctuation\">,</span><span class=\"variable\">%s</span>是字符串占位符</span><br></pre></td></tr></table></figure>\n\n<p>2，格式转换</p>\n<ul>\n<li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code>：将一个字符串转换成浮点数。</li>\n<li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）</li>\n</ul>\n<p>3，分支结构</p>\n<p>if xx:</p>\n<pre><code>pass\n</code></pre>\n<p>elif xx：</p>\n<pre><code>pass\n</code></pre>\n<p>else:</p>\n<pre><code> pass\n</code></pre>\n<p>4, 循环结构</p>\n<p><code>for-in</code>循环，一种是<code>while</code>循环</p>\n<p>while循环中使用：</p>\n<p><code>break</code>关键字来提前终止循环, 只能终止它所在的那个循环,在嵌套的循环结构中使用， 不执行</p>\n<p>continue： 放弃本次循环后续的代码直接让循环进入下一轮，继续执行</p>\n<p>5, 格式化输出:<br>print(“zhangsan”,2)<br>print(“姓名:%s 年龄:%d” %(name,35)))<br>print(“{0}”.format(“你好))</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一,各个关键字代表的含义</p>\n<p>abs():取元素绝对值<br>np.array():表示数组<br>np.argsort():返回元素排序的下标位置(针对索引)<br>np.sum():求和(针对数组)<br>np.sqrt():开平方<br>np.mean():求平均值<br>np.stu():求标准差<br>loadtxt:读取文件(属性如下)<br>delimiter &#x3D; “,”:分隔符<br>skiprows &#x3D; 1:空除第一行<br>usecols&#x3D;(17,13,2):分别使用第17,13,2列<br>c:collections<br>c.Counter(sortlabel[0:k]).most_common(1)[0][0]:出现次数最多的元素<br>.print:输出<br>ord():将字符转化为ASCII<br>char():将ASCII转换为字符串<br>bin():十 — 二<br>oct():十 — 八<br>hex():十 — 十六<br>eval():十六 — 十<br>int():其他 — 十<br>list.sort():列表排序<br>str(字符串).split(‘,’):以逗号分隔<br>%s:字符串 %d:整数<br>%f:小数<br>sorted(内容):所有可迭代的对象<br>list.sort(reverse&#x3D;True):降序排列<br>content.decode(“编码类型”):编码<br>content.encode(“编码类型”):解码<br>+:同类型拼接<br>print(“姓名：{0} 年龄：{1}”.format(‘zs’,age))<br>print(“姓名:%s 年龄:%d” %(‘ct’,35)) #%f[小数（浮点数）] %s [字符串]<br>%d [整数]</p>\n<p>import os<br>os.system(‘cls’):清屏<br>os._exit(0):退出<br>choice.lower() &#x3D;&#x3D; ‘y’:输入的字母为小写y,一般用于条件判断</p>\n<p>import time<br>time &#x3D; time.strftime(“%Y%m%d%H%M%S”,time.localtime()):当前时间<br>time.sleep(秒数):延迟<br>time.time():当前时间</p>\n<p>continue:跳出循环,重复操作<br>break:跳出循环:进行下一步操作<br>end &#x3D; “” :不换行,输出为一行</p>\n<p>import getpass (暂时无法实现)<br>password &#x3D; getpass.getpass(‘要输入的密码’):密码隐藏</p>\n<p>arr.shape:查看数组几行几列<br>arr.dtype:数组的数据类型<br>ur.urlretrieve():将文件下载到本地进度条<br>.print:输出</p>\n<p>map用法:<br>1,定义一个函数,<br>def square(x): #计算平方数<br>return x ** 2<br>map(函数名(square),一个或多个序列(列表))<br>#计算列表中的元素平方</p>\n<p>2,使用lambda匿名函数<br>map(lambda x: x **2 ,序列(列表))<br>#计算列表中的元素平方</p>\n<p>3,提供了两个列表.对相同位置的数据进行相加<br>map(lambda x,y:x+y,[1,3,1,4,5,2,1],[1,0,1,0,1,0,9])</p>\n<p>enumerate:指定列表元素下标并输出,一般用于for循环<br>start指定下标开始位置,默认为0<br>eg:<br>seq &#x3D; [‘one’,’two’,’three’]<br>for i , element in enumerate(seq,start &#x3D; 2):<br>print(i,element)<br>#2 one<br>#3 two<br>#4 three</p>\n<p>&#x3D;:赋值<br>&#x3D;&#x3D;:判断是否相等(在if中使用)</p>\n<p>都和numpy有关<br>在灵活的包装器np.(add, sub, mul, div, mod, pow)算术运算符:+，-，<em>，&#x2F;，%，</em>*</p>\n<p>1,数据类型<br>bool:布尔型(True,False)<br>int:整型(整数)<br>float:浮点型(小数)<br>complex:复数</p>\n<p>2,进制转换<br>bin():将给的参数转化成二进制<br>oct():将给的参数转换成八进制<br>hex():将给的参数转换成十六进制</p>\n<p>3,数学运算<br>abs():返回绝对值<br>divmode():返回商和余数<br>round():四舍五入<br>sum():求和<br>pow(a,b):求a的b次幂,如果有三个参数,则求完次幂后对第三个数取余<br>min():求最小值<br>max():求最大值</p>\n<p>1,序列<br>1).列表和元组<br>list():将一个可迭代对象转换成列表<br>tuple():将一个可迭代对象转换成元组<br>2).相关内置函数<br>reversed():将一个序列翻转,返回翻转序列的迭代器<br>slice():列表的切片<br>3).字符串<br>str():将数据转化成字符串<br>bytes():把字符串转化成bytes类型<br>ord():输入字符找带字符编码的位置<br>chr():输入位置数字找出对应的字符<br>ascii():是ascii码中的返回该值,不是就返回u<br>repr():返回一个对象的string形式</p>\n<p>2.数据集合<br>字典:dict创建一个字典<br>集合:set创建一个集合</p>\n<p>3.相关内置函数<br>len():返回一个对象中的元素的个数<br>sorted():对可迭代对象进行排序操作(lamda)<br>lterable:可迭代对象<br>reverse:是否是倒叙,True:倒叙,False:正序<br>enumerate():获取集合的枚举对象</p>\n<p>key:排序规则(排序函数)<br>all():可迭代对象中全部是True,结果才是True<br>any():可迭代对象中有一个是True,结果就是True<br>fiter():过滤(lamda)<br>map():会根据提供的函数对指定序列做出映射(lamda)<br>zip():用于将可迭代对象作为参数</p>\n<p>和作用域有关:<br>locals():返回当前作用域中的名字<br>globals():返回全局作用域中的名字</p>\n<p>和迭代器生成器相关:<br>range():生成数据<br>iter():获取迭代器,内部实际使用的是__iter__()方法来获取迭代器<br>next():迭代器向下执行一次,内部实际使用了__next__()方法返回迭代器的下一个项目</p>\n<p>字符串类型代码的执行:<br>eval():执行字符串类型的代码,并返回最终结果<br>exec():执行字符串类型的代码<br>compile():将字符串类型的代码编码,代码对象能够通过exec语句来执行或者eval()进行求值</p>\n<p>输入输出:<br>print():打印输出<br>input():获取用户输入的内容</p>\n<p>内存相关:<br>hash():获取到对象的哈希值(int,str,bool,tuple)</p>\n<p>文件操作相关:<br>open():用于打开一个文件,创建一个文件句柄</p>\n<p>模块相关:<br>import():用于动态加载类和函数</p>\n<p>帮助:<br>help():函数用于查看函数或模块用途的详细说明</p>\n<p>调用相关:<br>callable():用于检查一个对象是否是可调用的,</p>\n<p>查看内置属性:<br>dir():查看对象的内置属性,访问的是对象中的__dir__()方法</p>\n<p>strip():去除指定字符&#x2F;默认去除空格</p>\n<p>1,分片[::]:起始,末尾(不包含),步长—-&gt;取末尾的前一个<br>[:]:取所有<br>[::-1]:从后往前取所有</p>\n<p>2,表达式,运算符<br>表达式&#x3D;操作数+运算符<br>运算符:7个<br>算术运算符:<br>+(加) -(减) *(乘) &#x2F;(除) %(求余) &#x2F;&#x2F;(整除)</p>\n<p>比较运算符:&#x3D; &lt; &gt;</p>\n<p>逻辑运算符:and not or</p>\n<p>成员运算符:in not in</p>\n<p>身份运算符:is is not</p>\n<p>#详细说明(代码实现位运算符)<br>位运算符: &lt;&lt; 左移 &gt;&gt; 右移</p>\n<p>异或:^</p>\n<p>创建:virtualenv 虚拟环境名<br>开启: source activate</p>\n<p>1，占位符</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">%d</span>是整数的占位符，<span class=\"variable\">%f</span>是小数的占位符（<span class=\"variable\">%.nf</span>，n表示保留n位小数）<span class=\"punctuation\">,</span><span class=\"variable\">%s</span>是字符串占位符</span><br></pre></td></tr></table></figure>\n\n<p>2，格式转换</p>\n<ul>\n<li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code>：将一个字符串转换成浮点数。</li>\n<li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）</li>\n</ul>\n<p>3，分支结构</p>\n<p>if xx:</p>\n<pre><code>pass\n</code></pre>\n<p>elif xx：</p>\n<pre><code>pass\n</code></pre>\n<p>else:</p>\n<pre><code> pass\n</code></pre>\n<p>4, 循环结构</p>\n<p><code>for-in</code>循环，一种是<code>while</code>循环</p>\n<p>while循环中使用：</p>\n<p><code>break</code>关键字来提前终止循环, 只能终止它所在的那个循环,在嵌套的循环结构中使用， 不执行</p>\n<p>continue： 放弃本次循环后续的代码直接让循环进入下一轮，继续执行</p>\n<p>5, 格式化输出:<br>print(“zhangsan”,2)<br>print(“姓名:%s 年龄:%d” %(name,35)))<br>print(“{0}”.format(“你好))</p>\n"},{"title":"python基础概念","comments":1,"copyright":true,"abbrlink":"bf330a1e","date":"2022-08-29T12:38:02.000Z","_content":"\n1, __new__和__init__的区别\n\n__new__负责进行对象的创建,__init__负责进行对象的初始化\n\n3, django和flask的区别?\n答:\ndjango:\n①自带数据库管理app\n②Python Web框架的先驱,第三方库丰富\n③,上手容易开发文档详细,完善,资料丰富\n\nflask:\n①适用于做小型网站及web服务的api,开发大型网站无压力.架构需自行设计\n②与关系型数据库的结构不弱于django,与非关系型数据库的结合远远强于django,\n\n4,面向对象?\n简称oop,把对象当做一个程序的基本单元,一个对象包含数据和操作数据的函数,提高了编程的效率,使其编程的重用性增高.\n三大特点:\n封装:把需要重用的函数或功能封装起来,方便其他程序直接调用,\n继承 :子类继承父类,子类和父类拥有相同的方法和属性,子类会覆盖父类的方法和属性\n多态:提高函数的健壮性和可扩展性,父类声明指向子类实现\n\n5,如何提高Python的运行效率?\n①使用生成器,节省大量内存\n②针对循环优化,避免过多重复代码的执行\n③核心代码用Cython,PyPy等,提高效率\n④多进程,多线程,协程\n⑤多个if else条件判断,可以把最有可能发生的条件放最前面写,减少程序判断次数,提高效率\n\n6,描述数据,链表,队列,堆栈的区别?\n答:数组和链表是数据存储方式的概念,数组在连续的自然空间中存储,链表在非连续的自然空间中存储\n队列和堆栈是描述数据存储方式的概念,\n队列是先进先出,堆栈是后进先出,堆栈和队列可以用数组表示,也可以用链表表示,\n堆和栈\n内存:\n栈:内存小,速度快,有序,简单的数据类型放到栈里\n堆:内存大,速度慢,无序,复杂的数据类型放到堆里\n\n7,线程和进程?\n线程:1,CPU进行资源分配和调度的基本单位,线程是进程的一部分,是比进程更小的能够独立运行的基本单位,一个进程下的多个线程可以共享该进程的所有资源\n2,如果IO操作密集,则可以多个线程运行,效率高,缺点是如果一个线程崩溃,就会造成进程崩溃\n\n进程:1,操作系统进行资源分配和调度的基本单位,多个进程之间相互独立\n2,稳定性好,如果一个进程崩溃,不影响其他进程,但是进程消耗资源大,开启的进程数量有限\n\n8,*args和**kw区别?\n*args和**kw属于不定长参数\n*args返回值为元组类型,**kw返回值为字典类型\n\n9,=和==的区别?\n=:表示赋值.将某一数值赋值 给变量\n==:表示判断是否相等,返回True或者False,相等True,不相等False\n\nTCP/UDP/HTTP/HTTPS的区别? TCP协议:是一种面向连接,可靠的,基于字节流的传输层协议,在正式通信前必须和对方建立连接,一个tcp必须经过三次对话才能建立连接,在经历4次对话结束(即三握四挥),传输可靠,速度慢,应用,传输大量数据,对可靠性要求高\n\nUDP协议:用于www浏览的协议,特点是客户端发送的请求都需要服务器回送响应,在请求结束后会主动释放连接,从建立连接到关闭连接的过程成为\"一次连接\" 注: 1)在http1.0中客户端的每次请求都要求建立一次单独的连接,在处理完本次请求后就自动释放连接 2)在http1.1中,则可以在一次连接中处理多次请求,并可重叠进行,不需要等一个请求结束后再发下一个请求\n\nHTTP/HTTPS协议 HTTP协议:超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种 发布和接收HTML页面的方法。\nHTTPS协议: HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。\n\nnext()和iter()的区别?\n我们一般通过iter()函数获取可迭代对象的迭代器,通过对获取到的迭代器不断的通过next函数 进行获取下一条数据,iter()函数 实际上就是调用了可迭代对象的__iter__方法\n\n11,斐波那契数列\nitems = int(input(\"请输入斐波那契数列的个数:\"))\nfibs = [0,1]\nfor i in range(item - 1):\n    fibs.append(fibs[-2] + fibs[-1])\nprint(\"斐波那契数列为:\",fibsp[1:])\n\n12,冒泡排序\ndef bubblesort(list):\n    for i in range(len(lsit)):\n        for j in range(len(list)-i-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    #用户输入\n    str = input(\"请输入数字(用逗号隔开)\")\n    list = [int(i) for i in str.split(',')]\n    print(bubblesort(list))\n\n\n\n13, mysql索引\n[mysql索引的详细说明](https://www.cnblogs.com/jiuya/p/10023483.html)\n普通索引:\n是最基本的索引,没有任何限制\n唯一索引:\n索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一\n主键索引:\n一个表只能有一个主键,不允许有空值,一般在建表的同时创建主键索引\n组合索引:\n指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用.使用组合索引时遵循最左前缀集合\n全文索引:\n主要是用来查找文本中的关键字,而不是直接与索引中的值相比较.\n\n14, 类方法,静态方法,实例方法的区别\n实例方法主要用于在类中封装一个额外的功能\n第一个参数必须是self,一般情况下只能用实例化对象调用,不能用类调用,如果要用类调用,需要将实例化对象传递给self.\n静态方法,主要用于在类中封装一个额外的功能,创建时用@staticmethod装饰器装饰,声明为静态函数,可以用类调用也可以用实例化对象调用\n类方法主要是将类作为参数传递,相当于将类当成了对象,可以调用该类中的所有方法,创建时用@classmethod装饰器装饰,声明为类函数,第一个参数必须是cls,可以用类调用也可以用实例化对象调用.\n\n代码展示:\nclass A(object):\n    #构造函数\n    def __init__(self,title1):\n        self.title = title1\n        print(self.title)\n    #实例函数\n    def foo(self,title2):\n        print(title2)\n   #静态函数\n    @staticmethod\n    def  static_foo():\n        print(\"静态方法\")\n    #类方法\n    @classmethod\n    def cls_foo(cls):\n        cls.foo(a,'类函数调用实例函数')\n        print('类方法')\n\n\n\n15, collections库中的counter统计元素个数，\n\n16，列表合并\na.extend(b)\n\n17,字典合并\ndic1.update(dic2)    \n删除 字典\ndel dic['sex']\n\n18,迭代器和生成器的区别\n迭代器:for循环遍历取值的过程\n生成器:用yield关键字来返回值的函数成为生成器函数\n\n19,\ndel:按索引删除元素\nremove:默认删除第一个元素\npop:默认删除最后一个元素或者根据索引值删除索引\n\n20,装饰器:将函数作为参数传递,在不改变源代码的情况下扩展函数功能\ndef funA(fn):\n    pass\n@funA\ndef fun():\n    print('a')\nfun()\n\n21,闭包:外函数包含内函数,在高阶函数之上对函数功能进行扩展,一般在装饰器下写闭包\n\n22,set集合去重的原理\nset集合去重主要是通过函数__hash__和__eq__结合实现的\n①当两个变量的哈希值不相同时,就认为两个变量时不相同的\n②当两个变量哈希值一样时,调用__eq__方法,当返回值为True时认为两个变量时同一个,应该去除一个,返回FALSE时,不去重\n\n23.python中的gil锁\nGIl是python的全局解释器锁,同一进程中加入有多个线程运行,一个线程在运行python程序的时候会霸占python解释器,也就是加了一把锁(GIL),使该进程内其他线程无法运行,等该线程运行完成后其他线程才能运行\n\n\n\n25,分别从前端,后端,数据库阐述web项目的性能优化\n\n前端优化:\n\n①,减少http请求,例如制作精灵图\n\n②,html和CSS放在页面上部,javascript放在页面下部\n\n后端优化:\n\n①,缓存存储读写次数高,变化少的数据,\n\n②,异步方式,如果有耗时操作,可采用异步,如celery\n\n③,代码优化,避免循环和判断次数太多,如果多个if else判断,优先判断最有可能发生的情况\n\n数据库优化:\n\n①,如有条件,数据可以存放于redis,读取速度快,\n\n②,建立索引,外键等\n\n26, 常见转态码和意义\n\n200 OK: 请求正常处理完毕\n\n204 No Content: 请求成功处理，没有实体的主体返回\n\n206 Partial Content: GET范围请求已成功处理\n\n301 Moved Permanently: 永久重定向，资源已永久分配新URI\n\n302 Found: 临时重定向，资源已临时分配新URI\n\n303 See Other: 临时重定向，期望使用GET定向获取\n\n304 Not Modified: 发送的附带条件请求未满足\n\n307 Temporary Redirect: 临时重定向，POST不会变成GET\n\n400 Bad Request: 请求报文语法错误或者参数错误\n\n401 Unauthorized: 需要通过HTTP认证，或认证失败\n\n403 Forbidden: 请求资源被拒绝\n\n404 Not Found: 无法找到请求资源(服务器无理由拒绝)\n\n500 Internal Server Error: 服务器故障或Web应用故障\n\n503 Service Unavailable: 服务器超负载或停机维护\n\n27, django生命周期?\n\n从用户输入url到用户看到网页的整个过程。\n\n1)  用户输入网址，浏览器发起请求\n\n2)  WSGI（服务器网关接口）创建socket服务端，接受请求\n\n3）中间件处理请求\n\n4）url路由，根据当前请求的url找到相应的视图函数\n\n5）进入view，进行业务处理，执行类或者函数，返回字符串\n\n6）再次通过中间件处理相应的请求\n\n7）WSGI返回响应\n\n8）浏览器渲染\n\n\n\n1,深拷贝,浅拷贝的区别?\n\n深拷贝: 外部元素和内部元素都拷贝了对象本身,而不是引用,把对象复制一遍,对象中引用的其他对象也复制\n\n浅拷贝:拷贝了最外围对象本身,内部元素知识拷贝了一个引用,也就是说,把对象复制一遍,该对象引用的其他对象不复制.\n\n\n\n2,python的垃圾回收机制?\n\n① 在python语言内部,当一个对象的引用计数是0时,它将被垃圾收集机制处理掉\n\n② 当遇到两个对象a和b相互引用时的情况,del语句可以减少a和b的引用计数,并销毁用于底层对象的名称,需要注意的是,并不是每个对象都包含一个对其他对象的应用,所以这种情况下引用计数不会归0,对象也不会被销毁,这就是可能会导致内存泄露,所以为了解决这问题,解释器会定期执行一个循环检测器,搜索不可访问对象的循环并进行删除.\n\n\n\n3,可变和不可变数据类型\n\n不可变:数值型,字符串型,和元组\n\n可变:列表和字典\n\n不可变原因: 如果变量值发生了变化,相当于新建一个对象,而对于相同值的对象,在内存中只有一个地址\n\n可变原因.如果对对象进行了添加,修改等操作之后,只是改变了变量的值,而不会新建一个对象,变量引用的对象的地址也不会发生变化,不过相对于相同值的不同对象,即每个对象都有自己的地址.\n\n去重:集合去重,\n\n\n\n4,列表切片属于浅拷贝\n\n\n\n5,闭包\n\n闭包:外函数包含内函数,在高阶函数之上,对函数功能进行扩展,一般在装饰器情况下写闭包.\n\n","source":"_posts/python基础概念.md","raw":"---\ntitle: python基础概念\ncomments: true\ncopyright: true\ntags:\n  - python\n  - 概念\ncategories:\n  - python\nabbrlink: bf330a1e\ndate: 2022-08-29 20:38:02\n---\n\n1, __new__和__init__的区别\n\n__new__负责进行对象的创建,__init__负责进行对象的初始化\n\n3, django和flask的区别?\n答:\ndjango:\n①自带数据库管理app\n②Python Web框架的先驱,第三方库丰富\n③,上手容易开发文档详细,完善,资料丰富\n\nflask:\n①适用于做小型网站及web服务的api,开发大型网站无压力.架构需自行设计\n②与关系型数据库的结构不弱于django,与非关系型数据库的结合远远强于django,\n\n4,面向对象?\n简称oop,把对象当做一个程序的基本单元,一个对象包含数据和操作数据的函数,提高了编程的效率,使其编程的重用性增高.\n三大特点:\n封装:把需要重用的函数或功能封装起来,方便其他程序直接调用,\n继承 :子类继承父类,子类和父类拥有相同的方法和属性,子类会覆盖父类的方法和属性\n多态:提高函数的健壮性和可扩展性,父类声明指向子类实现\n\n5,如何提高Python的运行效率?\n①使用生成器,节省大量内存\n②针对循环优化,避免过多重复代码的执行\n③核心代码用Cython,PyPy等,提高效率\n④多进程,多线程,协程\n⑤多个if else条件判断,可以把最有可能发生的条件放最前面写,减少程序判断次数,提高效率\n\n6,描述数据,链表,队列,堆栈的区别?\n答:数组和链表是数据存储方式的概念,数组在连续的自然空间中存储,链表在非连续的自然空间中存储\n队列和堆栈是描述数据存储方式的概念,\n队列是先进先出,堆栈是后进先出,堆栈和队列可以用数组表示,也可以用链表表示,\n堆和栈\n内存:\n栈:内存小,速度快,有序,简单的数据类型放到栈里\n堆:内存大,速度慢,无序,复杂的数据类型放到堆里\n\n7,线程和进程?\n线程:1,CPU进行资源分配和调度的基本单位,线程是进程的一部分,是比进程更小的能够独立运行的基本单位,一个进程下的多个线程可以共享该进程的所有资源\n2,如果IO操作密集,则可以多个线程运行,效率高,缺点是如果一个线程崩溃,就会造成进程崩溃\n\n进程:1,操作系统进行资源分配和调度的基本单位,多个进程之间相互独立\n2,稳定性好,如果一个进程崩溃,不影响其他进程,但是进程消耗资源大,开启的进程数量有限\n\n8,*args和**kw区别?\n*args和**kw属于不定长参数\n*args返回值为元组类型,**kw返回值为字典类型\n\n9,=和==的区别?\n=:表示赋值.将某一数值赋值 给变量\n==:表示判断是否相等,返回True或者False,相等True,不相等False\n\nTCP/UDP/HTTP/HTTPS的区别? TCP协议:是一种面向连接,可靠的,基于字节流的传输层协议,在正式通信前必须和对方建立连接,一个tcp必须经过三次对话才能建立连接,在经历4次对话结束(即三握四挥),传输可靠,速度慢,应用,传输大量数据,对可靠性要求高\n\nUDP协议:用于www浏览的协议,特点是客户端发送的请求都需要服务器回送响应,在请求结束后会主动释放连接,从建立连接到关闭连接的过程成为\"一次连接\" 注: 1)在http1.0中客户端的每次请求都要求建立一次单独的连接,在处理完本次请求后就自动释放连接 2)在http1.1中,则可以在一次连接中处理多次请求,并可重叠进行,不需要等一个请求结束后再发下一个请求\n\nHTTP/HTTPS协议 HTTP协议:超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种 发布和接收HTML页面的方法。\nHTTPS协议: HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。\n\nnext()和iter()的区别?\n我们一般通过iter()函数获取可迭代对象的迭代器,通过对获取到的迭代器不断的通过next函数 进行获取下一条数据,iter()函数 实际上就是调用了可迭代对象的__iter__方法\n\n11,斐波那契数列\nitems = int(input(\"请输入斐波那契数列的个数:\"))\nfibs = [0,1]\nfor i in range(item - 1):\n    fibs.append(fibs[-2] + fibs[-1])\nprint(\"斐波那契数列为:\",fibsp[1:])\n\n12,冒泡排序\ndef bubblesort(list):\n    for i in range(len(lsit)):\n        for j in range(len(list)-i-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    #用户输入\n    str = input(\"请输入数字(用逗号隔开)\")\n    list = [int(i) for i in str.split(',')]\n    print(bubblesort(list))\n\n\n\n13, mysql索引\n[mysql索引的详细说明](https://www.cnblogs.com/jiuya/p/10023483.html)\n普通索引:\n是最基本的索引,没有任何限制\n唯一索引:\n索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一\n主键索引:\n一个表只能有一个主键,不允许有空值,一般在建表的同时创建主键索引\n组合索引:\n指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用.使用组合索引时遵循最左前缀集合\n全文索引:\n主要是用来查找文本中的关键字,而不是直接与索引中的值相比较.\n\n14, 类方法,静态方法,实例方法的区别\n实例方法主要用于在类中封装一个额外的功能\n第一个参数必须是self,一般情况下只能用实例化对象调用,不能用类调用,如果要用类调用,需要将实例化对象传递给self.\n静态方法,主要用于在类中封装一个额外的功能,创建时用@staticmethod装饰器装饰,声明为静态函数,可以用类调用也可以用实例化对象调用\n类方法主要是将类作为参数传递,相当于将类当成了对象,可以调用该类中的所有方法,创建时用@classmethod装饰器装饰,声明为类函数,第一个参数必须是cls,可以用类调用也可以用实例化对象调用.\n\n代码展示:\nclass A(object):\n    #构造函数\n    def __init__(self,title1):\n        self.title = title1\n        print(self.title)\n    #实例函数\n    def foo(self,title2):\n        print(title2)\n   #静态函数\n    @staticmethod\n    def  static_foo():\n        print(\"静态方法\")\n    #类方法\n    @classmethod\n    def cls_foo(cls):\n        cls.foo(a,'类函数调用实例函数')\n        print('类方法')\n\n\n\n15, collections库中的counter统计元素个数，\n\n16，列表合并\na.extend(b)\n\n17,字典合并\ndic1.update(dic2)    \n删除 字典\ndel dic['sex']\n\n18,迭代器和生成器的区别\n迭代器:for循环遍历取值的过程\n生成器:用yield关键字来返回值的函数成为生成器函数\n\n19,\ndel:按索引删除元素\nremove:默认删除第一个元素\npop:默认删除最后一个元素或者根据索引值删除索引\n\n20,装饰器:将函数作为参数传递,在不改变源代码的情况下扩展函数功能\ndef funA(fn):\n    pass\n@funA\ndef fun():\n    print('a')\nfun()\n\n21,闭包:外函数包含内函数,在高阶函数之上对函数功能进行扩展,一般在装饰器下写闭包\n\n22,set集合去重的原理\nset集合去重主要是通过函数__hash__和__eq__结合实现的\n①当两个变量的哈希值不相同时,就认为两个变量时不相同的\n②当两个变量哈希值一样时,调用__eq__方法,当返回值为True时认为两个变量时同一个,应该去除一个,返回FALSE时,不去重\n\n23.python中的gil锁\nGIl是python的全局解释器锁,同一进程中加入有多个线程运行,一个线程在运行python程序的时候会霸占python解释器,也就是加了一把锁(GIL),使该进程内其他线程无法运行,等该线程运行完成后其他线程才能运行\n\n\n\n25,分别从前端,后端,数据库阐述web项目的性能优化\n\n前端优化:\n\n①,减少http请求,例如制作精灵图\n\n②,html和CSS放在页面上部,javascript放在页面下部\n\n后端优化:\n\n①,缓存存储读写次数高,变化少的数据,\n\n②,异步方式,如果有耗时操作,可采用异步,如celery\n\n③,代码优化,避免循环和判断次数太多,如果多个if else判断,优先判断最有可能发生的情况\n\n数据库优化:\n\n①,如有条件,数据可以存放于redis,读取速度快,\n\n②,建立索引,外键等\n\n26, 常见转态码和意义\n\n200 OK: 请求正常处理完毕\n\n204 No Content: 请求成功处理，没有实体的主体返回\n\n206 Partial Content: GET范围请求已成功处理\n\n301 Moved Permanently: 永久重定向，资源已永久分配新URI\n\n302 Found: 临时重定向，资源已临时分配新URI\n\n303 See Other: 临时重定向，期望使用GET定向获取\n\n304 Not Modified: 发送的附带条件请求未满足\n\n307 Temporary Redirect: 临时重定向，POST不会变成GET\n\n400 Bad Request: 请求报文语法错误或者参数错误\n\n401 Unauthorized: 需要通过HTTP认证，或认证失败\n\n403 Forbidden: 请求资源被拒绝\n\n404 Not Found: 无法找到请求资源(服务器无理由拒绝)\n\n500 Internal Server Error: 服务器故障或Web应用故障\n\n503 Service Unavailable: 服务器超负载或停机维护\n\n27, django生命周期?\n\n从用户输入url到用户看到网页的整个过程。\n\n1)  用户输入网址，浏览器发起请求\n\n2)  WSGI（服务器网关接口）创建socket服务端，接受请求\n\n3）中间件处理请求\n\n4）url路由，根据当前请求的url找到相应的视图函数\n\n5）进入view，进行业务处理，执行类或者函数，返回字符串\n\n6）再次通过中间件处理相应的请求\n\n7）WSGI返回响应\n\n8）浏览器渲染\n\n\n\n1,深拷贝,浅拷贝的区别?\n\n深拷贝: 外部元素和内部元素都拷贝了对象本身,而不是引用,把对象复制一遍,对象中引用的其他对象也复制\n\n浅拷贝:拷贝了最外围对象本身,内部元素知识拷贝了一个引用,也就是说,把对象复制一遍,该对象引用的其他对象不复制.\n\n\n\n2,python的垃圾回收机制?\n\n① 在python语言内部,当一个对象的引用计数是0时,它将被垃圾收集机制处理掉\n\n② 当遇到两个对象a和b相互引用时的情况,del语句可以减少a和b的引用计数,并销毁用于底层对象的名称,需要注意的是,并不是每个对象都包含一个对其他对象的应用,所以这种情况下引用计数不会归0,对象也不会被销毁,这就是可能会导致内存泄露,所以为了解决这问题,解释器会定期执行一个循环检测器,搜索不可访问对象的循环并进行删除.\n\n\n\n3,可变和不可变数据类型\n\n不可变:数值型,字符串型,和元组\n\n可变:列表和字典\n\n不可变原因: 如果变量值发生了变化,相当于新建一个对象,而对于相同值的对象,在内存中只有一个地址\n\n可变原因.如果对对象进行了添加,修改等操作之后,只是改变了变量的值,而不会新建一个对象,变量引用的对象的地址也不会发生变化,不过相对于相同值的不同对象,即每个对象都有自己的地址.\n\n去重:集合去重,\n\n\n\n4,列表切片属于浅拷贝\n\n\n\n5,闭包\n\n闭包:外函数包含内函数,在高阶函数之上,对函数功能进行扩展,一般在装饰器情况下写闭包.\n\n","slug":"python基础概念","published":1,"updated":"2022-10-26T08:28:43.363Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpy000y81nvcz2ehbwf","content":"<p>1, __new__和__init__的区别</p>\n<p>__new__负责进行对象的创建,__init__负责进行对象的初始化</p>\n<p>3, django和flask的区别?<br>答:<br>django:<br>①自带数据库管理app<br>②Python Web框架的先驱,第三方库丰富<br>③,上手容易开发文档详细,完善,资料丰富</p>\n<p>flask:<br>①适用于做小型网站及web服务的api,开发大型网站无压力.架构需自行设计<br>②与关系型数据库的结构不弱于django,与非关系型数据库的结合远远强于django,</p>\n<p>4,面向对象?<br>简称oop,把对象当做一个程序的基本单元,一个对象包含数据和操作数据的函数,提高了编程的效率,使其编程的重用性增高.<br>三大特点:<br>封装:把需要重用的函数或功能封装起来,方便其他程序直接调用,<br>继承 :子类继承父类,子类和父类拥有相同的方法和属性,子类会覆盖父类的方法和属性<br>多态:提高函数的健壮性和可扩展性,父类声明指向子类实现</p>\n<p>5,如何提高Python的运行效率?<br>①使用生成器,节省大量内存<br>②针对循环优化,避免过多重复代码的执行<br>③核心代码用Cython,PyPy等,提高效率<br>④多进程,多线程,协程<br>⑤多个if else条件判断,可以把最有可能发生的条件放最前面写,减少程序判断次数,提高效率</p>\n<p>6,描述数据,链表,队列,堆栈的区别?<br>答:数组和链表是数据存储方式的概念,数组在连续的自然空间中存储,链表在非连续的自然空间中存储<br>队列和堆栈是描述数据存储方式的概念,<br>队列是先进先出,堆栈是后进先出,堆栈和队列可以用数组表示,也可以用链表表示,<br>堆和栈<br>内存:<br>栈:内存小,速度快,有序,简单的数据类型放到栈里<br>堆:内存大,速度慢,无序,复杂的数据类型放到堆里</p>\n<p>7,线程和进程?<br>线程:1,CPU进行资源分配和调度的基本单位,线程是进程的一部分,是比进程更小的能够独立运行的基本单位,一个进程下的多个线程可以共享该进程的所有资源<br>2,如果IO操作密集,则可以多个线程运行,效率高,缺点是如果一个线程崩溃,就会造成进程崩溃</p>\n<p>进程:1,操作系统进行资源分配和调度的基本单位,多个进程之间相互独立<br>2,稳定性好,如果一个进程崩溃,不影响其他进程,但是进程消耗资源大,开启的进程数量有限</p>\n<p>8,*args和**kw区别?<br>*args和**kw属于不定长参数<br>*args返回值为元组类型,**kw返回值为字典类型</p>\n<p>9,&#x3D;和&#x3D;&#x3D;的区别?<br>&#x3D;:表示赋值.将某一数值赋值 给变量<br>&#x3D;&#x3D;:表示判断是否相等,返回True或者False,相等True,不相等False</p>\n<p>TCP&#x2F;UDP&#x2F;HTTP&#x2F;HTTPS的区别? TCP协议:是一种面向连接,可靠的,基于字节流的传输层协议,在正式通信前必须和对方建立连接,一个tcp必须经过三次对话才能建立连接,在经历4次对话结束(即三握四挥),传输可靠,速度慢,应用,传输大量数据,对可靠性要求高</p>\n<p>UDP协议:用于www浏览的协议,特点是客户端发送的请求都需要服务器回送响应,在请求结束后会主动释放连接,从建立连接到关闭连接的过程成为”一次连接” 注: 1)在http1.0中客户端的每次请求都要求建立一次单独的连接,在处理完本次请求后就自动释放连接 2)在http1.1中,则可以在一次连接中处理多次请求,并可重叠进行,不需要等一个请求结束后再发下一个请求</p>\n<p>HTTP&#x2F;HTTPS协议 HTTP协议:超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP&#x2F;IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种 发布和接收HTML页面的方法。<br>HTTPS协议: HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL&#x2F;TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。</p>\n<p>next()和iter()的区别?<br>我们一般通过iter()函数获取可迭代对象的迭代器,通过对获取到的迭代器不断的通过next函数 进行获取下一条数据,iter()函数 实际上就是调用了可迭代对象的__iter__方法</p>\n<p>11,斐波那契数列<br>items &#x3D; int(input(“请输入斐波那契数列的个数:”))<br>fibs &#x3D; [0,1]<br>for i in range(item - 1):<br>    fibs.append(fibs[-2] + fibs[-1])<br>print(“斐波那契数列为:”,fibsp[1:])</p>\n<p>12,冒泡排序<br>def bubblesort(list):<br>    for i in range(len(lsit)):<br>        for j in range(len(list)-i-1):<br>            if list[j]&gt;list[j+1]:<br>                list[j],list[j+1] &#x3D; list[j+1],list[j]<br>    return list</p>\n<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    #用户输入<br>    str &#x3D; input(“请输入数字(用逗号隔开)”)<br>    list &#x3D; [int(i) for i in str.split(‘,’)]<br>    print(bubblesort(list))</p>\n<p>13, mysql索引<br><a href=\"https://www.cnblogs.com/jiuya/p/10023483.html\">mysql索引的详细说明</a><br>普通索引:<br>是最基本的索引,没有任何限制<br>唯一索引:<br>索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一<br>主键索引:<br>一个表只能有一个主键,不允许有空值,一般在建表的同时创建主键索引<br>组合索引:<br>指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用.使用组合索引时遵循最左前缀集合<br>全文索引:<br>主要是用来查找文本中的关键字,而不是直接与索引中的值相比较.</p>\n<p>14, 类方法,静态方法,实例方法的区别<br>实例方法主要用于在类中封装一个额外的功能<br>第一个参数必须是self,一般情况下只能用实例化对象调用,不能用类调用,如果要用类调用,需要将实例化对象传递给self.<br>静态方法,主要用于在类中封装一个额外的功能,创建时用@staticmethod装饰器装饰,声明为静态函数,可以用类调用也可以用实例化对象调用<br>类方法主要是将类作为参数传递,相当于将类当成了对象,可以调用该类中的所有方法,创建时用@classmethod装饰器装饰,声明为类函数,第一个参数必须是cls,可以用类调用也可以用实例化对象调用.</p>\n<p>代码展示:<br>class A(object):<br>    #构造函数<br>    def <strong>init</strong>(self,title1):<br>        self.title &#x3D; title1<br>        print(self.title)<br>    #实例函数<br>    def foo(self,title2):<br>        print(title2)<br>   #静态函数<br>    @staticmethod<br>    def  static_foo():<br>        print(“静态方法”)<br>    #类方法<br>    @classmethod<br>    def cls_foo(cls):<br>        cls.foo(a,’类函数调用实例函数’)<br>        print(‘类方法’)</p>\n<p>15, collections库中的counter统计元素个数，</p>\n<p>16，列表合并<br>a.extend(b)</p>\n<p>17,字典合并<br>dic1.update(dic2)<br>删除 字典<br>del dic[‘sex’]</p>\n<p>18,迭代器和生成器的区别<br>迭代器:for循环遍历取值的过程<br>生成器:用yield关键字来返回值的函数成为生成器函数</p>\n<p>19,<br>del:按索引删除元素<br>remove:默认删除第一个元素<br>pop:默认删除最后一个元素或者根据索引值删除索引</p>\n<p>20,装饰器:将函数作为参数传递,在不改变源代码的情况下扩展函数功能<br>def funA(fn):<br>    pass<br>@funA<br>def fun():<br>    print(‘a’)<br>fun()</p>\n<p>21,闭包:外函数包含内函数,在高阶函数之上对函数功能进行扩展,一般在装饰器下写闭包</p>\n<p>22,set集合去重的原理<br>set集合去重主要是通过函数__hash__和__eq__结合实现的<br>①当两个变量的哈希值不相同时,就认为两个变量时不相同的<br>②当两个变量哈希值一样时,调用__eq__方法,当返回值为True时认为两个变量时同一个,应该去除一个,返回FALSE时,不去重</p>\n<p>23.python中的gil锁<br>GIl是python的全局解释器锁,同一进程中加入有多个线程运行,一个线程在运行python程序的时候会霸占python解释器,也就是加了一把锁(GIL),使该进程内其他线程无法运行,等该线程运行完成后其他线程才能运行</p>\n<p>25,分别从前端,后端,数据库阐述web项目的性能优化</p>\n<p>前端优化:</p>\n<p>①,减少http请求,例如制作精灵图</p>\n<p>②,html和CSS放在页面上部,javascript放在页面下部</p>\n<p>后端优化:</p>\n<p>①,缓存存储读写次数高,变化少的数据,</p>\n<p>②,异步方式,如果有耗时操作,可采用异步,如celery</p>\n<p>③,代码优化,避免循环和判断次数太多,如果多个if else判断,优先判断最有可能发生的情况</p>\n<p>数据库优化:</p>\n<p>①,如有条件,数据可以存放于redis,读取速度快,</p>\n<p>②,建立索引,外键等</p>\n<p>26, 常见转态码和意义</p>\n<p>200 OK: 请求正常处理完毕</p>\n<p>204 No Content: 请求成功处理，没有实体的主体返回</p>\n<p>206 Partial Content: GET范围请求已成功处理</p>\n<p>301 Moved Permanently: 永久重定向，资源已永久分配新URI</p>\n<p>302 Found: 临时重定向，资源已临时分配新URI</p>\n<p>303 See Other: 临时重定向，期望使用GET定向获取</p>\n<p>304 Not Modified: 发送的附带条件请求未满足</p>\n<p>307 Temporary Redirect: 临时重定向，POST不会变成GET</p>\n<p>400 Bad Request: 请求报文语法错误或者参数错误</p>\n<p>401 Unauthorized: 需要通过HTTP认证，或认证失败</p>\n<p>403 Forbidden: 请求资源被拒绝</p>\n<p>404 Not Found: 无法找到请求资源(服务器无理由拒绝)</p>\n<p>500 Internal Server Error: 服务器故障或Web应用故障</p>\n<p>503 Service Unavailable: 服务器超负载或停机维护</p>\n<p>27, django生命周期?</p>\n<p>从用户输入url到用户看到网页的整个过程。</p>\n<ol>\n<li><p>用户输入网址，浏览器发起请求</p>\n</li>\n<li><p>WSGI（服务器网关接口）创建socket服务端，接受请求</p>\n</li>\n</ol>\n<p>3）中间件处理请求</p>\n<p>4）url路由，根据当前请求的url找到相应的视图函数</p>\n<p>5）进入view，进行业务处理，执行类或者函数，返回字符串</p>\n<p>6）再次通过中间件处理相应的请求</p>\n<p>7）WSGI返回响应</p>\n<p>8）浏览器渲染</p>\n<p>1,深拷贝,浅拷贝的区别?</p>\n<p>深拷贝: 外部元素和内部元素都拷贝了对象本身,而不是引用,把对象复制一遍,对象中引用的其他对象也复制</p>\n<p>浅拷贝:拷贝了最外围对象本身,内部元素知识拷贝了一个引用,也就是说,把对象复制一遍,该对象引用的其他对象不复制.</p>\n<p>2,python的垃圾回收机制?</p>\n<p>① 在python语言内部,当一个对象的引用计数是0时,它将被垃圾收集机制处理掉</p>\n<p>② 当遇到两个对象a和b相互引用时的情况,del语句可以减少a和b的引用计数,并销毁用于底层对象的名称,需要注意的是,并不是每个对象都包含一个对其他对象的应用,所以这种情况下引用计数不会归0,对象也不会被销毁,这就是可能会导致内存泄露,所以为了解决这问题,解释器会定期执行一个循环检测器,搜索不可访问对象的循环并进行删除.</p>\n<p>3,可变和不可变数据类型</p>\n<p>不可变:数值型,字符串型,和元组</p>\n<p>可变:列表和字典</p>\n<p>不可变原因: 如果变量值发生了变化,相当于新建一个对象,而对于相同值的对象,在内存中只有一个地址</p>\n<p>可变原因.如果对对象进行了添加,修改等操作之后,只是改变了变量的值,而不会新建一个对象,变量引用的对象的地址也不会发生变化,不过相对于相同值的不同对象,即每个对象都有自己的地址.</p>\n<p>去重:集合去重,</p>\n<p>4,列表切片属于浅拷贝</p>\n<p>5,闭包</p>\n<p>闭包:外函数包含内函数,在高阶函数之上,对函数功能进行扩展,一般在装饰器情况下写闭包.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1, __new__和__init__的区别</p>\n<p>__new__负责进行对象的创建,__init__负责进行对象的初始化</p>\n<p>3, django和flask的区别?<br>答:<br>django:<br>①自带数据库管理app<br>②Python Web框架的先驱,第三方库丰富<br>③,上手容易开发文档详细,完善,资料丰富</p>\n<p>flask:<br>①适用于做小型网站及web服务的api,开发大型网站无压力.架构需自行设计<br>②与关系型数据库的结构不弱于django,与非关系型数据库的结合远远强于django,</p>\n<p>4,面向对象?<br>简称oop,把对象当做一个程序的基本单元,一个对象包含数据和操作数据的函数,提高了编程的效率,使其编程的重用性增高.<br>三大特点:<br>封装:把需要重用的函数或功能封装起来,方便其他程序直接调用,<br>继承 :子类继承父类,子类和父类拥有相同的方法和属性,子类会覆盖父类的方法和属性<br>多态:提高函数的健壮性和可扩展性,父类声明指向子类实现</p>\n<p>5,如何提高Python的运行效率?<br>①使用生成器,节省大量内存<br>②针对循环优化,避免过多重复代码的执行<br>③核心代码用Cython,PyPy等,提高效率<br>④多进程,多线程,协程<br>⑤多个if else条件判断,可以把最有可能发生的条件放最前面写,减少程序判断次数,提高效率</p>\n<p>6,描述数据,链表,队列,堆栈的区别?<br>答:数组和链表是数据存储方式的概念,数组在连续的自然空间中存储,链表在非连续的自然空间中存储<br>队列和堆栈是描述数据存储方式的概念,<br>队列是先进先出,堆栈是后进先出,堆栈和队列可以用数组表示,也可以用链表表示,<br>堆和栈<br>内存:<br>栈:内存小,速度快,有序,简单的数据类型放到栈里<br>堆:内存大,速度慢,无序,复杂的数据类型放到堆里</p>\n<p>7,线程和进程?<br>线程:1,CPU进行资源分配和调度的基本单位,线程是进程的一部分,是比进程更小的能够独立运行的基本单位,一个进程下的多个线程可以共享该进程的所有资源<br>2,如果IO操作密集,则可以多个线程运行,效率高,缺点是如果一个线程崩溃,就会造成进程崩溃</p>\n<p>进程:1,操作系统进行资源分配和调度的基本单位,多个进程之间相互独立<br>2,稳定性好,如果一个进程崩溃,不影响其他进程,但是进程消耗资源大,开启的进程数量有限</p>\n<p>8,*args和**kw区别?<br>*args和**kw属于不定长参数<br>*args返回值为元组类型,**kw返回值为字典类型</p>\n<p>9,&#x3D;和&#x3D;&#x3D;的区别?<br>&#x3D;:表示赋值.将某一数值赋值 给变量<br>&#x3D;&#x3D;:表示判断是否相等,返回True或者False,相等True,不相等False</p>\n<p>TCP&#x2F;UDP&#x2F;HTTP&#x2F;HTTPS的区别? TCP协议:是一种面向连接,可靠的,基于字节流的传输层协议,在正式通信前必须和对方建立连接,一个tcp必须经过三次对话才能建立连接,在经历4次对话结束(即三握四挥),传输可靠,速度慢,应用,传输大量数据,对可靠性要求高</p>\n<p>UDP协议:用于www浏览的协议,特点是客户端发送的请求都需要服务器回送响应,在请求结束后会主动释放连接,从建立连接到关闭连接的过程成为”一次连接” 注: 1)在http1.0中客户端的每次请求都要求建立一次单独的连接,在处理完本次请求后就自动释放连接 2)在http1.1中,则可以在一次连接中处理多次请求,并可重叠进行,不需要等一个请求结束后再发下一个请求</p>\n<p>HTTP&#x2F;HTTPS协议 HTTP协议:超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP&#x2F;IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种 发布和接收HTML页面的方法。<br>HTTPS协议: HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL&#x2F;TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。</p>\n<p>next()和iter()的区别?<br>我们一般通过iter()函数获取可迭代对象的迭代器,通过对获取到的迭代器不断的通过next函数 进行获取下一条数据,iter()函数 实际上就是调用了可迭代对象的__iter__方法</p>\n<p>11,斐波那契数列<br>items &#x3D; int(input(“请输入斐波那契数列的个数:”))<br>fibs &#x3D; [0,1]<br>for i in range(item - 1):<br>    fibs.append(fibs[-2] + fibs[-1])<br>print(“斐波那契数列为:”,fibsp[1:])</p>\n<p>12,冒泡排序<br>def bubblesort(list):<br>    for i in range(len(lsit)):<br>        for j in range(len(list)-i-1):<br>            if list[j]&gt;list[j+1]:<br>                list[j],list[j+1] &#x3D; list[j+1],list[j]<br>    return list</p>\n<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    #用户输入<br>    str &#x3D; input(“请输入数字(用逗号隔开)”)<br>    list &#x3D; [int(i) for i in str.split(‘,’)]<br>    print(bubblesort(list))</p>\n<p>13, mysql索引<br><a href=\"https://www.cnblogs.com/jiuya/p/10023483.html\">mysql索引的详细说明</a><br>普通索引:<br>是最基本的索引,没有任何限制<br>唯一索引:<br>索引列的值必须唯一,但允许有空值,如果是组合索引,则列值的组合必须唯一<br>主键索引:<br>一个表只能有一个主键,不允许有空值,一般在建表的同时创建主键索引<br>组合索引:<br>指多个字段上创建的索引,只有在查询条件中使用了创建索引时的第一个字段,索引才会被使用.使用组合索引时遵循最左前缀集合<br>全文索引:<br>主要是用来查找文本中的关键字,而不是直接与索引中的值相比较.</p>\n<p>14, 类方法,静态方法,实例方法的区别<br>实例方法主要用于在类中封装一个额外的功能<br>第一个参数必须是self,一般情况下只能用实例化对象调用,不能用类调用,如果要用类调用,需要将实例化对象传递给self.<br>静态方法,主要用于在类中封装一个额外的功能,创建时用@staticmethod装饰器装饰,声明为静态函数,可以用类调用也可以用实例化对象调用<br>类方法主要是将类作为参数传递,相当于将类当成了对象,可以调用该类中的所有方法,创建时用@classmethod装饰器装饰,声明为类函数,第一个参数必须是cls,可以用类调用也可以用实例化对象调用.</p>\n<p>代码展示:<br>class A(object):<br>    #构造函数<br>    def <strong>init</strong>(self,title1):<br>        self.title &#x3D; title1<br>        print(self.title)<br>    #实例函数<br>    def foo(self,title2):<br>        print(title2)<br>   #静态函数<br>    @staticmethod<br>    def  static_foo():<br>        print(“静态方法”)<br>    #类方法<br>    @classmethod<br>    def cls_foo(cls):<br>        cls.foo(a,’类函数调用实例函数’)<br>        print(‘类方法’)</p>\n<p>15, collections库中的counter统计元素个数，</p>\n<p>16，列表合并<br>a.extend(b)</p>\n<p>17,字典合并<br>dic1.update(dic2)<br>删除 字典<br>del dic[‘sex’]</p>\n<p>18,迭代器和生成器的区别<br>迭代器:for循环遍历取值的过程<br>生成器:用yield关键字来返回值的函数成为生成器函数</p>\n<p>19,<br>del:按索引删除元素<br>remove:默认删除第一个元素<br>pop:默认删除最后一个元素或者根据索引值删除索引</p>\n<p>20,装饰器:将函数作为参数传递,在不改变源代码的情况下扩展函数功能<br>def funA(fn):<br>    pass<br>@funA<br>def fun():<br>    print(‘a’)<br>fun()</p>\n<p>21,闭包:外函数包含内函数,在高阶函数之上对函数功能进行扩展,一般在装饰器下写闭包</p>\n<p>22,set集合去重的原理<br>set集合去重主要是通过函数__hash__和__eq__结合实现的<br>①当两个变量的哈希值不相同时,就认为两个变量时不相同的<br>②当两个变量哈希值一样时,调用__eq__方法,当返回值为True时认为两个变量时同一个,应该去除一个,返回FALSE时,不去重</p>\n<p>23.python中的gil锁<br>GIl是python的全局解释器锁,同一进程中加入有多个线程运行,一个线程在运行python程序的时候会霸占python解释器,也就是加了一把锁(GIL),使该进程内其他线程无法运行,等该线程运行完成后其他线程才能运行</p>\n<p>25,分别从前端,后端,数据库阐述web项目的性能优化</p>\n<p>前端优化:</p>\n<p>①,减少http请求,例如制作精灵图</p>\n<p>②,html和CSS放在页面上部,javascript放在页面下部</p>\n<p>后端优化:</p>\n<p>①,缓存存储读写次数高,变化少的数据,</p>\n<p>②,异步方式,如果有耗时操作,可采用异步,如celery</p>\n<p>③,代码优化,避免循环和判断次数太多,如果多个if else判断,优先判断最有可能发生的情况</p>\n<p>数据库优化:</p>\n<p>①,如有条件,数据可以存放于redis,读取速度快,</p>\n<p>②,建立索引,外键等</p>\n<p>26, 常见转态码和意义</p>\n<p>200 OK: 请求正常处理完毕</p>\n<p>204 No Content: 请求成功处理，没有实体的主体返回</p>\n<p>206 Partial Content: GET范围请求已成功处理</p>\n<p>301 Moved Permanently: 永久重定向，资源已永久分配新URI</p>\n<p>302 Found: 临时重定向，资源已临时分配新URI</p>\n<p>303 See Other: 临时重定向，期望使用GET定向获取</p>\n<p>304 Not Modified: 发送的附带条件请求未满足</p>\n<p>307 Temporary Redirect: 临时重定向，POST不会变成GET</p>\n<p>400 Bad Request: 请求报文语法错误或者参数错误</p>\n<p>401 Unauthorized: 需要通过HTTP认证，或认证失败</p>\n<p>403 Forbidden: 请求资源被拒绝</p>\n<p>404 Not Found: 无法找到请求资源(服务器无理由拒绝)</p>\n<p>500 Internal Server Error: 服务器故障或Web应用故障</p>\n<p>503 Service Unavailable: 服务器超负载或停机维护</p>\n<p>27, django生命周期?</p>\n<p>从用户输入url到用户看到网页的整个过程。</p>\n<ol>\n<li><p>用户输入网址，浏览器发起请求</p>\n</li>\n<li><p>WSGI（服务器网关接口）创建socket服务端，接受请求</p>\n</li>\n</ol>\n<p>3）中间件处理请求</p>\n<p>4）url路由，根据当前请求的url找到相应的视图函数</p>\n<p>5）进入view，进行业务处理，执行类或者函数，返回字符串</p>\n<p>6）再次通过中间件处理相应的请求</p>\n<p>7）WSGI返回响应</p>\n<p>8）浏览器渲染</p>\n<p>1,深拷贝,浅拷贝的区别?</p>\n<p>深拷贝: 外部元素和内部元素都拷贝了对象本身,而不是引用,把对象复制一遍,对象中引用的其他对象也复制</p>\n<p>浅拷贝:拷贝了最外围对象本身,内部元素知识拷贝了一个引用,也就是说,把对象复制一遍,该对象引用的其他对象不复制.</p>\n<p>2,python的垃圾回收机制?</p>\n<p>① 在python语言内部,当一个对象的引用计数是0时,它将被垃圾收集机制处理掉</p>\n<p>② 当遇到两个对象a和b相互引用时的情况,del语句可以减少a和b的引用计数,并销毁用于底层对象的名称,需要注意的是,并不是每个对象都包含一个对其他对象的应用,所以这种情况下引用计数不会归0,对象也不会被销毁,这就是可能会导致内存泄露,所以为了解决这问题,解释器会定期执行一个循环检测器,搜索不可访问对象的循环并进行删除.</p>\n<p>3,可变和不可变数据类型</p>\n<p>不可变:数值型,字符串型,和元组</p>\n<p>可变:列表和字典</p>\n<p>不可变原因: 如果变量值发生了变化,相当于新建一个对象,而对于相同值的对象,在内存中只有一个地址</p>\n<p>可变原因.如果对对象进行了添加,修改等操作之后,只是改变了变量的值,而不会新建一个对象,变量引用的对象的地址也不会发生变化,不过相对于相同值的不同对象,即每个对象都有自己的地址.</p>\n<p>去重:集合去重,</p>\n<p>4,列表切片属于浅拷贝</p>\n<p>5,闭包</p>\n<p>闭包:外函数包含内函数,在高阶函数之上,对函数功能进行扩展,一般在装饰器情况下写闭包.</p>\n"},{"title":"python第三方模块整理","comments":1,"copyright":true,"abbrlink":"f6e83c4a","date":"2022-08-29T11:45:43.000Z","_content":"\n1.必装模块pypiwin32 wheel:主要是为了装whl文件\n\n2,pyinstaller:将python文件转化为exe文件\n进入py文件目录下:cmd --->pyinstaller -F 文件名.py\n\n3,虚拟机教程\n安装:pip install -U virtualenv\n设置虚拟路径:virtualenv -p d:\\dev\\python\\python36\\python.exe\\py36\n进入虚拟环境:cd py36\\scripts\n启动:activate\n\n4,pip文件的配置\npip文件的配置\n\n内容:\n[global]\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple\n\n5, pyc文件的编译\npython -m py_compile 文件名.py\npyo文件的编译:\npython -O -m py_compile 文件名.py\n\n6,Beautiful Soup:\n用于数据收集的Python库:\n这个是一个HTML和XML解析器,可用于从web页面中提取数据,这个过程叫做网页抓取\n\n7,Scrapy:这是一个用于大规模网页抓取的框架,提供所有需要的工具有效的从网站中抓取数据,以使用者偏好的结构和格式存储数据\n\n8,Selenium:这是一个倍受欢迎的自动化浏览器工具,在业界常用于测试,但对于网页抓取也非常方便\n\n9,**用于数据清理和数据操作的Python库\n**\npandas:主要用于数据操作和数据分析\n\n10:numpy:这是一个开源库,引入了支持大型多维数组和矩阵的函数\n\n11,PyOD:一个全面的,可伸缩的Python工具包,用于检测外围对象\n\n12,用于数据可视化的Python库\nMatplotlib:这是Python中最流行的数据可视化库,允许生成和构建各种各样的图\n\n13,Seaborn:另一个基于Matplotlib的绘图库为绘制有吸引力的图像而提供高级接口\n\n14,用于建模的Python库\nScikit-learn:它是Python建模中的佼佼者,支持机器学习中执行的不同操作,如分类,回归,聚类和模型选择等\n\n15,Tensorflow:这是一个流行的深度学习库,提供模型构建,机器学习生产及强大的实验工具和库\n\n16,用于数据解释型的Python库\nLIME:这是一种算法(库),可以解释任何分类器或回归量的预测\n\n17,H2O:通过可视化提供机器学习可解释性(MLI)说明建模结构和模型中特征的影响\n\n18,用于音频处理的Python库:\nLibROSA:一个用于音乐和音频分析的Python库,提供了创建音乐信息检索系统所需的构建块\n\n19,pyAudioAnalysis:一个用于音频特征提取,分类和分段的Python库,涵盖广泛的音频分析任务\n\n20,用于图像处理的Python库\nOpenCV-Python:用于图像处理的Python API,主要用于解决计算机视觉问题\n\n21,Scikit-image:可执行多个不同图像处理任务的算法集合,用于图像分割,几何变换,色彩空间操作等等\n\n22,Pillow:它是从Python Imaging Library 中派生出来的,可以执行逐像素操作掩模和透明处理等等\n\n用于部署的Python库\n23,django:Python web框架的先驱,大而全,功能及其强大,非常适合企业级网站的开发\n\n24,flask:一个用Python编写的Web框架,小巧,灵活,非常适用于小型网站\n","source":"_posts/python第三方模块整理.md","raw":"---\ntitle: python第三方模块整理\ncomments: true\ncopyright: true\ntags:\n  - python\n  - 第三方库\ncategories:\n  - 第三方库\nabbrlink: f6e83c4a\ndate: 2022-08-29 19:45:43\n---\n\n1.必装模块pypiwin32 wheel:主要是为了装whl文件\n\n2,pyinstaller:将python文件转化为exe文件\n进入py文件目录下:cmd --->pyinstaller -F 文件名.py\n\n3,虚拟机教程\n安装:pip install -U virtualenv\n设置虚拟路径:virtualenv -p d:\\dev\\python\\python36\\python.exe\\py36\n进入虚拟环境:cd py36\\scripts\n启动:activate\n\n4,pip文件的配置\npip文件的配置\n\n内容:\n[global]\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple\n\n5, pyc文件的编译\npython -m py_compile 文件名.py\npyo文件的编译:\npython -O -m py_compile 文件名.py\n\n6,Beautiful Soup:\n用于数据收集的Python库:\n这个是一个HTML和XML解析器,可用于从web页面中提取数据,这个过程叫做网页抓取\n\n7,Scrapy:这是一个用于大规模网页抓取的框架,提供所有需要的工具有效的从网站中抓取数据,以使用者偏好的结构和格式存储数据\n\n8,Selenium:这是一个倍受欢迎的自动化浏览器工具,在业界常用于测试,但对于网页抓取也非常方便\n\n9,**用于数据清理和数据操作的Python库\n**\npandas:主要用于数据操作和数据分析\n\n10:numpy:这是一个开源库,引入了支持大型多维数组和矩阵的函数\n\n11,PyOD:一个全面的,可伸缩的Python工具包,用于检测外围对象\n\n12,用于数据可视化的Python库\nMatplotlib:这是Python中最流行的数据可视化库,允许生成和构建各种各样的图\n\n13,Seaborn:另一个基于Matplotlib的绘图库为绘制有吸引力的图像而提供高级接口\n\n14,用于建模的Python库\nScikit-learn:它是Python建模中的佼佼者,支持机器学习中执行的不同操作,如分类,回归,聚类和模型选择等\n\n15,Tensorflow:这是一个流行的深度学习库,提供模型构建,机器学习生产及强大的实验工具和库\n\n16,用于数据解释型的Python库\nLIME:这是一种算法(库),可以解释任何分类器或回归量的预测\n\n17,H2O:通过可视化提供机器学习可解释性(MLI)说明建模结构和模型中特征的影响\n\n18,用于音频处理的Python库:\nLibROSA:一个用于音乐和音频分析的Python库,提供了创建音乐信息检索系统所需的构建块\n\n19,pyAudioAnalysis:一个用于音频特征提取,分类和分段的Python库,涵盖广泛的音频分析任务\n\n20,用于图像处理的Python库\nOpenCV-Python:用于图像处理的Python API,主要用于解决计算机视觉问题\n\n21,Scikit-image:可执行多个不同图像处理任务的算法集合,用于图像分割,几何变换,色彩空间操作等等\n\n22,Pillow:它是从Python Imaging Library 中派生出来的,可以执行逐像素操作掩模和透明处理等等\n\n用于部署的Python库\n23,django:Python web框架的先驱,大而全,功能及其强大,非常适合企业级网站的开发\n\n24,flask:一个用Python编写的Web框架,小巧,灵活,非常适用于小型网站\n","slug":"python第三方模块整理","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpy001181nv77zye7u3","content":"<p>1.必装模块pypiwin32 wheel:主要是为了装whl文件</p>\n<p>2,pyinstaller:将python文件转化为exe文件<br>进入py文件目录下:cmd —&gt;pyinstaller -F 文件名.py</p>\n<p>3,虚拟机教程<br>安装:pip install -U virtualenv<br>设置虚拟路径:virtualenv -p d:\\dev\\python\\python36\\python.exe\\py36<br>进入虚拟环境:cd py36\\scripts<br>启动:activate</p>\n<p>4,pip文件的配置<br>pip文件的配置</p>\n<p>内容:<br>[global]<br>index-url&#x3D;<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>\n<p>5, pyc文件的编译<br>python -m py_compile 文件名.py<br>pyo文件的编译:<br>python -O -m py_compile 文件名.py</p>\n<p>6,Beautiful Soup:<br>用于数据收集的Python库:<br>这个是一个HTML和XML解析器,可用于从web页面中提取数据,这个过程叫做网页抓取</p>\n<p>7,Scrapy:这是一个用于大规模网页抓取的框架,提供所有需要的工具有效的从网站中抓取数据,以使用者偏好的结构和格式存储数据</p>\n<p>8,Selenium:这是一个倍受欢迎的自动化浏览器工具,在业界常用于测试,但对于网页抓取也非常方便</p>\n<p>9,**用于数据清理和数据操作的Python库<br>**<br>pandas:主要用于数据操作和数据分析</p>\n<p>10:numpy:这是一个开源库,引入了支持大型多维数组和矩阵的函数</p>\n<p>11,PyOD:一个全面的,可伸缩的Python工具包,用于检测外围对象</p>\n<p>12,用于数据可视化的Python库<br>Matplotlib:这是Python中最流行的数据可视化库,允许生成和构建各种各样的图</p>\n<p>13,Seaborn:另一个基于Matplotlib的绘图库为绘制有吸引力的图像而提供高级接口</p>\n<p>14,用于建模的Python库<br>Scikit-learn:它是Python建模中的佼佼者,支持机器学习中执行的不同操作,如分类,回归,聚类和模型选择等</p>\n<p>15,Tensorflow:这是一个流行的深度学习库,提供模型构建,机器学习生产及强大的实验工具和库</p>\n<p>16,用于数据解释型的Python库<br>LIME:这是一种算法(库),可以解释任何分类器或回归量的预测</p>\n<p>17,H2O:通过可视化提供机器学习可解释性(MLI)说明建模结构和模型中特征的影响</p>\n<p>18,用于音频处理的Python库:<br>LibROSA:一个用于音乐和音频分析的Python库,提供了创建音乐信息检索系统所需的构建块</p>\n<p>19,pyAudioAnalysis:一个用于音频特征提取,分类和分段的Python库,涵盖广泛的音频分析任务</p>\n<p>20,用于图像处理的Python库<br>OpenCV-Python:用于图像处理的Python API,主要用于解决计算机视觉问题</p>\n<p>21,Scikit-image:可执行多个不同图像处理任务的算法集合,用于图像分割,几何变换,色彩空间操作等等</p>\n<p>22,Pillow:它是从Python Imaging Library 中派生出来的,可以执行逐像素操作掩模和透明处理等等</p>\n<p>用于部署的Python库<br>23,django:Python web框架的先驱,大而全,功能及其强大,非常适合企业级网站的开发</p>\n<p>24,flask:一个用Python编写的Web框架,小巧,灵活,非常适用于小型网站</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.必装模块pypiwin32 wheel:主要是为了装whl文件</p>\n<p>2,pyinstaller:将python文件转化为exe文件<br>进入py文件目录下:cmd —&gt;pyinstaller -F 文件名.py</p>\n<p>3,虚拟机教程<br>安装:pip install -U virtualenv<br>设置虚拟路径:virtualenv -p d:\\dev\\python\\python36\\python.exe\\py36<br>进入虚拟环境:cd py36\\scripts<br>启动:activate</p>\n<p>4,pip文件的配置<br>pip文件的配置</p>\n<p>内容:<br>[global]<br>index-url&#x3D;<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>\n<p>5, pyc文件的编译<br>python -m py_compile 文件名.py<br>pyo文件的编译:<br>python -O -m py_compile 文件名.py</p>\n<p>6,Beautiful Soup:<br>用于数据收集的Python库:<br>这个是一个HTML和XML解析器,可用于从web页面中提取数据,这个过程叫做网页抓取</p>\n<p>7,Scrapy:这是一个用于大规模网页抓取的框架,提供所有需要的工具有效的从网站中抓取数据,以使用者偏好的结构和格式存储数据</p>\n<p>8,Selenium:这是一个倍受欢迎的自动化浏览器工具,在业界常用于测试,但对于网页抓取也非常方便</p>\n<p>9,**用于数据清理和数据操作的Python库<br>**<br>pandas:主要用于数据操作和数据分析</p>\n<p>10:numpy:这是一个开源库,引入了支持大型多维数组和矩阵的函数</p>\n<p>11,PyOD:一个全面的,可伸缩的Python工具包,用于检测外围对象</p>\n<p>12,用于数据可视化的Python库<br>Matplotlib:这是Python中最流行的数据可视化库,允许生成和构建各种各样的图</p>\n<p>13,Seaborn:另一个基于Matplotlib的绘图库为绘制有吸引力的图像而提供高级接口</p>\n<p>14,用于建模的Python库<br>Scikit-learn:它是Python建模中的佼佼者,支持机器学习中执行的不同操作,如分类,回归,聚类和模型选择等</p>\n<p>15,Tensorflow:这是一个流行的深度学习库,提供模型构建,机器学习生产及强大的实验工具和库</p>\n<p>16,用于数据解释型的Python库<br>LIME:这是一种算法(库),可以解释任何分类器或回归量的预测</p>\n<p>17,H2O:通过可视化提供机器学习可解释性(MLI)说明建模结构和模型中特征的影响</p>\n<p>18,用于音频处理的Python库:<br>LibROSA:一个用于音乐和音频分析的Python库,提供了创建音乐信息检索系统所需的构建块</p>\n<p>19,pyAudioAnalysis:一个用于音频特征提取,分类和分段的Python库,涵盖广泛的音频分析任务</p>\n<p>20,用于图像处理的Python库<br>OpenCV-Python:用于图像处理的Python API,主要用于解决计算机视觉问题</p>\n<p>21,Scikit-image:可执行多个不同图像处理任务的算法集合,用于图像分割,几何变换,色彩空间操作等等</p>\n<p>22,Pillow:它是从Python Imaging Library 中派生出来的,可以执行逐像素操作掩模和透明处理等等</p>\n<p>用于部署的Python库<br>23,django:Python web框架的先驱,大而全,功能及其强大,非常适合企业级网站的开发</p>\n<p>24,flask:一个用Python编写的Web框架,小巧,灵活,非常适用于小型网站</p>\n"},{"title":"ros系统学习笔记","comments":1,"copyright":true,"Categories":["ros"],"abbrlink":"3e9342ec","date":"2022-08-29T12:48:52.000Z","_content":"\n[视频链接](https://www.bilibili.com/video/BV1qV41167d2?p=1)\n\n环境安装说明:\n\n 安装链接:\n\n \t [ROS安装](https://www.guyuehome.com/33971)\n\n类似错误修复链接:\n\n\t[大部分错误针对修改有效](https://blog.csdn.net/qq_44830040/article/details/106049992)\n\n安装步骤:\n\n1,配置Ubuntu系统\n打开软件中心,允许以下三种软件源\n①restricted（不完全的自由软件）\n②universe（Ubuntu官方不提供支持与补丁，全靠社区支持）\n③multiverse（非自由软件，完全不提供支持和补丁）这三种软件源\n下载地址:Download from为阿里云\nhttp://mirrors.aliyun.com/ubuntu\n\n2,打开终端,添加软件源\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n\n\t2.1\n\t\n\t\t\t使用国内的镜像源,提高下载速度:(以下任意一个)\n\t\n\t             sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list'\n\t\n\t             sudo sh -c '. /etc/lsb-release && echo \"deb http://mirror.sysu.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list'\n\t\n\t            sudo sh -c '. /etc/lsb-release && echo \"deb http://ros.exbot.net/rospackage/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list'\n\n\n\n3,添加密钥(以下任意一个)\nsudo apt-key adv ——keyserver hkp://ha.pool.sks-keyservers.net:80 ——recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n\nsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\n\n4,更新添加的软件源\nsudo apt-get update\n\n5,下载ros版本\nsudo apt-get install ros-kinetic-desktop-full\n\n6,初始化\nsudo rosdep init\n\n7,更新(实在不行此命令执行5~6次后可以忽略,暂时无影响)\nrosdep update\n\n8,设置ros环境变量,路径为home下ctrl + h打开隐藏文件就可看到\n\necho \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\n\nsource ~/.bashrc\n\n9,运行:roscore\n\n三,测试是否安装成功\n[链接地址](https://blog.csdn.net/dd_Mr/article/details/114323752)\n\n①在终端运行以下命令开启ros\nroscore\n②打开一个新终端运行以下命令打开小乌龟窗口\nrosrun turtlesim turtlesim_node\n③打开新终端运行以下命令通过键盘控制小乌龟运动\nrosrun turtlesim turtle_teleop_key\n④打开新终端运行以下命令,看到ros的图形化界面,展示节点的关系,若终端无报错说明安装成功\nrosrun rqt_graph rqt_graph\n\n四,Ubuntu16.04上安装kitti2bag\n[链接地址](https://blog.csdn.net/weixin_38636815/article/details/108376178)\n\n①安装依赖包\nsudo pip install pandas==0.23.0 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n\nsudo pip install pykitti -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\nsudo pip install kitti2bag  -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\n②安装kitti2bag包\nsudo pip install kitti2bag\n\n五,kitti2bag包对kitti数据集的处理\n[数据集链接:](https://pan.baidu.com/s/1dpGDeYXYHHKtjmfX1IsVZw)\n密码:oqym\n\n打开下载的数据集,在2011_09_26目录的上一层目录下执行指令：\nkitti2bag -t 2011_09_26 -r 0005 raw_synced .\n\n生成一个ros可执行包:kitti_2011_09_26_drive_0005_synced.bag\n\n执行以下命令打开图像可视化软件:\nrqt_bag kitti_2011_09_26_drive_0005_synced.bag\n\n读取图片:在文件上右键 ---> View ---> Image:\n点击播放按钮一帧一帧的读取图片,一共15秒\n\n缺点:只能读取图片,不能进行点云的读取\n\n六:通过程序对kitti数据集进行处理\n1,建立目录catkin_ws/src\n2,在src目录下建包\ncatkin_create_pkg 包名(kitti_tutorial) rospy\n3,进入包kitti_tutorial下建立资料夹:\ncatkin_make\n4,在包下的src文件中编写程序,环境为python2,程序中无法写入中文,会报错,程序采用的是ASCII编码形式\n5,程序完成后进入catkin_ws/src目录下执行以下命令:\nroscd 包名(kitti_tutorial)/src\n\nchmod +x 主程序(kitti.py)\n\nrosrun 包名(kitti_tutorial) 主程序(kitti.py)\n\n在新终端运行ros:\nroscore\n\n在新终端打开rviz:\nrviz\n\n在rviz中运行:\nadd ---> By topic(选择要运行的,例如图片,云点图,imu等)\n\n保存:选择file--->save config as ---> 文件名 \n","source":"_posts/ros系统学习笔记.md","raw":"---\ntitle: ros系统学习笔记\ncomments: true\ncopyright: true\ntags:\n  - linix\n  - ros\nCategories:\n  - ros\nabbrlink: 3e9342ec\ndate: 2022-08-29 20:48:52\n---\n\n[视频链接](https://www.bilibili.com/video/BV1qV41167d2?p=1)\n\n环境安装说明:\n\n 安装链接:\n\n \t [ROS安装](https://www.guyuehome.com/33971)\n\n类似错误修复链接:\n\n\t[大部分错误针对修改有效](https://blog.csdn.net/qq_44830040/article/details/106049992)\n\n安装步骤:\n\n1,配置Ubuntu系统\n打开软件中心,允许以下三种软件源\n①restricted（不完全的自由软件）\n②universe（Ubuntu官方不提供支持与补丁，全靠社区支持）\n③multiverse（非自由软件，完全不提供支持和补丁）这三种软件源\n下载地址:Download from为阿里云\nhttp://mirrors.aliyun.com/ubuntu\n\n2,打开终端,添加软件源\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n\n\t2.1\n\t\n\t\t\t使用国内的镜像源,提高下载速度:(以下任意一个)\n\t\n\t             sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list'\n\t\n\t             sudo sh -c '. /etc/lsb-release && echo \"deb http://mirror.sysu.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list'\n\t\n\t            sudo sh -c '. /etc/lsb-release && echo \"deb http://ros.exbot.net/rospackage/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list'\n\n\n\n3,添加密钥(以下任意一个)\nsudo apt-key adv ——keyserver hkp://ha.pool.sks-keyservers.net:80 ——recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n\nsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\n\n4,更新添加的软件源\nsudo apt-get update\n\n5,下载ros版本\nsudo apt-get install ros-kinetic-desktop-full\n\n6,初始化\nsudo rosdep init\n\n7,更新(实在不行此命令执行5~6次后可以忽略,暂时无影响)\nrosdep update\n\n8,设置ros环境变量,路径为home下ctrl + h打开隐藏文件就可看到\n\necho \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\n\nsource ~/.bashrc\n\n9,运行:roscore\n\n三,测试是否安装成功\n[链接地址](https://blog.csdn.net/dd_Mr/article/details/114323752)\n\n①在终端运行以下命令开启ros\nroscore\n②打开一个新终端运行以下命令打开小乌龟窗口\nrosrun turtlesim turtlesim_node\n③打开新终端运行以下命令通过键盘控制小乌龟运动\nrosrun turtlesim turtle_teleop_key\n④打开新终端运行以下命令,看到ros的图形化界面,展示节点的关系,若终端无报错说明安装成功\nrosrun rqt_graph rqt_graph\n\n四,Ubuntu16.04上安装kitti2bag\n[链接地址](https://blog.csdn.net/weixin_38636815/article/details/108376178)\n\n①安装依赖包\nsudo pip install pandas==0.23.0 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n\nsudo pip install pykitti -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\nsudo pip install kitti2bag  -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\n②安装kitti2bag包\nsudo pip install kitti2bag\n\n五,kitti2bag包对kitti数据集的处理\n[数据集链接:](https://pan.baidu.com/s/1dpGDeYXYHHKtjmfX1IsVZw)\n密码:oqym\n\n打开下载的数据集,在2011_09_26目录的上一层目录下执行指令：\nkitti2bag -t 2011_09_26 -r 0005 raw_synced .\n\n生成一个ros可执行包:kitti_2011_09_26_drive_0005_synced.bag\n\n执行以下命令打开图像可视化软件:\nrqt_bag kitti_2011_09_26_drive_0005_synced.bag\n\n读取图片:在文件上右键 ---> View ---> Image:\n点击播放按钮一帧一帧的读取图片,一共15秒\n\n缺点:只能读取图片,不能进行点云的读取\n\n六:通过程序对kitti数据集进行处理\n1,建立目录catkin_ws/src\n2,在src目录下建包\ncatkin_create_pkg 包名(kitti_tutorial) rospy\n3,进入包kitti_tutorial下建立资料夹:\ncatkin_make\n4,在包下的src文件中编写程序,环境为python2,程序中无法写入中文,会报错,程序采用的是ASCII编码形式\n5,程序完成后进入catkin_ws/src目录下执行以下命令:\nroscd 包名(kitti_tutorial)/src\n\nchmod +x 主程序(kitti.py)\n\nrosrun 包名(kitti_tutorial) 主程序(kitti.py)\n\n在新终端运行ros:\nroscore\n\n在新终端打开rviz:\nrviz\n\n在rviz中运行:\nadd ---> By topic(选择要运行的,例如图片,云点图,imu等)\n\n保存:选择file--->save config as ---> 文件名 \n","slug":"ros系统学习笔记","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpz001581nv8ub27g9n","content":"<p><a href=\"https://www.bilibili.com/video/BV1qV41167d2?p=1\">视频链接</a></p>\n<p>环境安装说明:</p>\n<p> 安装链接:</p>\n<pre><code>  [ROS安装](https://www.guyuehome.com/33971)\n</code></pre>\n<p>类似错误修复链接:</p>\n<pre><code>[大部分错误针对修改有效](https://blog.csdn.net/qq_44830040/article/details/106049992)\n</code></pre>\n<p>安装步骤:</p>\n<p>1,配置Ubuntu系统<br>打开软件中心,允许以下三种软件源<br>①restricted（不完全的自由软件）<br>②universe（Ubuntu官方不提供支持与补丁，全靠社区支持）<br>③multiverse（非自由软件，完全不提供支持和补丁）这三种软件源<br>下载地址:Download from为阿里云<br><a href=\"http://mirrors.aliyun.com/ubuntu\">http://mirrors.aliyun.com/ubuntu</a></p>\n<p>2,打开终端,添加软件源<br>sudo sh -c ‘echo “deb <a href=\"http://packages.ros.org/ros/ubuntu\">http://packages.ros.org/ros/ubuntu</a> $(lsb_release -sc) main” &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ros-latest.list’</p>\n<pre><code>2.1\n\n        使用国内的镜像源,提高下载速度:(以下任意一个)\n\n             sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;\n\n             sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirror.sysu.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;\n\n            sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://ros.exbot.net/rospackage/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;\n</code></pre>\n<p>3,添加密钥(以下任意一个)<br>sudo apt-key adv ——keyserver hkp:&#x2F;&#x2F;ha.pool.sks-keyservers.net:80 ——recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</p>\n<p>sudo apt-key adv –keyserver ‘hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80’ –recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</p>\n<p>4,更新添加的软件源<br>sudo apt-get update</p>\n<p>5,下载ros版本<br>sudo apt-get install ros-kinetic-desktop-full</p>\n<p>6,初始化<br>sudo rosdep init</p>\n<p>7,更新(实在不行此命令执行5~6次后可以忽略,暂时无影响)<br>rosdep update</p>\n<p>8,设置ros环境变量,路径为home下ctrl + h打开隐藏文件就可看到</p>\n<p>echo “source &#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;setup.bash” &gt;&gt; ~&#x2F;.bashrc</p>\n<p>source ~&#x2F;.bashrc</p>\n<p>9,运行:roscore</p>\n<p>三,测试是否安装成功<br><a href=\"https://blog.csdn.net/dd_Mr/article/details/114323752\">链接地址</a></p>\n<p>①在终端运行以下命令开启ros<br>roscore<br>②打开一个新终端运行以下命令打开小乌龟窗口<br>rosrun turtlesim turtlesim_node<br>③打开新终端运行以下命令通过键盘控制小乌龟运动<br>rosrun turtlesim turtle_teleop_key<br>④打开新终端运行以下命令,看到ros的图形化界面,展示节点的关系,若终端无报错说明安装成功<br>rosrun rqt_graph rqt_graph</p>\n<p>四,Ubuntu16.04上安装kitti2bag<br><a href=\"https://blog.csdn.net/weixin_38636815/article/details/108376178\">链接地址</a></p>\n<p>①安装依赖包<br>sudo pip install pandas&#x3D;&#x3D;0.23.0 -i <a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a> –trusted-host pypi.douban.com</p>\n<p>sudo pip install pykitti -i <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host pypi.douban.com</p>\n<p>sudo pip install kitti2bag  -i <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host pypi.douban.com</p>\n<p>②安装kitti2bag包<br>sudo pip install kitti2bag</p>\n<p>五,kitti2bag包对kitti数据集的处理<br><a href=\"https://pan.baidu.com/s/1dpGDeYXYHHKtjmfX1IsVZw\">数据集链接:</a><br>密码:oqym</p>\n<p>打开下载的数据集,在2011_09_26目录的上一层目录下执行指令：<br>kitti2bag -t 2011_09_26 -r 0005 raw_synced .</p>\n<p>生成一个ros可执行包:kitti_2011_09_26_drive_0005_synced.bag</p>\n<p>执行以下命令打开图像可视化软件:<br>rqt_bag kitti_2011_09_26_drive_0005_synced.bag</p>\n<p>读取图片:在文件上右键 —&gt; View —&gt; Image:<br>点击播放按钮一帧一帧的读取图片,一共15秒</p>\n<p>缺点:只能读取图片,不能进行点云的读取</p>\n<p>六:通过程序对kitti数据集进行处理<br>1,建立目录catkin_ws&#x2F;src<br>2,在src目录下建包<br>catkin_create_pkg 包名(kitti_tutorial) rospy<br>3,进入包kitti_tutorial下建立资料夹:<br>catkin_make<br>4,在包下的src文件中编写程序,环境为python2,程序中无法写入中文,会报错,程序采用的是ASCII编码形式<br>5,程序完成后进入catkin_ws&#x2F;src目录下执行以下命令:<br>roscd 包名(kitti_tutorial)&#x2F;src</p>\n<p>chmod +x 主程序(kitti.py)</p>\n<p>rosrun 包名(kitti_tutorial) 主程序(kitti.py)</p>\n<p>在新终端运行ros:<br>roscore</p>\n<p>在新终端打开rviz:<br>rviz</p>\n<p>在rviz中运行:<br>add —&gt; By topic(选择要运行的,例如图片,云点图,imu等)</p>\n<p>保存:选择file—&gt;save config as —&gt; 文件名 </p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.bilibili.com/video/BV1qV41167d2?p=1\">视频链接</a></p>\n<p>环境安装说明:</p>\n<p> 安装链接:</p>\n<pre><code>  [ROS安装](https://www.guyuehome.com/33971)\n</code></pre>\n<p>类似错误修复链接:</p>\n<pre><code>[大部分错误针对修改有效](https://blog.csdn.net/qq_44830040/article/details/106049992)\n</code></pre>\n<p>安装步骤:</p>\n<p>1,配置Ubuntu系统<br>打开软件中心,允许以下三种软件源<br>①restricted（不完全的自由软件）<br>②universe（Ubuntu官方不提供支持与补丁，全靠社区支持）<br>③multiverse（非自由软件，完全不提供支持和补丁）这三种软件源<br>下载地址:Download from为阿里云<br><a href=\"http://mirrors.aliyun.com/ubuntu\">http://mirrors.aliyun.com/ubuntu</a></p>\n<p>2,打开终端,添加软件源<br>sudo sh -c ‘echo “deb <a href=\"http://packages.ros.org/ros/ubuntu\">http://packages.ros.org/ros/ubuntu</a> $(lsb_release -sc) main” &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ros-latest.list’</p>\n<pre><code>2.1\n\n        使用国内的镜像源,提高下载速度:(以下任意一个)\n\n             sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;\n\n             sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirror.sysu.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;\n\n            sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://ros.exbot.net/rospackage/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;\n</code></pre>\n<p>3,添加密钥(以下任意一个)<br>sudo apt-key adv ——keyserver hkp:&#x2F;&#x2F;ha.pool.sks-keyservers.net:80 ——recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</p>\n<p>sudo apt-key adv –keyserver ‘hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80’ –recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</p>\n<p>4,更新添加的软件源<br>sudo apt-get update</p>\n<p>5,下载ros版本<br>sudo apt-get install ros-kinetic-desktop-full</p>\n<p>6,初始化<br>sudo rosdep init</p>\n<p>7,更新(实在不行此命令执行5~6次后可以忽略,暂时无影响)<br>rosdep update</p>\n<p>8,设置ros环境变量,路径为home下ctrl + h打开隐藏文件就可看到</p>\n<p>echo “source &#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;setup.bash” &gt;&gt; ~&#x2F;.bashrc</p>\n<p>source ~&#x2F;.bashrc</p>\n<p>9,运行:roscore</p>\n<p>三,测试是否安装成功<br><a href=\"https://blog.csdn.net/dd_Mr/article/details/114323752\">链接地址</a></p>\n<p>①在终端运行以下命令开启ros<br>roscore<br>②打开一个新终端运行以下命令打开小乌龟窗口<br>rosrun turtlesim turtlesim_node<br>③打开新终端运行以下命令通过键盘控制小乌龟运动<br>rosrun turtlesim turtle_teleop_key<br>④打开新终端运行以下命令,看到ros的图形化界面,展示节点的关系,若终端无报错说明安装成功<br>rosrun rqt_graph rqt_graph</p>\n<p>四,Ubuntu16.04上安装kitti2bag<br><a href=\"https://blog.csdn.net/weixin_38636815/article/details/108376178\">链接地址</a></p>\n<p>①安装依赖包<br>sudo pip install pandas&#x3D;&#x3D;0.23.0 -i <a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a> –trusted-host pypi.douban.com</p>\n<p>sudo pip install pykitti -i <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host pypi.douban.com</p>\n<p>sudo pip install kitti2bag  -i <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host pypi.douban.com</p>\n<p>②安装kitti2bag包<br>sudo pip install kitti2bag</p>\n<p>五,kitti2bag包对kitti数据集的处理<br><a href=\"https://pan.baidu.com/s/1dpGDeYXYHHKtjmfX1IsVZw\">数据集链接:</a><br>密码:oqym</p>\n<p>打开下载的数据集,在2011_09_26目录的上一层目录下执行指令：<br>kitti2bag -t 2011_09_26 -r 0005 raw_synced .</p>\n<p>生成一个ros可执行包:kitti_2011_09_26_drive_0005_synced.bag</p>\n<p>执行以下命令打开图像可视化软件:<br>rqt_bag kitti_2011_09_26_drive_0005_synced.bag</p>\n<p>读取图片:在文件上右键 —&gt; View —&gt; Image:<br>点击播放按钮一帧一帧的读取图片,一共15秒</p>\n<p>缺点:只能读取图片,不能进行点云的读取</p>\n<p>六:通过程序对kitti数据集进行处理<br>1,建立目录catkin_ws&#x2F;src<br>2,在src目录下建包<br>catkin_create_pkg 包名(kitti_tutorial) rospy<br>3,进入包kitti_tutorial下建立资料夹:<br>catkin_make<br>4,在包下的src文件中编写程序,环境为python2,程序中无法写入中文,会报错,程序采用的是ASCII编码形式<br>5,程序完成后进入catkin_ws&#x2F;src目录下执行以下命令:<br>roscd 包名(kitti_tutorial)&#x2F;src</p>\n<p>chmod +x 主程序(kitti.py)</p>\n<p>rosrun 包名(kitti_tutorial) 主程序(kitti.py)</p>\n<p>在新终端运行ros:<br>roscore</p>\n<p>在新终端打开rviz:<br>rviz</p>\n<p>在rviz中运行:<br>add —&gt; By topic(选择要运行的,例如图片,云点图,imu等)</p>\n<p>保存:选择file—&gt;save config as —&gt; 文件名 </p>\n"},{"title":"scrapy框架使用","comments":1,"copyright":true,"abbrlink":"1d5ab057","date":"2022-08-29T12:50:08.000Z","_content":"\n1,Scrapy的安装配置(根据个人实际情况,每个人项目不一样)\n①,先安装将twisted文件放到E盘根目录下\n#前提必须安装wheel模块,为了安装whl文件\n②,E:—>pip install Twisted-18.4.0-cp36-cp36m-win_amd64.whl\n③,pip install scrapy==1.5.0\n\n2,在E盘创建Scrapy工程:\nE: —> scrapy startproject doubanmovie —>\ncd doubanmovie —>scrapy genspider moviespider douban.com\n\n3,爬虫主程序的编写:\n在Pycharm工具打开doubanmovie下级目录的doubanmovie\n①,添加浏览器标识\n将rotate_useragent文件放到doubanmovie文件夹下\n②,在settings中的DOWNLOAD_MIDDLEWARES中添加配置信息\n添加禁用框架自带的浏览器标识及设置浏览器标识\n#禁用框架自带的浏览器标识\n‘scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware’: None,\n#设置浏览器标识\n‘doubanmovie.rotate_useragent.RotateUserAgentMiddleware’:400\n②-①,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置\n\n③,编写主程序\n\n④,执行\nscrapy crawl (spiders下文件,不包含后缀)\n\n注意:设置浏览器标识时,第一个应为项目名\n\n爬虫爬取数据流程(scrapy)\n1,scrapy startproject XXXX\n2,scrapy genspider XXXX “http://www.XXXX.com”\n3,编写item.py,明确需要提取的数据\n4,编写spiders/xxxx.py ,编写爬虫文件,处理请求和响应,以及提取数据(yield item )\n5,编写pipelines.py , 编写管道文件,处理spider返回item,比如本地持久化存储等…\n6,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置\n7,执行爬虫\n","source":"_posts/scrapy框架使用.md","raw":"---\ntitle: scrapy框架使用\ncomments: true\ncopyright: true\ntags:\n  - 爬虫\n  - scrapy\ncategories:\n  - 爬虫\nabbrlink: 1d5ab057\ndate: 2022-08-29 20:50:08\n---\n\n1,Scrapy的安装配置(根据个人实际情况,每个人项目不一样)\n①,先安装将twisted文件放到E盘根目录下\n#前提必须安装wheel模块,为了安装whl文件\n②,E:—>pip install Twisted-18.4.0-cp36-cp36m-win_amd64.whl\n③,pip install scrapy==1.5.0\n\n2,在E盘创建Scrapy工程:\nE: —> scrapy startproject doubanmovie —>\ncd doubanmovie —>scrapy genspider moviespider douban.com\n\n3,爬虫主程序的编写:\n在Pycharm工具打开doubanmovie下级目录的doubanmovie\n①,添加浏览器标识\n将rotate_useragent文件放到doubanmovie文件夹下\n②,在settings中的DOWNLOAD_MIDDLEWARES中添加配置信息\n添加禁用框架自带的浏览器标识及设置浏览器标识\n#禁用框架自带的浏览器标识\n‘scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware’: None,\n#设置浏览器标识\n‘doubanmovie.rotate_useragent.RotateUserAgentMiddleware’:400\n②-①,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置\n\n③,编写主程序\n\n④,执行\nscrapy crawl (spiders下文件,不包含后缀)\n\n注意:设置浏览器标识时,第一个应为项目名\n\n爬虫爬取数据流程(scrapy)\n1,scrapy startproject XXXX\n2,scrapy genspider XXXX “http://www.XXXX.com”\n3,编写item.py,明确需要提取的数据\n4,编写spiders/xxxx.py ,编写爬虫文件,处理请求和响应,以及提取数据(yield item )\n5,编写pipelines.py , 编写管道文件,处理spider返回item,比如本地持久化存储等…\n6,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置\n7,执行爬虫\n","slug":"scrapy框架使用","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmpz001681nvc2qfff7q","content":"<p>1,Scrapy的安装配置(根据个人实际情况,每个人项目不一样)<br>①,先安装将twisted文件放到E盘根目录下<br>#前提必须安装wheel模块,为了安装whl文件<br>②,E:—&gt;pip install Twisted-18.4.0-cp36-cp36m-win_amd64.whl<br>③,pip install scrapy&#x3D;&#x3D;1.5.0</p>\n<p>2,在E盘创建Scrapy工程:<br>E: —&gt; scrapy startproject doubanmovie —&gt;<br>cd doubanmovie —&gt;scrapy genspider moviespider douban.com</p>\n<p>3,爬虫主程序的编写:<br>在Pycharm工具打开doubanmovie下级目录的doubanmovie<br>①,添加浏览器标识<br>将rotate_useragent文件放到doubanmovie文件夹下<br>②,在settings中的DOWNLOAD_MIDDLEWARES中添加配置信息<br>添加禁用框架自带的浏览器标识及设置浏览器标识<br>#禁用框架自带的浏览器标识<br>‘scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware’: None,<br>#设置浏览器标识<br>‘doubanmovie.rotate_useragent.RotateUserAgentMiddleware’:400<br>②-①,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置</p>\n<p>③,编写主程序</p>\n<p>④,执行<br>scrapy crawl (spiders下文件,不包含后缀)</p>\n<p>注意:设置浏览器标识时,第一个应为项目名</p>\n<p>爬虫爬取数据流程(scrapy)<br>1,scrapy startproject XXXX<br>2,scrapy genspider XXXX “<a href=\"http://www.xxxx.com”/\">http://www.XXXX.com”</a><br>3,编写item.py,明确需要提取的数据<br>4,编写spiders&#x2F;xxxx.py ,编写爬虫文件,处理请求和响应,以及提取数据(yield item )<br>5,编写pipelines.py , 编写管道文件,处理spider返回item,比如本地持久化存储等…<br>6,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置<br>7,执行爬虫</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,Scrapy的安装配置(根据个人实际情况,每个人项目不一样)<br>①,先安装将twisted文件放到E盘根目录下<br>#前提必须安装wheel模块,为了安装whl文件<br>②,E:—&gt;pip install Twisted-18.4.0-cp36-cp36m-win_amd64.whl<br>③,pip install scrapy&#x3D;&#x3D;1.5.0</p>\n<p>2,在E盘创建Scrapy工程:<br>E: —&gt; scrapy startproject doubanmovie —&gt;<br>cd doubanmovie —&gt;scrapy genspider moviespider douban.com</p>\n<p>3,爬虫主程序的编写:<br>在Pycharm工具打开doubanmovie下级目录的doubanmovie<br>①,添加浏览器标识<br>将rotate_useragent文件放到doubanmovie文件夹下<br>②,在settings中的DOWNLOAD_MIDDLEWARES中添加配置信息<br>添加禁用框架自带的浏览器标识及设置浏览器标识<br>#禁用框架自带的浏览器标识<br>‘scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware’: None,<br>#设置浏览器标识<br>‘doubanmovie.rotate_useragent.RotateUserAgentMiddleware’:400<br>②-①,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置</p>\n<p>③,编写主程序</p>\n<p>④,执行<br>scrapy crawl (spiders下文件,不包含后缀)</p>\n<p>注意:设置浏览器标识时,第一个应为项目名</p>\n<p>爬虫爬取数据流程(scrapy)<br>1,scrapy startproject XXXX<br>2,scrapy genspider XXXX “<a href=\"http://www.xxxx.com”/\">http://www.XXXX.com”</a><br>3,编写item.py,明确需要提取的数据<br>4,编写spiders&#x2F;xxxx.py ,编写爬虫文件,处理请求和响应,以及提取数据(yield item )<br>5,编写pipelines.py , 编写管道文件,处理spider返回item,比如本地持久化存储等…<br>6,编写settings,py,启动管道组件,ITEM_PIPELINES 以及其他相关设置<br>7,执行爬虫</p>\n"},{"title":"pycharm插件整理","comments":1,"copyright":true,"abbrlink":"fb4b156c","date":"2022-08-29T12:34:17.000Z","_content":"\n1, Chinese: 汉化\n2, translation: 翻译\n3, Rainbow Brackets: 括号高亮\n4, json parser: json格式的数据显示\n5, markdown image support: markdown文档编辑器\n6, Aixcoder code complate: 自动补全\n7,CSV plugin \n8,wakatime\n9, .ignore\n10, Context Free Grammar\n11, SonarLint\n12, Key Promoter X\n13, Indent Rainbow\n14, CodeGlance\n","source":"_posts/pycharm插件整理.md","raw":"---\ntitle: pycharm插件整理\ncomments: true\ncopyright: true\ntags:\n  - pycharm\n  - 插件\ncategories:\n  - pycharm\nabbrlink: fb4b156c\ndate: 2022-08-29 20:34:17\n---\n\n1, Chinese: 汉化\n2, translation: 翻译\n3, Rainbow Brackets: 括号高亮\n4, json parser: json格式的数据显示\n5, markdown image support: markdown文档编辑器\n6, Aixcoder code complate: 自动补全\n7,CSV plugin \n8,wakatime\n9, .ignore\n10, Context Free Grammar\n11, SonarLint\n12, Key Promoter X\n13, Indent Rainbow\n14, CodeGlance\n","slug":"pycharm插件整理","published":1,"updated":"2022-10-24T08:43:24.417Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq0001a81nv1wr5di22","content":"<p>1, Chinese: 汉化<br>2, translation: 翻译<br>3, Rainbow Brackets: 括号高亮<br>4, json parser: json格式的数据显示<br>5, markdown image support: markdown文档编辑器<br>6, Aixcoder code complate: 自动补全<br>7,CSV plugin<br>8,wakatime<br>9, .ignore<br>10, Context Free Grammar<br>11, SonarLint<br>12, Key Promoter X<br>13, Indent Rainbow<br>14, CodeGlance</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1, Chinese: 汉化<br>2, translation: 翻译<br>3, Rainbow Brackets: 括号高亮<br>4, json parser: json格式的数据显示<br>5, markdown image support: markdown文档编辑器<br>6, Aixcoder code complate: 自动补全<br>7,CSV plugin<br>8,wakatime<br>9, .ignore<br>10, Context Free Grammar<br>11, SonarLint<br>12, Key Promoter X<br>13, Indent Rainbow<br>14, CodeGlance</p>\n"},{"title":"svn使用","comments":1,"copyright":true,"abbrlink":"df8f2d0d","date":"2022-08-29T12:51:16.000Z","_content":"\n[软件地址](https://pan.baidu.com/s/1WGIjMTBU_7J9BLoiBHbSjw)\n\n提取码: 4iuo\n\n[汉化包地址](https://pan.baidu.com/s/1eWpX4ai5_eTaLHCn0x1_hQ)\n\n提取码: 7u70 \n\n汉化说明:\n\n在任意位置右击--->TortoiseSVN--->settings--->General--->Language(简体中文)--->应用 ---> 确定\n\n1, 导出项目\n\n在检出目录文件夹下:\n\n右击--->SVN检出--->填写版本库url--->确定\n\n**版本库url为服务器地址,检出标志为绿色的√\n\n\n\n2, 修改文件,添加文件,删除文件\n\n\t2.1 添加文件\n\t\n\t\t选中 ---> 右击 ---> 加入 (会出现蓝色感叹号) --- > 提交\n\n总结: add ,commit\n\n\t2.2 修改文件\n\t\n\t\t检出要修改的文件 ---> 右击 ---> SVN更新 (对文件内容进行修改,保存,'会出现红色感叹号') ---> 提交(对提交文件进行相关备注)\n\n格式:\n\n\t*XXXX年—XX月—XX日 姓名 修改内容：XXXXXXXX 修改原因：YYYYYYYYYYYYY\\*\n\n\t2.3 重命名文件\n\t\n\t\t选中文件--->SVN更新--->修改文件名--->add--->commit\n\t\n\t2.4删除文件(删除前备份)\n\t\n\t\t选中文件---> SVN更新 ---> 删除 ---> 提交\n\n总结:\n\n\t更新,提交,显示日志,改名,删除\n\ncheckout:将文件添加到本地目录\n\nadd: 往版本库添加新的文件\n\ncommit: 将改动的文件提交到版本库\n\nlock/unlock: 加锁/解锁\n\nupdate: 更新\n\ndelete: 删除\n","source":"_posts/svn使用.md","raw":"---\ntitle: svn使用\ncomments: true\ncopyright: true\ntags:\n  - svn\ncategories:\n  - svn\nabbrlink: df8f2d0d\ndate: 2022-08-29 20:51:16\n---\n\n[软件地址](https://pan.baidu.com/s/1WGIjMTBU_7J9BLoiBHbSjw)\n\n提取码: 4iuo\n\n[汉化包地址](https://pan.baidu.com/s/1eWpX4ai5_eTaLHCn0x1_hQ)\n\n提取码: 7u70 \n\n汉化说明:\n\n在任意位置右击--->TortoiseSVN--->settings--->General--->Language(简体中文)--->应用 ---> 确定\n\n1, 导出项目\n\n在检出目录文件夹下:\n\n右击--->SVN检出--->填写版本库url--->确定\n\n**版本库url为服务器地址,检出标志为绿色的√\n\n\n\n2, 修改文件,添加文件,删除文件\n\n\t2.1 添加文件\n\t\n\t\t选中 ---> 右击 ---> 加入 (会出现蓝色感叹号) --- > 提交\n\n总结: add ,commit\n\n\t2.2 修改文件\n\t\n\t\t检出要修改的文件 ---> 右击 ---> SVN更新 (对文件内容进行修改,保存,'会出现红色感叹号') ---> 提交(对提交文件进行相关备注)\n\n格式:\n\n\t*XXXX年—XX月—XX日 姓名 修改内容：XXXXXXXX 修改原因：YYYYYYYYYYYYY\\*\n\n\t2.3 重命名文件\n\t\n\t\t选中文件--->SVN更新--->修改文件名--->add--->commit\n\t\n\t2.4删除文件(删除前备份)\n\t\n\t\t选中文件---> SVN更新 ---> 删除 ---> 提交\n\n总结:\n\n\t更新,提交,显示日志,改名,删除\n\ncheckout:将文件添加到本地目录\n\nadd: 往版本库添加新的文件\n\ncommit: 将改动的文件提交到版本库\n\nlock/unlock: 加锁/解锁\n\nupdate: 更新\n\ndelete: 删除\n","slug":"svn使用","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq0001b81nv8r5o5x1e","content":"<p><a href=\"https://pan.baidu.com/s/1WGIjMTBU_7J9BLoiBHbSjw\">软件地址</a></p>\n<p>提取码: 4iuo</p>\n<p><a href=\"https://pan.baidu.com/s/1eWpX4ai5_eTaLHCn0x1_hQ\">汉化包地址</a></p>\n<p>提取码: 7u70 </p>\n<p>汉化说明:</p>\n<p>在任意位置右击—&gt;TortoiseSVN—&gt;settings—&gt;General—&gt;Language(简体中文)—&gt;应用 —&gt; 确定</p>\n<p>1, 导出项目</p>\n<p>在检出目录文件夹下:</p>\n<p>右击—&gt;SVN检出—&gt;填写版本库url—&gt;确定</p>\n<p>**版本库url为服务器地址,检出标志为绿色的√</p>\n<p>2, 修改文件,添加文件,删除文件</p>\n<pre><code>2.1 添加文件\n\n    选中 ---&gt; 右击 ---&gt; 加入 (会出现蓝色感叹号) --- &gt; 提交\n</code></pre>\n<p>总结: add ,commit</p>\n<pre><code>2.2 修改文件\n\n    检出要修改的文件 ---&gt; 右击 ---&gt; SVN更新 (对文件内容进行修改,保存,&#39;会出现红色感叹号&#39;) ---&gt; 提交(对提交文件进行相关备注)\n</code></pre>\n<p>格式:</p>\n<pre><code>*XXXX年—XX月—XX日 姓名 修改内容：XXXXXXXX 修改原因：YYYYYYYYYYYYY\\*\n\n2.3 重命名文件\n\n    选中文件---&gt;SVN更新---&gt;修改文件名---&gt;add---&gt;commit\n\n2.4删除文件(删除前备份)\n\n    选中文件---&gt; SVN更新 ---&gt; 删除 ---&gt; 提交\n</code></pre>\n<p>总结:</p>\n<pre><code>更新,提交,显示日志,改名,删除\n</code></pre>\n<p>checkout:将文件添加到本地目录</p>\n<p>add: 往版本库添加新的文件</p>\n<p>commit: 将改动的文件提交到版本库</p>\n<p>lock&#x2F;unlock: 加锁&#x2F;解锁</p>\n<p>update: 更新</p>\n<p>delete: 删除</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://pan.baidu.com/s/1WGIjMTBU_7J9BLoiBHbSjw\">软件地址</a></p>\n<p>提取码: 4iuo</p>\n<p><a href=\"https://pan.baidu.com/s/1eWpX4ai5_eTaLHCn0x1_hQ\">汉化包地址</a></p>\n<p>提取码: 7u70 </p>\n<p>汉化说明:</p>\n<p>在任意位置右击—&gt;TortoiseSVN—&gt;settings—&gt;General—&gt;Language(简体中文)—&gt;应用 —&gt; 确定</p>\n<p>1, 导出项目</p>\n<p>在检出目录文件夹下:</p>\n<p>右击—&gt;SVN检出—&gt;填写版本库url—&gt;确定</p>\n<p>**版本库url为服务器地址,检出标志为绿色的√</p>\n<p>2, 修改文件,添加文件,删除文件</p>\n<pre><code>2.1 添加文件\n\n    选中 ---&gt; 右击 ---&gt; 加入 (会出现蓝色感叹号) --- &gt; 提交\n</code></pre>\n<p>总结: add ,commit</p>\n<pre><code>2.2 修改文件\n\n    检出要修改的文件 ---&gt; 右击 ---&gt; SVN更新 (对文件内容进行修改,保存,&#39;会出现红色感叹号&#39;) ---&gt; 提交(对提交文件进行相关备注)\n</code></pre>\n<p>格式:</p>\n<pre><code>*XXXX年—XX月—XX日 姓名 修改内容：XXXXXXXX 修改原因：YYYYYYYYYYYYY\\*\n\n2.3 重命名文件\n\n    选中文件---&gt;SVN更新---&gt;修改文件名---&gt;add---&gt;commit\n\n2.4删除文件(删除前备份)\n\n    选中文件---&gt; SVN更新 ---&gt; 删除 ---&gt; 提交\n</code></pre>\n<p>总结:</p>\n<pre><code>更新,提交,显示日志,改名,删除\n</code></pre>\n<p>checkout:将文件添加到本地目录</p>\n<p>add: 往版本库添加新的文件</p>\n<p>commit: 将改动的文件提交到版本库</p>\n<p>lock&#x2F;unlock: 加锁&#x2F;解锁</p>\n<p>update: 更新</p>\n<p>delete: 删除</p>\n"},{"title":"tensorflow概念整理","comments":1,"copyright":true,"abbrlink":"e5f5d28","date":"2022-08-29T12:52:29.000Z","_content":"\nTensorflow使用学习说明:\n\n1,环境配置(Window环境下):\n\n[软件链接地址](https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0)\n\n安装VC_redist.x64.exe软件,Microsoft Visual C++ 环境\n\n2,安装tensorflow,\n\n版本说明:\n\n针对电脑CUDA大小下载不同版本的tensorflow\n\n[对应关系](https://tensorflow.google.cn/install/source_windows)\n\n[查看CUDA方法](https://blog.csdn.net/qq_38295511/article/details/89223169)\n\n①打开控制面板\n\n②搜索NVIDIA控制面板\n\n③点击系统信息\n\n④点击组件\n\n⑤通过NVCUDA.DLL查看CUDA版本\n\neg:本机的CUDA版本为11.3.55 , 对应的tensorflow版本为2.4.0\n\n下载方式为:https://pypi.org/project/tensorflow/2.4.0/#files\n\npip install 包名\n\n线性回归和梯度下降算法\n\n单变量线性回归算法: f(x) = ax + b,映射输入特征和输出值\n\n#绘制点状图,受教育年限和收入之间的线性关系: f(x) = ax + b \n\n预测目标与损失函数\n\n目标:\n\n\t预测函数f(x)与真实值之间的整体误差最小\n\t\n\t如何定义误差最小\n\n损失函数:\n\n\t使用均方差作为成本函数,\n\t\n\t均方差:\n\t\n\t\t预测值和真实值之间差的平方取均值\n\n成本函数与损失函数\n\n优化目标(y代表实际的收入)\n\n找到合适的a和b,使(f(x)-y)²越小越好  --->成本函数(均方差)    [f(x) = ax + b]    --->  ((ax + b) - y)²值最小\n\n已知:x和y\n\n注意: 求解的是参数a和b\n\n成本函数与损失函数\n\n如何优化:\n\n使用梯度下降算法\n\n梯度下降算法:\n\n\t是一种致力于找到函数极值点的算法,将梯度下降算法应用于寻找损失函数的极值点便构成了依据输入数据的模型学习\n\t\n\t梯度的输出是一个由若干偏导数构成的向量,它的每个分量对应于函数对输入向量的相应分量的偏导  (查找之前学过的求偏导)\n\n\n\t梯度的输出向量表明了在每个位置损失函数增长最快的方向,可将它视为表示了在函数的每个位置向哪个方向移动函数值可以增长\n\n多层感知器(神经网络与激活函数)\n\n输入(x1,x2,x3) 1    权重(w1,w2,w3)b    求和       传递函数    输出      \n\n生物的神经元一层一层连接起来,当神经信号达到某一条件,这个神经元就会激活,然后传递信息下去,\n\n为了继续使用神经网络解决这种不具备线性可分性的问题,采取在神经网络的输入端和输出端之间插入更多的神经元\n\n输入层 ---> 隐含层 ---> 输出层 ---> 输出\n\n神经元的启发\n\n激活函数:\n\nrelu\n\nsigmoid(查看之前公式)\n\ntanh\n\nleak relu\n\n广告,销量的预测\n\n逻辑回归\n\nsigmoid函数是一个概率分布函数,给定某个输入,它将输出为一个概率值\n\n0~1之间的一个概率值\n\n线性回归预测的是一个连续值,\n\n逻辑回归给出的 \"是\" 和 \"否\"的回答\n\n逻辑回归损失函数\n\n平方差所惩罚的是与损失为同一数量级的的情形\n\n对于分类问题,我们最好的使用交叉熵损失函数会更有效\n\n交叉熵会输出一个更大的 \"损失\"\n\n交叉熵损失函数\n\n交叉熵刻画的是实际输出(概率)与期望输出(概率)的距离,也就是交叉熵的值越小,两个概率分布就越接近.假设概率分布p为期望输出,概率分布q为实际输出,H(p,q)为交叉熵,\n\n\n$$\nH(p,q) = -\\sum_{x}p(x)logq(x)\n$$\n在keras里,使用binary_crossentropy来计算交叉熵\n\nSoftmax分类\n\n对数几率回归解决的是二分类的问题\n\n对于多个选项的问题,我们可以使用softmax函数\n\n它是对数几率回归在N个可能不同的值上的推广\n\n神经网络的原始输出不是一个概率值,实际上只是输入的数值做了复杂的加权和与非线性处理之后的一个值而已,那么如何将这个输出变为概率分布\n\n这就是Softmax层的作用\n\nsoftmax要求每个样本必须属于某个类别,且所有可能的样本均被覆盖\n\nsoftmax个样本分量之和为1\n\n当只有两个类别时,与对数几率回归完全相同\n\n在tf.keras里,对于多分类问题使用categorical_crossentropy和sparse_categorical_crossentopy来计算softmax交叉熵\n\nFashion MNIST数据集: 70000张灰度图像,10个类别  :衣物\n\nFashion MNIST的作用是成为经典MNIST数据集的简易替换,MNIST数据集包含手写数字(0,1,2等)的图像,这些图像的格式与本节课中使用的服饰图像的格式相同\n\nFashion MNIST比常规MNIST手写数据集更挑战性.\n\n这两个数据集都相对较小.用于验证某个算法能否如期正常运行,它们都是测试和调试代码的良好起点\n\nMNIST手写数据集将作为作业交给大家自己完成\\\n\n使用60000张图像训练网络,使用10000张图像评估经过学习的网络分类图像的准确率\n\n可以从Tensorflow 直接访问Fashion MNIST, 只需导入和加载数据即可\n\n优化函数,学习速率,反向传播算法\n\n学习速率:\n\n\t梯度就是表明损失函数相对参数的变化率\n\t\n\t对梯度进行缩放的参数被称为学习速率\n\t\n\t学习速率是一种超参数或对模型的一种手工可配置的设置\n\n 需要为它指定正确的值. 如果学习速率太小,则找到损失函数极小值点时可能需要许多迭代,如果太大,则算法可能会 \"跳过\" 极小值点并且因周期性的 \"跳跃\" 而永远无法找到极小值点\n\n在具体实践中,可以通过查看损失函数值随时间的变化曲线,来判断学习速率的选取是合适的\n\n合适的学习速率,损失函数会随时间下降,直到一个底部,不合适的学习速率,损失函数可能会发生震荡\n\n在调整学习速率时,既需要使其足够小,保证不至于发生超调,也要保证它足够大,以使损失函数能够尽快下降,从而可通过较少次数的迭代更快的完成学习\n\n反向传播算法:\n\n\t反向传播算法是一种高效计算数据流图中梯度的技术\n\t\n\t每一层的导数都是后一层的导数与前一层输出之积,这正是链式法则的奇妙之处,误差反向传播算法利用的正是这一特点\n\n前馈时,从输入开始,逐一计算每个隐含层的输出,直到输出层\n\n然后开始计算导数,并从输出层经各隐含层逐一反向传播,为了减少计算量,还需对所有已完成的元素进行复用,这便是反向传播算法名称的由来\n\n常见的优化函数\n\n优化器是编译模型所需的两个参数之一\n\n你可以先实例化一个优化器对象,然后将它传入\n\nmodel.compile(),或者你可以通过名称来调用优化器,在后一种情况下,将使用优化器的默认参数\n\n1,SGD:随机梯度下降优化器\n\n随机梯度下降优化器SGD和min-batch是同一个意思,抽取m个小批量(独立同分布)样本,通过计算他们平均度均值\n\nSGD参数(了解):\n\nlr: float >= 0.学习率\n\nmomentum:float >= 0.参数,用于加速SGD在相关方向上前进,并抑制震荡\n\ndecay:float >= 0.每次参数更新后学习率衰减值\n\nnesterov:boolean.是否使用Nesterov动量\n\nRMSprop: 经验上,RMSProp被证明有效且实用的深度学习网络优化算法\n\nRMSProp增加了一个衰减系数来控制历史信息的获取多少\n\nRMSProp会对学习率进行衰减\n\n建议使用优化器默认参数(除了学习率lr,它可以被自由调节)\n\n这个优化器通常是训练神经网络RNN的不错选择\n\n2,Adam优化器(最常用,用的最多)\n\n\t1,Adam优化器可以看做是修正后的Momentum+RMSProp算法\n\t\n\t2,Adam通常被认为对超参数的选择相当棒\n\t\n\t3,学习率建议为0.001\n\nAdam是一种可以替代传统随机梯度下降过程的一阶优化算法,它能基于训练数据迭代地更新神经网络权重\n\nAdam通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率\n\n参数:\n\nlr: float >= 0.学习率\n\nbeta_1:float, 0 < beta < 1.通常接近于1\n\nbeta_2:float, 0 < beta < 1.通常接近于1\n\ndecay:float >= 0.每次参数更新后学习率衰减值\n\n网络优化与参数选择\n\n网络容量:\n\n\t与网络中的可训练参数成正比\n\n网络中的神经单元数越多,层数越多,神经网络的拟合能力越强\n\n但是训练速度,难度越大,越容易产生过拟合\n\n如何选择超参数:\n\n\t就是在搭建神经网络中,需要我们自己如选择(不是通过梯度下降算法去优化)的那些参数\n\neg:中间层的神经元个数,学习速率\n\n如何提高网络的拟合能力\n\n一种显然的想法是增大网络容量\n\n1,增加层(这个方法比较显著)\n\n2,增加隐藏神经元个数\n\n\t注意:单层的神经元个数,不能太小,太小的话,会造成信息瓶颈,使得模型欠拟合\n\nDropout:可以解决过拟合\n\n1) 取平均的作用:  先回到标准的模型即没有dropout我们用相同的训练数据区训练5个不同的神经网络,一般会得到5个不同的结果,此时我们可以采用 '5个结果取均值' 或者 '多数取胜的投票策略' 去决定最终结果\n\n2) 减少神经元之间复杂的共适应关系,因为dropout程序导致两个神经元不一定每次在一个dropout网络中出现,这样权值的更新不再依赖于有固定关系的隐含节点的共同作用,阻止了某些特征仅仅在其他特征下才有效果的情况\n\n3)类似于性别在生物进化中的角色\n\n物种为了生存往往会倾向于适应这种环境,环境突变则会导致物种难以做出及时反映,性别的出现可以繁衍出适应新环境的变种,有效的阻止过拟合,即避免环境改变时物种可能面临的灭绝\n\n参数选择的原则:\n\n\t理想的模型是刚好在欠拟合和过拟合的界线上,也就是正好拟合数据\n\n首先开发一个过拟合的模型:\n\n(1)添加更多的层\n\n(2)让每一层变得更大\n\n(3)训练更多的轮次\n\n然后抑制过拟合:\n\n(1)dropout\n\n(2)正则化\n\n(3)图像增强\n\n再次,调节超参数,\n\n学习速率\n\n隐藏层单元数\n\n训练轮次\n\n超参数的选择是一个经验和不断测试的结果\n\n经典机器学习的方法,如特征工程,增加训练数据也要做\n\n交叉验证\n\n构建网络的总原则:\t保证神经网络容量足够拟合数据\n\n一. 增大网络数量,知道过拟合\n\n二, 采取措施抑制过拟合\n\n三. 继续增大网络容量,直到过拟合\n","source":"_posts/tensorflow概念整理.md","raw":"---\ntitle: tensorflow概念整理\ncomments: true\ncopyright: true\ntags:\n  - AI\n  - tensorflow\ncategories:\n  - tensorflow\nabbrlink: e5f5d28\ndate: 2022-08-29 20:52:29\n---\n\nTensorflow使用学习说明:\n\n1,环境配置(Window环境下):\n\n[软件链接地址](https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0)\n\n安装VC_redist.x64.exe软件,Microsoft Visual C++ 环境\n\n2,安装tensorflow,\n\n版本说明:\n\n针对电脑CUDA大小下载不同版本的tensorflow\n\n[对应关系](https://tensorflow.google.cn/install/source_windows)\n\n[查看CUDA方法](https://blog.csdn.net/qq_38295511/article/details/89223169)\n\n①打开控制面板\n\n②搜索NVIDIA控制面板\n\n③点击系统信息\n\n④点击组件\n\n⑤通过NVCUDA.DLL查看CUDA版本\n\neg:本机的CUDA版本为11.3.55 , 对应的tensorflow版本为2.4.0\n\n下载方式为:https://pypi.org/project/tensorflow/2.4.0/#files\n\npip install 包名\n\n线性回归和梯度下降算法\n\n单变量线性回归算法: f(x) = ax + b,映射输入特征和输出值\n\n#绘制点状图,受教育年限和收入之间的线性关系: f(x) = ax + b \n\n预测目标与损失函数\n\n目标:\n\n\t预测函数f(x)与真实值之间的整体误差最小\n\t\n\t如何定义误差最小\n\n损失函数:\n\n\t使用均方差作为成本函数,\n\t\n\t均方差:\n\t\n\t\t预测值和真实值之间差的平方取均值\n\n成本函数与损失函数\n\n优化目标(y代表实际的收入)\n\n找到合适的a和b,使(f(x)-y)²越小越好  --->成本函数(均方差)    [f(x) = ax + b]    --->  ((ax + b) - y)²值最小\n\n已知:x和y\n\n注意: 求解的是参数a和b\n\n成本函数与损失函数\n\n如何优化:\n\n使用梯度下降算法\n\n梯度下降算法:\n\n\t是一种致力于找到函数极值点的算法,将梯度下降算法应用于寻找损失函数的极值点便构成了依据输入数据的模型学习\n\t\n\t梯度的输出是一个由若干偏导数构成的向量,它的每个分量对应于函数对输入向量的相应分量的偏导  (查找之前学过的求偏导)\n\n\n\t梯度的输出向量表明了在每个位置损失函数增长最快的方向,可将它视为表示了在函数的每个位置向哪个方向移动函数值可以增长\n\n多层感知器(神经网络与激活函数)\n\n输入(x1,x2,x3) 1    权重(w1,w2,w3)b    求和       传递函数    输出      \n\n生物的神经元一层一层连接起来,当神经信号达到某一条件,这个神经元就会激活,然后传递信息下去,\n\n为了继续使用神经网络解决这种不具备线性可分性的问题,采取在神经网络的输入端和输出端之间插入更多的神经元\n\n输入层 ---> 隐含层 ---> 输出层 ---> 输出\n\n神经元的启发\n\n激活函数:\n\nrelu\n\nsigmoid(查看之前公式)\n\ntanh\n\nleak relu\n\n广告,销量的预测\n\n逻辑回归\n\nsigmoid函数是一个概率分布函数,给定某个输入,它将输出为一个概率值\n\n0~1之间的一个概率值\n\n线性回归预测的是一个连续值,\n\n逻辑回归给出的 \"是\" 和 \"否\"的回答\n\n逻辑回归损失函数\n\n平方差所惩罚的是与损失为同一数量级的的情形\n\n对于分类问题,我们最好的使用交叉熵损失函数会更有效\n\n交叉熵会输出一个更大的 \"损失\"\n\n交叉熵损失函数\n\n交叉熵刻画的是实际输出(概率)与期望输出(概率)的距离,也就是交叉熵的值越小,两个概率分布就越接近.假设概率分布p为期望输出,概率分布q为实际输出,H(p,q)为交叉熵,\n\n\n$$\nH(p,q) = -\\sum_{x}p(x)logq(x)\n$$\n在keras里,使用binary_crossentropy来计算交叉熵\n\nSoftmax分类\n\n对数几率回归解决的是二分类的问题\n\n对于多个选项的问题,我们可以使用softmax函数\n\n它是对数几率回归在N个可能不同的值上的推广\n\n神经网络的原始输出不是一个概率值,实际上只是输入的数值做了复杂的加权和与非线性处理之后的一个值而已,那么如何将这个输出变为概率分布\n\n这就是Softmax层的作用\n\nsoftmax要求每个样本必须属于某个类别,且所有可能的样本均被覆盖\n\nsoftmax个样本分量之和为1\n\n当只有两个类别时,与对数几率回归完全相同\n\n在tf.keras里,对于多分类问题使用categorical_crossentropy和sparse_categorical_crossentopy来计算softmax交叉熵\n\nFashion MNIST数据集: 70000张灰度图像,10个类别  :衣物\n\nFashion MNIST的作用是成为经典MNIST数据集的简易替换,MNIST数据集包含手写数字(0,1,2等)的图像,这些图像的格式与本节课中使用的服饰图像的格式相同\n\nFashion MNIST比常规MNIST手写数据集更挑战性.\n\n这两个数据集都相对较小.用于验证某个算法能否如期正常运行,它们都是测试和调试代码的良好起点\n\nMNIST手写数据集将作为作业交给大家自己完成\\\n\n使用60000张图像训练网络,使用10000张图像评估经过学习的网络分类图像的准确率\n\n可以从Tensorflow 直接访问Fashion MNIST, 只需导入和加载数据即可\n\n优化函数,学习速率,反向传播算法\n\n学习速率:\n\n\t梯度就是表明损失函数相对参数的变化率\n\t\n\t对梯度进行缩放的参数被称为学习速率\n\t\n\t学习速率是一种超参数或对模型的一种手工可配置的设置\n\n 需要为它指定正确的值. 如果学习速率太小,则找到损失函数极小值点时可能需要许多迭代,如果太大,则算法可能会 \"跳过\" 极小值点并且因周期性的 \"跳跃\" 而永远无法找到极小值点\n\n在具体实践中,可以通过查看损失函数值随时间的变化曲线,来判断学习速率的选取是合适的\n\n合适的学习速率,损失函数会随时间下降,直到一个底部,不合适的学习速率,损失函数可能会发生震荡\n\n在调整学习速率时,既需要使其足够小,保证不至于发生超调,也要保证它足够大,以使损失函数能够尽快下降,从而可通过较少次数的迭代更快的完成学习\n\n反向传播算法:\n\n\t反向传播算法是一种高效计算数据流图中梯度的技术\n\t\n\t每一层的导数都是后一层的导数与前一层输出之积,这正是链式法则的奇妙之处,误差反向传播算法利用的正是这一特点\n\n前馈时,从输入开始,逐一计算每个隐含层的输出,直到输出层\n\n然后开始计算导数,并从输出层经各隐含层逐一反向传播,为了减少计算量,还需对所有已完成的元素进行复用,这便是反向传播算法名称的由来\n\n常见的优化函数\n\n优化器是编译模型所需的两个参数之一\n\n你可以先实例化一个优化器对象,然后将它传入\n\nmodel.compile(),或者你可以通过名称来调用优化器,在后一种情况下,将使用优化器的默认参数\n\n1,SGD:随机梯度下降优化器\n\n随机梯度下降优化器SGD和min-batch是同一个意思,抽取m个小批量(独立同分布)样本,通过计算他们平均度均值\n\nSGD参数(了解):\n\nlr: float >= 0.学习率\n\nmomentum:float >= 0.参数,用于加速SGD在相关方向上前进,并抑制震荡\n\ndecay:float >= 0.每次参数更新后学习率衰减值\n\nnesterov:boolean.是否使用Nesterov动量\n\nRMSprop: 经验上,RMSProp被证明有效且实用的深度学习网络优化算法\n\nRMSProp增加了一个衰减系数来控制历史信息的获取多少\n\nRMSProp会对学习率进行衰减\n\n建议使用优化器默认参数(除了学习率lr,它可以被自由调节)\n\n这个优化器通常是训练神经网络RNN的不错选择\n\n2,Adam优化器(最常用,用的最多)\n\n\t1,Adam优化器可以看做是修正后的Momentum+RMSProp算法\n\t\n\t2,Adam通常被认为对超参数的选择相当棒\n\t\n\t3,学习率建议为0.001\n\nAdam是一种可以替代传统随机梯度下降过程的一阶优化算法,它能基于训练数据迭代地更新神经网络权重\n\nAdam通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率\n\n参数:\n\nlr: float >= 0.学习率\n\nbeta_1:float, 0 < beta < 1.通常接近于1\n\nbeta_2:float, 0 < beta < 1.通常接近于1\n\ndecay:float >= 0.每次参数更新后学习率衰减值\n\n网络优化与参数选择\n\n网络容量:\n\n\t与网络中的可训练参数成正比\n\n网络中的神经单元数越多,层数越多,神经网络的拟合能力越强\n\n但是训练速度,难度越大,越容易产生过拟合\n\n如何选择超参数:\n\n\t就是在搭建神经网络中,需要我们自己如选择(不是通过梯度下降算法去优化)的那些参数\n\neg:中间层的神经元个数,学习速率\n\n如何提高网络的拟合能力\n\n一种显然的想法是增大网络容量\n\n1,增加层(这个方法比较显著)\n\n2,增加隐藏神经元个数\n\n\t注意:单层的神经元个数,不能太小,太小的话,会造成信息瓶颈,使得模型欠拟合\n\nDropout:可以解决过拟合\n\n1) 取平均的作用:  先回到标准的模型即没有dropout我们用相同的训练数据区训练5个不同的神经网络,一般会得到5个不同的结果,此时我们可以采用 '5个结果取均值' 或者 '多数取胜的投票策略' 去决定最终结果\n\n2) 减少神经元之间复杂的共适应关系,因为dropout程序导致两个神经元不一定每次在一个dropout网络中出现,这样权值的更新不再依赖于有固定关系的隐含节点的共同作用,阻止了某些特征仅仅在其他特征下才有效果的情况\n\n3)类似于性别在生物进化中的角色\n\n物种为了生存往往会倾向于适应这种环境,环境突变则会导致物种难以做出及时反映,性别的出现可以繁衍出适应新环境的变种,有效的阻止过拟合,即避免环境改变时物种可能面临的灭绝\n\n参数选择的原则:\n\n\t理想的模型是刚好在欠拟合和过拟合的界线上,也就是正好拟合数据\n\n首先开发一个过拟合的模型:\n\n(1)添加更多的层\n\n(2)让每一层变得更大\n\n(3)训练更多的轮次\n\n然后抑制过拟合:\n\n(1)dropout\n\n(2)正则化\n\n(3)图像增强\n\n再次,调节超参数,\n\n学习速率\n\n隐藏层单元数\n\n训练轮次\n\n超参数的选择是一个经验和不断测试的结果\n\n经典机器学习的方法,如特征工程,增加训练数据也要做\n\n交叉验证\n\n构建网络的总原则:\t保证神经网络容量足够拟合数据\n\n一. 增大网络数量,知道过拟合\n\n二, 采取措施抑制过拟合\n\n三. 继续增大网络容量,直到过拟合\n","slug":"tensorflow概念整理","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq0001f81nvf48l2m3d","content":"<p>Tensorflow使用学习说明:</p>\n<p>1,环境配置(Window环境下):</p>\n<p><a href=\"https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0\">软件链接地址</a></p>\n<p>安装VC_redist.x64.exe软件,Microsoft Visual C++ 环境</p>\n<p>2,安装tensorflow,</p>\n<p>版本说明:</p>\n<p>针对电脑CUDA大小下载不同版本的tensorflow</p>\n<p><a href=\"https://tensorflow.google.cn/install/source_windows\">对应关系</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38295511/article/details/89223169\">查看CUDA方法</a></p>\n<p>①打开控制面板</p>\n<p>②搜索NVIDIA控制面板</p>\n<p>③点击系统信息</p>\n<p>④点击组件</p>\n<p>⑤通过NVCUDA.DLL查看CUDA版本</p>\n<p>eg:本机的CUDA版本为11.3.55 , 对应的tensorflow版本为2.4.0</p>\n<p>下载方式为:<a href=\"https://pypi.org/project/tensorflow/2.4.0/#files\">https://pypi.org/project/tensorflow/2.4.0/#files</a></p>\n<p>pip install 包名</p>\n<p>线性回归和梯度下降算法</p>\n<p>单变量线性回归算法: f(x) &#x3D; ax + b,映射输入特征和输出值</p>\n<p>#绘制点状图,受教育年限和收入之间的线性关系: f(x) &#x3D; ax + b </p>\n<p>预测目标与损失函数</p>\n<p>目标:</p>\n<pre><code>预测函数f(x)与真实值之间的整体误差最小\n\n如何定义误差最小\n</code></pre>\n<p>损失函数:</p>\n<pre><code>使用均方差作为成本函数,\n\n均方差:\n\n    预测值和真实值之间差的平方取均值\n</code></pre>\n<p>成本函数与损失函数</p>\n<p>优化目标(y代表实际的收入)</p>\n<p>找到合适的a和b,使(f(x)-y)²越小越好  —&gt;成本函数(均方差)    [f(x) &#x3D; ax + b]    —&gt;  ((ax + b) - y)²值最小</p>\n<p>已知:x和y</p>\n<p>注意: 求解的是参数a和b</p>\n<p>成本函数与损失函数</p>\n<p>如何优化:</p>\n<p>使用梯度下降算法</p>\n<p>梯度下降算法:</p>\n<pre><code>是一种致力于找到函数极值点的算法,将梯度下降算法应用于寻找损失函数的极值点便构成了依据输入数据的模型学习\n\n梯度的输出是一个由若干偏导数构成的向量,它的每个分量对应于函数对输入向量的相应分量的偏导  (查找之前学过的求偏导)\n\n\n梯度的输出向量表明了在每个位置损失函数增长最快的方向,可将它视为表示了在函数的每个位置向哪个方向移动函数值可以增长\n</code></pre>\n<p>多层感知器(神经网络与激活函数)</p>\n<p>输入(x1,x2,x3) 1    权重(w1,w2,w3)b    求和       传递函数    输出      </p>\n<p>生物的神经元一层一层连接起来,当神经信号达到某一条件,这个神经元就会激活,然后传递信息下去,</p>\n<p>为了继续使用神经网络解决这种不具备线性可分性的问题,采取在神经网络的输入端和输出端之间插入更多的神经元</p>\n<p>输入层 —&gt; 隐含层 —&gt; 输出层 —&gt; 输出</p>\n<p>神经元的启发</p>\n<p>激活函数:</p>\n<p>relu</p>\n<p>sigmoid(查看之前公式)</p>\n<p>tanh</p>\n<p>leak relu</p>\n<p>广告,销量的预测</p>\n<p>逻辑回归</p>\n<p>sigmoid函数是一个概率分布函数,给定某个输入,它将输出为一个概率值</p>\n<p>0~1之间的一个概率值</p>\n<p>线性回归预测的是一个连续值,</p>\n<p>逻辑回归给出的 “是” 和 “否”的回答</p>\n<p>逻辑回归损失函数</p>\n<p>平方差所惩罚的是与损失为同一数量级的的情形</p>\n<p>对于分类问题,我们最好的使用交叉熵损失函数会更有效</p>\n<p>交叉熵会输出一个更大的 “损失”</p>\n<p>交叉熵损失函数</p>\n<p>交叉熵刻画的是实际输出(概率)与期望输出(概率)的距离,也就是交叉熵的值越小,两个概率分布就越接近.假设概率分布p为期望输出,概率分布q为实际输出,H(p,q)为交叉熵,</p>\n<p>$$<br>H(p,q) &#x3D; -\\sum_{x}p(x)logq(x)<br>$$<br>在keras里,使用binary_crossentropy来计算交叉熵</p>\n<p>Softmax分类</p>\n<p>对数几率回归解决的是二分类的问题</p>\n<p>对于多个选项的问题,我们可以使用softmax函数</p>\n<p>它是对数几率回归在N个可能不同的值上的推广</p>\n<p>神经网络的原始输出不是一个概率值,实际上只是输入的数值做了复杂的加权和与非线性处理之后的一个值而已,那么如何将这个输出变为概率分布</p>\n<p>这就是Softmax层的作用</p>\n<p>softmax要求每个样本必须属于某个类别,且所有可能的样本均被覆盖</p>\n<p>softmax个样本分量之和为1</p>\n<p>当只有两个类别时,与对数几率回归完全相同</p>\n<p>在tf.keras里,对于多分类问题使用categorical_crossentropy和sparse_categorical_crossentopy来计算softmax交叉熵</p>\n<p>Fashion MNIST数据集: 70000张灰度图像,10个类别  :衣物</p>\n<p>Fashion MNIST的作用是成为经典MNIST数据集的简易替换,MNIST数据集包含手写数字(0,1,2等)的图像,这些图像的格式与本节课中使用的服饰图像的格式相同</p>\n<p>Fashion MNIST比常规MNIST手写数据集更挑战性.</p>\n<p>这两个数据集都相对较小.用于验证某个算法能否如期正常运行,它们都是测试和调试代码的良好起点</p>\n<p>MNIST手写数据集将作为作业交给大家自己完成\\</p>\n<p>使用60000张图像训练网络,使用10000张图像评估经过学习的网络分类图像的准确率</p>\n<p>可以从Tensorflow 直接访问Fashion MNIST, 只需导入和加载数据即可</p>\n<p>优化函数,学习速率,反向传播算法</p>\n<p>学习速率:</p>\n<pre><code>梯度就是表明损失函数相对参数的变化率\n\n对梯度进行缩放的参数被称为学习速率\n\n学习速率是一种超参数或对模型的一种手工可配置的设置\n</code></pre>\n<p> 需要为它指定正确的值. 如果学习速率太小,则找到损失函数极小值点时可能需要许多迭代,如果太大,则算法可能会 “跳过” 极小值点并且因周期性的 “跳跃” 而永远无法找到极小值点</p>\n<p>在具体实践中,可以通过查看损失函数值随时间的变化曲线,来判断学习速率的选取是合适的</p>\n<p>合适的学习速率,损失函数会随时间下降,直到一个底部,不合适的学习速率,损失函数可能会发生震荡</p>\n<p>在调整学习速率时,既需要使其足够小,保证不至于发生超调,也要保证它足够大,以使损失函数能够尽快下降,从而可通过较少次数的迭代更快的完成学习</p>\n<p>反向传播算法:</p>\n<pre><code>反向传播算法是一种高效计算数据流图中梯度的技术\n\n每一层的导数都是后一层的导数与前一层输出之积,这正是链式法则的奇妙之处,误差反向传播算法利用的正是这一特点\n</code></pre>\n<p>前馈时,从输入开始,逐一计算每个隐含层的输出,直到输出层</p>\n<p>然后开始计算导数,并从输出层经各隐含层逐一反向传播,为了减少计算量,还需对所有已完成的元素进行复用,这便是反向传播算法名称的由来</p>\n<p>常见的优化函数</p>\n<p>优化器是编译模型所需的两个参数之一</p>\n<p>你可以先实例化一个优化器对象,然后将它传入</p>\n<p>model.compile(),或者你可以通过名称来调用优化器,在后一种情况下,将使用优化器的默认参数</p>\n<p>1,SGD:随机梯度下降优化器</p>\n<p>随机梯度下降优化器SGD和min-batch是同一个意思,抽取m个小批量(独立同分布)样本,通过计算他们平均度均值</p>\n<p>SGD参数(了解):</p>\n<p>lr: float &gt;&#x3D; 0.学习率</p>\n<p>momentum:float &gt;&#x3D; 0.参数,用于加速SGD在相关方向上前进,并抑制震荡</p>\n<p>decay:float &gt;&#x3D; 0.每次参数更新后学习率衰减值</p>\n<p>nesterov:boolean.是否使用Nesterov动量</p>\n<p>RMSprop: 经验上,RMSProp被证明有效且实用的深度学习网络优化算法</p>\n<p>RMSProp增加了一个衰减系数来控制历史信息的获取多少</p>\n<p>RMSProp会对学习率进行衰减</p>\n<p>建议使用优化器默认参数(除了学习率lr,它可以被自由调节)</p>\n<p>这个优化器通常是训练神经网络RNN的不错选择</p>\n<p>2,Adam优化器(最常用,用的最多)</p>\n<pre><code>1,Adam优化器可以看做是修正后的Momentum+RMSProp算法\n\n2,Adam通常被认为对超参数的选择相当棒\n\n3,学习率建议为0.001\n</code></pre>\n<p>Adam是一种可以替代传统随机梯度下降过程的一阶优化算法,它能基于训练数据迭代地更新神经网络权重</p>\n<p>Adam通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率</p>\n<p>参数:</p>\n<p>lr: float &gt;&#x3D; 0.学习率</p>\n<p>beta_1:float, 0 &lt; beta &lt; 1.通常接近于1</p>\n<p>beta_2:float, 0 &lt; beta &lt; 1.通常接近于1</p>\n<p>decay:float &gt;&#x3D; 0.每次参数更新后学习率衰减值</p>\n<p>网络优化与参数选择</p>\n<p>网络容量:</p>\n<pre><code>与网络中的可训练参数成正比\n</code></pre>\n<p>网络中的神经单元数越多,层数越多,神经网络的拟合能力越强</p>\n<p>但是训练速度,难度越大,越容易产生过拟合</p>\n<p>如何选择超参数:</p>\n<pre><code>就是在搭建神经网络中,需要我们自己如选择(不是通过梯度下降算法去优化)的那些参数\n</code></pre>\n<p>eg:中间层的神经元个数,学习速率</p>\n<p>如何提高网络的拟合能力</p>\n<p>一种显然的想法是增大网络容量</p>\n<p>1,增加层(这个方法比较显著)</p>\n<p>2,增加隐藏神经元个数</p>\n<pre><code>注意:单层的神经元个数,不能太小,太小的话,会造成信息瓶颈,使得模型欠拟合\n</code></pre>\n<p>Dropout:可以解决过拟合</p>\n<ol>\n<li><p>取平均的作用:  先回到标准的模型即没有dropout我们用相同的训练数据区训练5个不同的神经网络,一般会得到5个不同的结果,此时我们可以采用 ‘5个结果取均值’ 或者 ‘多数取胜的投票策略’ 去决定最终结果</p>\n</li>\n<li><p>减少神经元之间复杂的共适应关系,因为dropout程序导致两个神经元不一定每次在一个dropout网络中出现,这样权值的更新不再依赖于有固定关系的隐含节点的共同作用,阻止了某些特征仅仅在其他特征下才有效果的情况</p>\n</li>\n</ol>\n<p>3)类似于性别在生物进化中的角色</p>\n<p>物种为了生存往往会倾向于适应这种环境,环境突变则会导致物种难以做出及时反映,性别的出现可以繁衍出适应新环境的变种,有效的阻止过拟合,即避免环境改变时物种可能面临的灭绝</p>\n<p>参数选择的原则:</p>\n<pre><code>理想的模型是刚好在欠拟合和过拟合的界线上,也就是正好拟合数据\n</code></pre>\n<p>首先开发一个过拟合的模型:</p>\n<p>(1)添加更多的层</p>\n<p>(2)让每一层变得更大</p>\n<p>(3)训练更多的轮次</p>\n<p>然后抑制过拟合:</p>\n<p>(1)dropout</p>\n<p>(2)正则化</p>\n<p>(3)图像增强</p>\n<p>再次,调节超参数,</p>\n<p>学习速率</p>\n<p>隐藏层单元数</p>\n<p>训练轮次</p>\n<p>超参数的选择是一个经验和不断测试的结果</p>\n<p>经典机器学习的方法,如特征工程,增加训练数据也要做</p>\n<p>交叉验证</p>\n<p>构建网络的总原则:    保证神经网络容量足够拟合数据</p>\n<p>一. 增大网络数量,知道过拟合</p>\n<p>二, 采取措施抑制过拟合</p>\n<p>三. 继续增大网络容量,直到过拟合</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Tensorflow使用学习说明:</p>\n<p>1,环境配置(Window环境下):</p>\n<p><a href=\"https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0\">软件链接地址</a></p>\n<p>安装VC_redist.x64.exe软件,Microsoft Visual C++ 环境</p>\n<p>2,安装tensorflow,</p>\n<p>版本说明:</p>\n<p>针对电脑CUDA大小下载不同版本的tensorflow</p>\n<p><a href=\"https://tensorflow.google.cn/install/source_windows\">对应关系</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38295511/article/details/89223169\">查看CUDA方法</a></p>\n<p>①打开控制面板</p>\n<p>②搜索NVIDIA控制面板</p>\n<p>③点击系统信息</p>\n<p>④点击组件</p>\n<p>⑤通过NVCUDA.DLL查看CUDA版本</p>\n<p>eg:本机的CUDA版本为11.3.55 , 对应的tensorflow版本为2.4.0</p>\n<p>下载方式为:<a href=\"https://pypi.org/project/tensorflow/2.4.0/#files\">https://pypi.org/project/tensorflow/2.4.0/#files</a></p>\n<p>pip install 包名</p>\n<p>线性回归和梯度下降算法</p>\n<p>单变量线性回归算法: f(x) &#x3D; ax + b,映射输入特征和输出值</p>\n<p>#绘制点状图,受教育年限和收入之间的线性关系: f(x) &#x3D; ax + b </p>\n<p>预测目标与损失函数</p>\n<p>目标:</p>\n<pre><code>预测函数f(x)与真实值之间的整体误差最小\n\n如何定义误差最小\n</code></pre>\n<p>损失函数:</p>\n<pre><code>使用均方差作为成本函数,\n\n均方差:\n\n    预测值和真实值之间差的平方取均值\n</code></pre>\n<p>成本函数与损失函数</p>\n<p>优化目标(y代表实际的收入)</p>\n<p>找到合适的a和b,使(f(x)-y)²越小越好  —&gt;成本函数(均方差)    [f(x) &#x3D; ax + b]    —&gt;  ((ax + b) - y)²值最小</p>\n<p>已知:x和y</p>\n<p>注意: 求解的是参数a和b</p>\n<p>成本函数与损失函数</p>\n<p>如何优化:</p>\n<p>使用梯度下降算法</p>\n<p>梯度下降算法:</p>\n<pre><code>是一种致力于找到函数极值点的算法,将梯度下降算法应用于寻找损失函数的极值点便构成了依据输入数据的模型学习\n\n梯度的输出是一个由若干偏导数构成的向量,它的每个分量对应于函数对输入向量的相应分量的偏导  (查找之前学过的求偏导)\n\n\n梯度的输出向量表明了在每个位置损失函数增长最快的方向,可将它视为表示了在函数的每个位置向哪个方向移动函数值可以增长\n</code></pre>\n<p>多层感知器(神经网络与激活函数)</p>\n<p>输入(x1,x2,x3) 1    权重(w1,w2,w3)b    求和       传递函数    输出      </p>\n<p>生物的神经元一层一层连接起来,当神经信号达到某一条件,这个神经元就会激活,然后传递信息下去,</p>\n<p>为了继续使用神经网络解决这种不具备线性可分性的问题,采取在神经网络的输入端和输出端之间插入更多的神经元</p>\n<p>输入层 —&gt; 隐含层 —&gt; 输出层 —&gt; 输出</p>\n<p>神经元的启发</p>\n<p>激活函数:</p>\n<p>relu</p>\n<p>sigmoid(查看之前公式)</p>\n<p>tanh</p>\n<p>leak relu</p>\n<p>广告,销量的预测</p>\n<p>逻辑回归</p>\n<p>sigmoid函数是一个概率分布函数,给定某个输入,它将输出为一个概率值</p>\n<p>0~1之间的一个概率值</p>\n<p>线性回归预测的是一个连续值,</p>\n<p>逻辑回归给出的 “是” 和 “否”的回答</p>\n<p>逻辑回归损失函数</p>\n<p>平方差所惩罚的是与损失为同一数量级的的情形</p>\n<p>对于分类问题,我们最好的使用交叉熵损失函数会更有效</p>\n<p>交叉熵会输出一个更大的 “损失”</p>\n<p>交叉熵损失函数</p>\n<p>交叉熵刻画的是实际输出(概率)与期望输出(概率)的距离,也就是交叉熵的值越小,两个概率分布就越接近.假设概率分布p为期望输出,概率分布q为实际输出,H(p,q)为交叉熵,</p>\n<p>$$<br>H(p,q) &#x3D; -\\sum_{x}p(x)logq(x)<br>$$<br>在keras里,使用binary_crossentropy来计算交叉熵</p>\n<p>Softmax分类</p>\n<p>对数几率回归解决的是二分类的问题</p>\n<p>对于多个选项的问题,我们可以使用softmax函数</p>\n<p>它是对数几率回归在N个可能不同的值上的推广</p>\n<p>神经网络的原始输出不是一个概率值,实际上只是输入的数值做了复杂的加权和与非线性处理之后的一个值而已,那么如何将这个输出变为概率分布</p>\n<p>这就是Softmax层的作用</p>\n<p>softmax要求每个样本必须属于某个类别,且所有可能的样本均被覆盖</p>\n<p>softmax个样本分量之和为1</p>\n<p>当只有两个类别时,与对数几率回归完全相同</p>\n<p>在tf.keras里,对于多分类问题使用categorical_crossentropy和sparse_categorical_crossentopy来计算softmax交叉熵</p>\n<p>Fashion MNIST数据集: 70000张灰度图像,10个类别  :衣物</p>\n<p>Fashion MNIST的作用是成为经典MNIST数据集的简易替换,MNIST数据集包含手写数字(0,1,2等)的图像,这些图像的格式与本节课中使用的服饰图像的格式相同</p>\n<p>Fashion MNIST比常规MNIST手写数据集更挑战性.</p>\n<p>这两个数据集都相对较小.用于验证某个算法能否如期正常运行,它们都是测试和调试代码的良好起点</p>\n<p>MNIST手写数据集将作为作业交给大家自己完成\\</p>\n<p>使用60000张图像训练网络,使用10000张图像评估经过学习的网络分类图像的准确率</p>\n<p>可以从Tensorflow 直接访问Fashion MNIST, 只需导入和加载数据即可</p>\n<p>优化函数,学习速率,反向传播算法</p>\n<p>学习速率:</p>\n<pre><code>梯度就是表明损失函数相对参数的变化率\n\n对梯度进行缩放的参数被称为学习速率\n\n学习速率是一种超参数或对模型的一种手工可配置的设置\n</code></pre>\n<p> 需要为它指定正确的值. 如果学习速率太小,则找到损失函数极小值点时可能需要许多迭代,如果太大,则算法可能会 “跳过” 极小值点并且因周期性的 “跳跃” 而永远无法找到极小值点</p>\n<p>在具体实践中,可以通过查看损失函数值随时间的变化曲线,来判断学习速率的选取是合适的</p>\n<p>合适的学习速率,损失函数会随时间下降,直到一个底部,不合适的学习速率,损失函数可能会发生震荡</p>\n<p>在调整学习速率时,既需要使其足够小,保证不至于发生超调,也要保证它足够大,以使损失函数能够尽快下降,从而可通过较少次数的迭代更快的完成学习</p>\n<p>反向传播算法:</p>\n<pre><code>反向传播算法是一种高效计算数据流图中梯度的技术\n\n每一层的导数都是后一层的导数与前一层输出之积,这正是链式法则的奇妙之处,误差反向传播算法利用的正是这一特点\n</code></pre>\n<p>前馈时,从输入开始,逐一计算每个隐含层的输出,直到输出层</p>\n<p>然后开始计算导数,并从输出层经各隐含层逐一反向传播,为了减少计算量,还需对所有已完成的元素进行复用,这便是反向传播算法名称的由来</p>\n<p>常见的优化函数</p>\n<p>优化器是编译模型所需的两个参数之一</p>\n<p>你可以先实例化一个优化器对象,然后将它传入</p>\n<p>model.compile(),或者你可以通过名称来调用优化器,在后一种情况下,将使用优化器的默认参数</p>\n<p>1,SGD:随机梯度下降优化器</p>\n<p>随机梯度下降优化器SGD和min-batch是同一个意思,抽取m个小批量(独立同分布)样本,通过计算他们平均度均值</p>\n<p>SGD参数(了解):</p>\n<p>lr: float &gt;&#x3D; 0.学习率</p>\n<p>momentum:float &gt;&#x3D; 0.参数,用于加速SGD在相关方向上前进,并抑制震荡</p>\n<p>decay:float &gt;&#x3D; 0.每次参数更新后学习率衰减值</p>\n<p>nesterov:boolean.是否使用Nesterov动量</p>\n<p>RMSprop: 经验上,RMSProp被证明有效且实用的深度学习网络优化算法</p>\n<p>RMSProp增加了一个衰减系数来控制历史信息的获取多少</p>\n<p>RMSProp会对学习率进行衰减</p>\n<p>建议使用优化器默认参数(除了学习率lr,它可以被自由调节)</p>\n<p>这个优化器通常是训练神经网络RNN的不错选择</p>\n<p>2,Adam优化器(最常用,用的最多)</p>\n<pre><code>1,Adam优化器可以看做是修正后的Momentum+RMSProp算法\n\n2,Adam通常被认为对超参数的选择相当棒\n\n3,学习率建议为0.001\n</code></pre>\n<p>Adam是一种可以替代传统随机梯度下降过程的一阶优化算法,它能基于训练数据迭代地更新神经网络权重</p>\n<p>Adam通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率</p>\n<p>参数:</p>\n<p>lr: float &gt;&#x3D; 0.学习率</p>\n<p>beta_1:float, 0 &lt; beta &lt; 1.通常接近于1</p>\n<p>beta_2:float, 0 &lt; beta &lt; 1.通常接近于1</p>\n<p>decay:float &gt;&#x3D; 0.每次参数更新后学习率衰减值</p>\n<p>网络优化与参数选择</p>\n<p>网络容量:</p>\n<pre><code>与网络中的可训练参数成正比\n</code></pre>\n<p>网络中的神经单元数越多,层数越多,神经网络的拟合能力越强</p>\n<p>但是训练速度,难度越大,越容易产生过拟合</p>\n<p>如何选择超参数:</p>\n<pre><code>就是在搭建神经网络中,需要我们自己如选择(不是通过梯度下降算法去优化)的那些参数\n</code></pre>\n<p>eg:中间层的神经元个数,学习速率</p>\n<p>如何提高网络的拟合能力</p>\n<p>一种显然的想法是增大网络容量</p>\n<p>1,增加层(这个方法比较显著)</p>\n<p>2,增加隐藏神经元个数</p>\n<pre><code>注意:单层的神经元个数,不能太小,太小的话,会造成信息瓶颈,使得模型欠拟合\n</code></pre>\n<p>Dropout:可以解决过拟合</p>\n<ol>\n<li><p>取平均的作用:  先回到标准的模型即没有dropout我们用相同的训练数据区训练5个不同的神经网络,一般会得到5个不同的结果,此时我们可以采用 ‘5个结果取均值’ 或者 ‘多数取胜的投票策略’ 去决定最终结果</p>\n</li>\n<li><p>减少神经元之间复杂的共适应关系,因为dropout程序导致两个神经元不一定每次在一个dropout网络中出现,这样权值的更新不再依赖于有固定关系的隐含节点的共同作用,阻止了某些特征仅仅在其他特征下才有效果的情况</p>\n</li>\n</ol>\n<p>3)类似于性别在生物进化中的角色</p>\n<p>物种为了生存往往会倾向于适应这种环境,环境突变则会导致物种难以做出及时反映,性别的出现可以繁衍出适应新环境的变种,有效的阻止过拟合,即避免环境改变时物种可能面临的灭绝</p>\n<p>参数选择的原则:</p>\n<pre><code>理想的模型是刚好在欠拟合和过拟合的界线上,也就是正好拟合数据\n</code></pre>\n<p>首先开发一个过拟合的模型:</p>\n<p>(1)添加更多的层</p>\n<p>(2)让每一层变得更大</p>\n<p>(3)训练更多的轮次</p>\n<p>然后抑制过拟合:</p>\n<p>(1)dropout</p>\n<p>(2)正则化</p>\n<p>(3)图像增强</p>\n<p>再次,调节超参数,</p>\n<p>学习速率</p>\n<p>隐藏层单元数</p>\n<p>训练轮次</p>\n<p>超参数的选择是一个经验和不断测试的结果</p>\n<p>经典机器学习的方法,如特征工程,增加训练数据也要做</p>\n<p>交叉验证</p>\n<p>构建网络的总原则:    保证神经网络容量足够拟合数据</p>\n<p>一. 增大网络数量,知道过拟合</p>\n<p>二, 采取措施抑制过拟合</p>\n<p>三. 继续增大网络容量,直到过拟合</p>\n"},{"title":"web开发2_python项目部署","comments":1,"copyright":true,"abbrlink":"dbe3cbd9","date":"2022-08-29T13:00:01.000Z","_content":"\npm2运行命令:\npm2 ls\npm2 start \npm2 stop\npm2 log\n\npython文件运行命令:\nnohup python3 -u risk_sql.py >risk.log &\n\npm2 start /home/project/net_diagnose/sanit.py  -x --interpreter python3\n\npython3 manage.py runserver 0.0.0.0:8000\n\n鉴权:\n基于BaseResource:测试注释掉,线上取消注释\n\n运行flask:\nenv FLASK_APP=scheduler.py flask run -h 0.0.0.0 -p 5008\n\ndocker容器部署:\ndocker+Nginx+supervisor+gunicron\n\n1. `docker exec -it saint_container bash`\n2. `supervisorctl start monitor_business`\n\n部署方式1:\n\tcd /home/project\n\tll\n\tdocker images\n\tdocker ps -a\n\tcd net_diagnose\n\tcd /etc/supervisord.d/\n\tvi velery.ini\n\tcd /home/log\n\tvi saintwork.log\n\tcd ../project/net_diagnose\n\tsupervisorctl\n    \n    \npython3 -m pip install --upgrade pip\npip3 install -r requirements.txt -i  http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\n部署方式2:\nnginx + pm2/uwsgi/gunicorn/supervisor + nohup\n工具安装:\nsudo apt-get install nginx\n\npip安装部署工具\n\npip install gunicorn\npip install supervisor\npip install uwsgi\n\n安装PM2\n\nsudo apt-get install -y nodejs / sudo yum -y install nodejs \nsudo npm install pm2 -g \n\n- **gunicorn部署**\n\ngunicorn  -c 配置文件 运行模块名:应用名\n\n  nohup gunicorn -b 0.0.0.0:9000 -w 4 --access-logfile=logs/access.log --error-logfile=logs/error.log app:app > nohup.log &\n\n  nohup gunicorn -b 0.0.0.0:9000 -w 4 app:app > nohup.log &\n\n开启异步并发\n\n  nohup gunicorn -b 0.0.0.0:9000 -w 4 -k gevent app:app > nohup.log &\n\n  其中 -k, --worker-class 可以指定异步进程类 需要先安装: `pip3 install psutil==5.7.0`\n\n  pm2部署:\n\npm2 start app.py -x --interpreter python3  -o ./logs/access.log -e ./logs/error.log -i max\n\n- **docker部署**\n\n  docker start saint_container\n  docker exec -it saint_container bash\n  service supervisor start\n  ps ef | grep nginx | grep -v grep | awk 'print {$2}' | xargs kill -9\n  supervisord -c /etc/supervisor/supervisord.conf \n  supervisorctl\n\n日志\n\n  less -fN /opt/logs/process/gunicorn_out_port_9001.log\n  less -fN /opt/logs/process/nginx_stdout.log\n  less -fN /opt/logs/gunicorn/access.log\n  less -fN /opt/logs/nginx/access.log\n\n\n依赖安装:\npipreqs ./ --encoding=utf8 --force\npip3 install -r requirements.txt -i  http://pypi.douban.com/simple --trusted-host \n\n=== 源 ===\n\nhttps://pypi.tuna.tsinghua.edu.cn/simple      # 清华源\nhttps://mirrors.aliyun.com/pypi/simple/       # 阿里源\nhttp://mirrors.cloud.tencent.com/pypi/simple  # 腾讯源\nhttp://pypi.douban.com/simple/                # 豆瓣源pypi.douban.com\n\n部署:\n\nnohup:\n\nnohup python3 -u server.py > nohup.log &\n\npm2:\n\npm2 start server.py -x --interpreter python3  -o ./logs/access.log -e ./logs/error.log\n\nor\n\npm2 start ecosystem.config.js --env production\n\ndocker:\n\ndocker rmi $(docker images | grep \"<none>\"| awk '{print $3}')\n./gen_image_push.sh\ndocker run -itd --name deploy -p 8000:8000 <container_id> \n\ntar xzvf aliyun-cli-linux-3.0.16-amd64.tgz\n\nchmod +x ./scheduler.sh && ./scheduler.sh\n\n部署:\n\n1. \n\n项目部署:\n\n方法一：\n\n  nohup python3 -u Main.py > nohup.log &\n\n方法二：\n\n  pm2 start Main.py -x --interpreter python3  -o ./logs/pm2_info.log -e ./logs/pm2_error.log\n\n方法三：\n\n  supervisord -c /etc/supervisor.conf\n\nor \n\n  cd Bin && sh start.sh\n\n    # 任务部署:\n    \n    1. celery+supervisor\n    \n    supervisord -c /etc/supervisord.conf\n    supervisorctl reload\n    \n    2. 定时框架+pm2\n    \n    pm2 start Tasker/schedule_task.py -x --interpreter python3  -o ./logs/node_task.log -e ./logs/node_task_error.log\n    \n    3. tornado+定时框架\n    \n    与tornado主程序一起执行\n    \n    查看rds是否在白名单\n\ntelnet rm-bp1ujkssv4gxkqqvv4o.mysql.rds.aliyuncs.com 3306\n","source":"_posts/web开发2-python项目部署.md","raw":"---\ntitle: web开发2_python项目部署\ncomments: true\ncopyright: true\ntags:\n  - web开发\n  - python\ncategories:\n  - web开发\nabbrlink: dbe3cbd9\ndate: 2022-08-29 21:00:01\n---\n\npm2运行命令:\npm2 ls\npm2 start \npm2 stop\npm2 log\n\npython文件运行命令:\nnohup python3 -u risk_sql.py >risk.log &\n\npm2 start /home/project/net_diagnose/sanit.py  -x --interpreter python3\n\npython3 manage.py runserver 0.0.0.0:8000\n\n鉴权:\n基于BaseResource:测试注释掉,线上取消注释\n\n运行flask:\nenv FLASK_APP=scheduler.py flask run -h 0.0.0.0 -p 5008\n\ndocker容器部署:\ndocker+Nginx+supervisor+gunicron\n\n1. `docker exec -it saint_container bash`\n2. `supervisorctl start monitor_business`\n\n部署方式1:\n\tcd /home/project\n\tll\n\tdocker images\n\tdocker ps -a\n\tcd net_diagnose\n\tcd /etc/supervisord.d/\n\tvi velery.ini\n\tcd /home/log\n\tvi saintwork.log\n\tcd ../project/net_diagnose\n\tsupervisorctl\n    \n    \npython3 -m pip install --upgrade pip\npip3 install -r requirements.txt -i  http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\n部署方式2:\nnginx + pm2/uwsgi/gunicorn/supervisor + nohup\n工具安装:\nsudo apt-get install nginx\n\npip安装部署工具\n\npip install gunicorn\npip install supervisor\npip install uwsgi\n\n安装PM2\n\nsudo apt-get install -y nodejs / sudo yum -y install nodejs \nsudo npm install pm2 -g \n\n- **gunicorn部署**\n\ngunicorn  -c 配置文件 运行模块名:应用名\n\n  nohup gunicorn -b 0.0.0.0:9000 -w 4 --access-logfile=logs/access.log --error-logfile=logs/error.log app:app > nohup.log &\n\n  nohup gunicorn -b 0.0.0.0:9000 -w 4 app:app > nohup.log &\n\n开启异步并发\n\n  nohup gunicorn -b 0.0.0.0:9000 -w 4 -k gevent app:app > nohup.log &\n\n  其中 -k, --worker-class 可以指定异步进程类 需要先安装: `pip3 install psutil==5.7.0`\n\n  pm2部署:\n\npm2 start app.py -x --interpreter python3  -o ./logs/access.log -e ./logs/error.log -i max\n\n- **docker部署**\n\n  docker start saint_container\n  docker exec -it saint_container bash\n  service supervisor start\n  ps ef | grep nginx | grep -v grep | awk 'print {$2}' | xargs kill -9\n  supervisord -c /etc/supervisor/supervisord.conf \n  supervisorctl\n\n日志\n\n  less -fN /opt/logs/process/gunicorn_out_port_9001.log\n  less -fN /opt/logs/process/nginx_stdout.log\n  less -fN /opt/logs/gunicorn/access.log\n  less -fN /opt/logs/nginx/access.log\n\n\n依赖安装:\npipreqs ./ --encoding=utf8 --force\npip3 install -r requirements.txt -i  http://pypi.douban.com/simple --trusted-host \n\n=== 源 ===\n\nhttps://pypi.tuna.tsinghua.edu.cn/simple      # 清华源\nhttps://mirrors.aliyun.com/pypi/simple/       # 阿里源\nhttp://mirrors.cloud.tencent.com/pypi/simple  # 腾讯源\nhttp://pypi.douban.com/simple/                # 豆瓣源pypi.douban.com\n\n部署:\n\nnohup:\n\nnohup python3 -u server.py > nohup.log &\n\npm2:\n\npm2 start server.py -x --interpreter python3  -o ./logs/access.log -e ./logs/error.log\n\nor\n\npm2 start ecosystem.config.js --env production\n\ndocker:\n\ndocker rmi $(docker images | grep \"<none>\"| awk '{print $3}')\n./gen_image_push.sh\ndocker run -itd --name deploy -p 8000:8000 <container_id> \n\ntar xzvf aliyun-cli-linux-3.0.16-amd64.tgz\n\nchmod +x ./scheduler.sh && ./scheduler.sh\n\n部署:\n\n1. \n\n项目部署:\n\n方法一：\n\n  nohup python3 -u Main.py > nohup.log &\n\n方法二：\n\n  pm2 start Main.py -x --interpreter python3  -o ./logs/pm2_info.log -e ./logs/pm2_error.log\n\n方法三：\n\n  supervisord -c /etc/supervisor.conf\n\nor \n\n  cd Bin && sh start.sh\n\n    # 任务部署:\n    \n    1. celery+supervisor\n    \n    supervisord -c /etc/supervisord.conf\n    supervisorctl reload\n    \n    2. 定时框架+pm2\n    \n    pm2 start Tasker/schedule_task.py -x --interpreter python3  -o ./logs/node_task.log -e ./logs/node_task_error.log\n    \n    3. tornado+定时框架\n    \n    与tornado主程序一起执行\n    \n    查看rds是否在白名单\n\ntelnet rm-bp1ujkssv4gxkqqvv4o.mysql.rds.aliyuncs.com 3306\n","slug":"web开发2-python项目部署","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq1001h81nvc5j2278c","content":"<p>pm2运行命令:<br>pm2 ls<br>pm2 start<br>pm2 stop<br>pm2 log</p>\n<p>python文件运行命令:<br>nohup python3 -u risk_sql.py &gt;risk.log &amp;</p>\n<p>pm2 start &#x2F;home&#x2F;project&#x2F;net_diagnose&#x2F;sanit.py  -x –interpreter python3</p>\n<p>python3 manage.py runserver 0.0.0.0:8000</p>\n<p>鉴权:<br>基于BaseResource:测试注释掉,线上取消注释</p>\n<p>运行flask:<br>env FLASK_APP&#x3D;scheduler.py flask run -h 0.0.0.0 -p 5008</p>\n<p>docker容器部署:<br>docker+Nginx+supervisor+gunicron</p>\n<ol>\n<li><code>docker exec -it saint_container bash</code></li>\n<li><code>supervisorctl start monitor_business</code></li>\n</ol>\n<p>部署方式1:<br>    cd &#x2F;home&#x2F;project<br>    ll<br>    docker images<br>    docker ps -a<br>    cd net_diagnose<br>    cd &#x2F;etc&#x2F;supervisord.d&#x2F;<br>    vi velery.ini<br>    cd &#x2F;home&#x2F;log<br>    vi saintwork.log<br>    cd ..&#x2F;project&#x2F;net_diagnose<br>    supervisorctl</p>\n<p>python3 -m pip install –upgrade pip<br>pip3 install -r requirements.txt -i  <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host pypi.douban.com</p>\n<p>部署方式2:<br>nginx + pm2&#x2F;uwsgi&#x2F;gunicorn&#x2F;supervisor + nohup<br>工具安装:<br>sudo apt-get install nginx</p>\n<p>pip安装部署工具</p>\n<p>pip install gunicorn<br>pip install supervisor<br>pip install uwsgi</p>\n<p>安装PM2</p>\n<p>sudo apt-get install -y nodejs &#x2F; sudo yum -y install nodejs<br>sudo npm install pm2 -g </p>\n<ul>\n<li><strong>gunicorn部署</strong></li>\n</ul>\n<p>gunicorn  -c 配置文件 运行模块名:应用名</p>\n<p>  nohup gunicorn -b 0.0.0.0:9000 -w 4 –access-logfile&#x3D;logs&#x2F;access.log –error-logfile&#x3D;logs&#x2F;error.log app:app &gt; nohup.log &amp;</p>\n<p>  nohup gunicorn -b 0.0.0.0:9000 -w 4 app:app &gt; nohup.log &amp;</p>\n<p>开启异步并发</p>\n<p>  nohup gunicorn -b 0.0.0.0:9000 -w 4 -k gevent app:app &gt; nohup.log &amp;</p>\n<p>  其中 -k, –worker-class 可以指定异步进程类 需要先安装: <code>pip3 install psutil==5.7.0</code></p>\n<p>  pm2部署:</p>\n<p>pm2 start app.py -x –interpreter python3  -o .&#x2F;logs&#x2F;access.log -e .&#x2F;logs&#x2F;error.log -i max</p>\n<ul>\n<li><p><strong>docker部署</strong></p>\n<p>docker start saint_container<br>docker exec -it saint_container bash<br>service supervisor start<br>ps ef | grep nginx | grep -v grep | awk ‘print {$2}’ | xargs kill -9<br>supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf<br>supervisorctl</p>\n</li>\n</ul>\n<p>日志</p>\n<p>  less -fN &#x2F;opt&#x2F;logs&#x2F;process&#x2F;gunicorn_out_port_9001.log<br>  less -fN &#x2F;opt&#x2F;logs&#x2F;process&#x2F;nginx_stdout.log<br>  less -fN &#x2F;opt&#x2F;logs&#x2F;gunicorn&#x2F;access.log<br>  less -fN &#x2F;opt&#x2F;logs&#x2F;nginx&#x2F;access.log</p>\n<p>依赖安装:<br>pipreqs .&#x2F; –encoding&#x3D;utf8 –force<br>pip3 install -r requirements.txt -i  <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host </p>\n<p>&#x3D;&#x3D;&#x3D; 源 &#x3D;&#x3D;&#x3D;</p>\n<p><a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a>      # 清华源<br><a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a>       # 阿里源<br><a href=\"http://mirrors.cloud.tencent.com/pypi/simple\">http://mirrors.cloud.tencent.com/pypi/simple</a>  # 腾讯源<br><a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a>                # 豆瓣源pypi.douban.com</p>\n<p>部署:</p>\n<p>nohup:</p>\n<p>nohup python3 -u server.py &gt; nohup.log &amp;</p>\n<p>pm2:</p>\n<p>pm2 start server.py -x –interpreter python3  -o .&#x2F;logs&#x2F;access.log -e .&#x2F;logs&#x2F;error.log</p>\n<p>or</p>\n<p>pm2 start ecosystem.config.js –env production</p>\n<p>docker:</p>\n<p>docker rmi $(docker images | grep “<none>“| awk ‘{print $3}’)<br>.&#x2F;gen_image_push.sh<br>docker run -itd –name deploy -p 8000:8000 <container_id> </p>\n<p>tar xzvf aliyun-cli-linux-3.0.16-amd64.tgz</p>\n<p>chmod +x .&#x2F;scheduler.sh &amp;&amp; .&#x2F;scheduler.sh</p>\n<p>部署:</p>\n<p>1. </p>\n<p>项目部署:</p>\n<p>方法一：</p>\n<p>  nohup python3 -u Main.py &gt; nohup.log &amp;</p>\n<p>方法二：</p>\n<p>  pm2 start Main.py -x –interpreter python3  -o .&#x2F;logs&#x2F;pm2_info.log -e .&#x2F;logs&#x2F;pm2_error.log</p>\n<p>方法三：</p>\n<p>  supervisord -c &#x2F;etc&#x2F;supervisor.conf</p>\n<p>or </p>\n<p>  cd Bin &amp;&amp; sh start.sh</p>\n<pre><code># 任务部署:\n\n1. celery+supervisor\n\nsupervisord -c /etc/supervisord.conf\nsupervisorctl reload\n\n2. 定时框架+pm2\n\npm2 start Tasker/schedule_task.py -x --interpreter python3  -o ./logs/node_task.log -e ./logs/node_task_error.log\n\n3. tornado+定时框架\n\n与tornado主程序一起执行\n\n查看rds是否在白名单\n</code></pre>\n<p>telnet rm-bp1ujkssv4gxkqqvv4o.mysql.rds.aliyuncs.com 3306</p>\n","site":{"data":{}},"excerpt":"","more":"<p>pm2运行命令:<br>pm2 ls<br>pm2 start<br>pm2 stop<br>pm2 log</p>\n<p>python文件运行命令:<br>nohup python3 -u risk_sql.py &gt;risk.log &amp;</p>\n<p>pm2 start &#x2F;home&#x2F;project&#x2F;net_diagnose&#x2F;sanit.py  -x –interpreter python3</p>\n<p>python3 manage.py runserver 0.0.0.0:8000</p>\n<p>鉴权:<br>基于BaseResource:测试注释掉,线上取消注释</p>\n<p>运行flask:<br>env FLASK_APP&#x3D;scheduler.py flask run -h 0.0.0.0 -p 5008</p>\n<p>docker容器部署:<br>docker+Nginx+supervisor+gunicron</p>\n<ol>\n<li><code>docker exec -it saint_container bash</code></li>\n<li><code>supervisorctl start monitor_business</code></li>\n</ol>\n<p>部署方式1:<br>    cd &#x2F;home&#x2F;project<br>    ll<br>    docker images<br>    docker ps -a<br>    cd net_diagnose<br>    cd &#x2F;etc&#x2F;supervisord.d&#x2F;<br>    vi velery.ini<br>    cd &#x2F;home&#x2F;log<br>    vi saintwork.log<br>    cd ..&#x2F;project&#x2F;net_diagnose<br>    supervisorctl</p>\n<p>python3 -m pip install –upgrade pip<br>pip3 install -r requirements.txt -i  <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host pypi.douban.com</p>\n<p>部署方式2:<br>nginx + pm2&#x2F;uwsgi&#x2F;gunicorn&#x2F;supervisor + nohup<br>工具安装:<br>sudo apt-get install nginx</p>\n<p>pip安装部署工具</p>\n<p>pip install gunicorn<br>pip install supervisor<br>pip install uwsgi</p>\n<p>安装PM2</p>\n<p>sudo apt-get install -y nodejs &#x2F; sudo yum -y install nodejs<br>sudo npm install pm2 -g </p>\n<ul>\n<li><strong>gunicorn部署</strong></li>\n</ul>\n<p>gunicorn  -c 配置文件 运行模块名:应用名</p>\n<p>  nohup gunicorn -b 0.0.0.0:9000 -w 4 –access-logfile&#x3D;logs&#x2F;access.log –error-logfile&#x3D;logs&#x2F;error.log app:app &gt; nohup.log &amp;</p>\n<p>  nohup gunicorn -b 0.0.0.0:9000 -w 4 app:app &gt; nohup.log &amp;</p>\n<p>开启异步并发</p>\n<p>  nohup gunicorn -b 0.0.0.0:9000 -w 4 -k gevent app:app &gt; nohup.log &amp;</p>\n<p>  其中 -k, –worker-class 可以指定异步进程类 需要先安装: <code>pip3 install psutil==5.7.0</code></p>\n<p>  pm2部署:</p>\n<p>pm2 start app.py -x –interpreter python3  -o .&#x2F;logs&#x2F;access.log -e .&#x2F;logs&#x2F;error.log -i max</p>\n<ul>\n<li><p><strong>docker部署</strong></p>\n<p>docker start saint_container<br>docker exec -it saint_container bash<br>service supervisor start<br>ps ef | grep nginx | grep -v grep | awk ‘print {$2}’ | xargs kill -9<br>supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf<br>supervisorctl</p>\n</li>\n</ul>\n<p>日志</p>\n<p>  less -fN &#x2F;opt&#x2F;logs&#x2F;process&#x2F;gunicorn_out_port_9001.log<br>  less -fN &#x2F;opt&#x2F;logs&#x2F;process&#x2F;nginx_stdout.log<br>  less -fN &#x2F;opt&#x2F;logs&#x2F;gunicorn&#x2F;access.log<br>  less -fN &#x2F;opt&#x2F;logs&#x2F;nginx&#x2F;access.log</p>\n<p>依赖安装:<br>pipreqs .&#x2F; –encoding&#x3D;utf8 –force<br>pip3 install -r requirements.txt -i  <a href=\"http://pypi.douban.com/simple\">http://pypi.douban.com/simple</a> –trusted-host </p>\n<p>&#x3D;&#x3D;&#x3D; 源 &#x3D;&#x3D;&#x3D;</p>\n<p><a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a>      # 清华源<br><a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a>       # 阿里源<br><a href=\"http://mirrors.cloud.tencent.com/pypi/simple\">http://mirrors.cloud.tencent.com/pypi/simple</a>  # 腾讯源<br><a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a>                # 豆瓣源pypi.douban.com</p>\n<p>部署:</p>\n<p>nohup:</p>\n<p>nohup python3 -u server.py &gt; nohup.log &amp;</p>\n<p>pm2:</p>\n<p>pm2 start server.py -x –interpreter python3  -o .&#x2F;logs&#x2F;access.log -e .&#x2F;logs&#x2F;error.log</p>\n<p>or</p>\n<p>pm2 start ecosystem.config.js –env production</p>\n<p>docker:</p>\n<p>docker rmi $(docker images | grep “<none>“| awk ‘{print $3}’)<br>.&#x2F;gen_image_push.sh<br>docker run -itd –name deploy -p 8000:8000 <container_id> </p>\n<p>tar xzvf aliyun-cli-linux-3.0.16-amd64.tgz</p>\n<p>chmod +x .&#x2F;scheduler.sh &amp;&amp; .&#x2F;scheduler.sh</p>\n<p>部署:</p>\n<p>1. </p>\n<p>项目部署:</p>\n<p>方法一：</p>\n<p>  nohup python3 -u Main.py &gt; nohup.log &amp;</p>\n<p>方法二：</p>\n<p>  pm2 start Main.py -x –interpreter python3  -o .&#x2F;logs&#x2F;pm2_info.log -e .&#x2F;logs&#x2F;pm2_error.log</p>\n<p>方法三：</p>\n<p>  supervisord -c &#x2F;etc&#x2F;supervisor.conf</p>\n<p>or </p>\n<p>  cd Bin &amp;&amp; sh start.sh</p>\n<pre><code># 任务部署:\n\n1. celery+supervisor\n\nsupervisord -c /etc/supervisord.conf\nsupervisorctl reload\n\n2. 定时框架+pm2\n\npm2 start Tasker/schedule_task.py -x --interpreter python3  -o ./logs/node_task.log -e ./logs/node_task_error.log\n\n3. tornado+定时框架\n\n与tornado主程序一起执行\n\n查看rds是否在白名单\n</code></pre>\n<p>telnet rm-bp1ujkssv4gxkqqvv4o.mysql.rds.aliyuncs.com 3306</p>\n"},{"title":"web开发1_nginx部署","comments":1,"copyright":true,"abbrlink":"3c1ae316","date":"2022-08-29T12:21:10.000Z","_content":"\nuwsgi的安装:\npip install uwsgi\n\n创建配置文件:\nuwsgi8001.ini\n\nuwsgi启动:\nuwsgi --ini uwsgi8001.ini\n\nuwsgi重启：\nuwsgi --reload uwsgi8001.pid\n\nuwsgi停止:\nuwsgi --stop uwsgi8001.pid\n\n\nuwsgi.ini 配置文件内容\n\n[uwsgi]\n#直接做web服务器使用，Django程序所在服务器地址\nhttp=127.0.0.1:8001\n#项目目录\nchdir=/home/parallels/Desktop/meiduo_mall\n#项目中wsgi.py文件的目录，相对于项目目录\nwsgi-file=meiduo_mall/wsgi.py\n进程数\n\nprocesses=2\n线程数\n\nthreads=2\n是否开启master进程\n\nmaster=True\n存放进程编号的文件\n\npidfile=uwsgi.pid\n日志文件，因为uwsgi可以脱离终端在后台运行，日志看不见。我们以前的runserver是依赖终端的\n\ndaemonize=uwsgi.log\n指定依赖的虚拟环境\n\nvirtualenv=/home/parallels/.virtualenv/django_py3\n\n我们使用apt-get安装:     apt-get install nginx -y\n查看服务状态:     systemctl status nginx / service nginx status\n检查配置文件:     nginx -t\n重新加载配置文件:     nginx -s reload\n\nnginx目录介绍:\n配置目录：/etc/nginx\n执行文件: /usr/sbin/nginx\n日志目录：/var/log/nginx\n启动文件：/etc/init.d/nginx\nweb目录：/var/www/html/，首页文件是index.nginx-debian.html\n\nnginx配置文件:\n/etc/nginx/nginx.conf\n","source":"_posts/web开发1-nginx部署.md","raw":"---\ntitle: web开发1_nginx部署\ncomments: true\ncopyright: true\ntags:\n  - web开发\n  - nginx\ncategories:\n  - web开发\nabbrlink: 3c1ae316\ndate: 2022-08-29 20:21:10\n---\n\nuwsgi的安装:\npip install uwsgi\n\n创建配置文件:\nuwsgi8001.ini\n\nuwsgi启动:\nuwsgi --ini uwsgi8001.ini\n\nuwsgi重启：\nuwsgi --reload uwsgi8001.pid\n\nuwsgi停止:\nuwsgi --stop uwsgi8001.pid\n\n\nuwsgi.ini 配置文件内容\n\n[uwsgi]\n#直接做web服务器使用，Django程序所在服务器地址\nhttp=127.0.0.1:8001\n#项目目录\nchdir=/home/parallels/Desktop/meiduo_mall\n#项目中wsgi.py文件的目录，相对于项目目录\nwsgi-file=meiduo_mall/wsgi.py\n进程数\n\nprocesses=2\n线程数\n\nthreads=2\n是否开启master进程\n\nmaster=True\n存放进程编号的文件\n\npidfile=uwsgi.pid\n日志文件，因为uwsgi可以脱离终端在后台运行，日志看不见。我们以前的runserver是依赖终端的\n\ndaemonize=uwsgi.log\n指定依赖的虚拟环境\n\nvirtualenv=/home/parallels/.virtualenv/django_py3\n\n我们使用apt-get安装:     apt-get install nginx -y\n查看服务状态:     systemctl status nginx / service nginx status\n检查配置文件:     nginx -t\n重新加载配置文件:     nginx -s reload\n\nnginx目录介绍:\n配置目录：/etc/nginx\n执行文件: /usr/sbin/nginx\n日志目录：/var/log/nginx\n启动文件：/etc/init.d/nginx\nweb目录：/var/www/html/，首页文件是index.nginx-debian.html\n\nnginx配置文件:\n/etc/nginx/nginx.conf\n","slug":"web开发1-nginx部署","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq1001m81nv31i4fsb7","content":"<p>uwsgi的安装:<br>pip install uwsgi</p>\n<p>创建配置文件:<br>uwsgi8001.ini</p>\n<p>uwsgi启动:<br>uwsgi –ini uwsgi8001.ini</p>\n<p>uwsgi重启：<br>uwsgi –reload uwsgi8001.pid</p>\n<p>uwsgi停止:<br>uwsgi –stop uwsgi8001.pid</p>\n<p>uwsgi.ini 配置文件内容</p>\n<p>[uwsgi]<br>#直接做web服务器使用，Django程序所在服务器地址<br>http&#x3D;127.0.0.1:8001<br>#项目目录<br>chdir&#x3D;&#x2F;home&#x2F;parallels&#x2F;Desktop&#x2F;meiduo_mall<br>#项目中wsgi.py文件的目录，相对于项目目录<br>wsgi-file&#x3D;meiduo_mall&#x2F;wsgi.py<br>进程数</p>\n<p>processes&#x3D;2<br>线程数</p>\n<p>threads&#x3D;2<br>是否开启master进程</p>\n<p>master&#x3D;True<br>存放进程编号的文件</p>\n<p>pidfile&#x3D;uwsgi.pid<br>日志文件，因为uwsgi可以脱离终端在后台运行，日志看不见。我们以前的runserver是依赖终端的</p>\n<p>daemonize&#x3D;uwsgi.log<br>指定依赖的虚拟环境</p>\n<p>virtualenv&#x3D;&#x2F;home&#x2F;parallels&#x2F;.virtualenv&#x2F;django_py3</p>\n<p>我们使用apt-get安装:     apt-get install nginx -y<br>查看服务状态:     systemctl status nginx &#x2F; service nginx status<br>检查配置文件:     nginx -t<br>重新加载配置文件:     nginx -s reload</p>\n<p>nginx目录介绍:<br>配置目录：&#x2F;etc&#x2F;nginx<br>执行文件: &#x2F;usr&#x2F;sbin&#x2F;nginx<br>日志目录：&#x2F;var&#x2F;log&#x2F;nginx<br>启动文件：&#x2F;etc&#x2F;init.d&#x2F;nginx<br>web目录：&#x2F;var&#x2F;www&#x2F;html&#x2F;，首页文件是index.nginx-debian.html</p>\n<p>nginx配置文件:<br>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p>\n","site":{"data":{}},"excerpt":"","more":"<p>uwsgi的安装:<br>pip install uwsgi</p>\n<p>创建配置文件:<br>uwsgi8001.ini</p>\n<p>uwsgi启动:<br>uwsgi –ini uwsgi8001.ini</p>\n<p>uwsgi重启：<br>uwsgi –reload uwsgi8001.pid</p>\n<p>uwsgi停止:<br>uwsgi –stop uwsgi8001.pid</p>\n<p>uwsgi.ini 配置文件内容</p>\n<p>[uwsgi]<br>#直接做web服务器使用，Django程序所在服务器地址<br>http&#x3D;127.0.0.1:8001<br>#项目目录<br>chdir&#x3D;&#x2F;home&#x2F;parallels&#x2F;Desktop&#x2F;meiduo_mall<br>#项目中wsgi.py文件的目录，相对于项目目录<br>wsgi-file&#x3D;meiduo_mall&#x2F;wsgi.py<br>进程数</p>\n<p>processes&#x3D;2<br>线程数</p>\n<p>threads&#x3D;2<br>是否开启master进程</p>\n<p>master&#x3D;True<br>存放进程编号的文件</p>\n<p>pidfile&#x3D;uwsgi.pid<br>日志文件，因为uwsgi可以脱离终端在后台运行，日志看不见。我们以前的runserver是依赖终端的</p>\n<p>daemonize&#x3D;uwsgi.log<br>指定依赖的虚拟环境</p>\n<p>virtualenv&#x3D;&#x2F;home&#x2F;parallels&#x2F;.virtualenv&#x2F;django_py3</p>\n<p>我们使用apt-get安装:     apt-get install nginx -y<br>查看服务状态:     systemctl status nginx &#x2F; service nginx status<br>检查配置文件:     nginx -t<br>重新加载配置文件:     nginx -s reload</p>\n<p>nginx目录介绍:<br>配置目录：&#x2F;etc&#x2F;nginx<br>执行文件: &#x2F;usr&#x2F;sbin&#x2F;nginx<br>日志目录：&#x2F;var&#x2F;log&#x2F;nginx<br>启动文件：&#x2F;etc&#x2F;init.d&#x2F;nginx<br>web目录：&#x2F;var&#x2F;www&#x2F;html&#x2F;，首页文件是index.nginx-debian.html</p>\n<p>nginx配置文件:<br>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p>\n"},{"title":"window快捷键","comments":1,"copyright":true,"abbrlink":"d1988cc4","date":"2022-08-29T11:39:57.000Z","_content":"\n1,calc:计算器\n\n2,regedit;注册表编辑器\n\n3,ipconfig:ip地址\n\n4,win+L:锁屏\n\n5,win+E:打开电脑\n\n6,pycharm中:ctrl+r:多个替换\n\n7,双击alt:电脑管家火箭加速\n\n8,alt + tab:软件界面切换\n\n9,tree /f:显示目录结构\n\n10,win+x  a:管理员命令操作提示符\n\n11,选中模块,alt+enter:安装模块\n\n12.alt用鼠标选中,多条修改\n\n13,函数()内,ctrl+p:提示 \n\n14,win + r :mspaint:画图快捷键\n\n15,slidetoshutdown :关机快捷键\n\n16,convert g:/fs:ntfs :u盘文件过大,无法复制,g为u盘盘符\n\n17,win + R :powershell:打开管理员模式\n\n18,在linux打开pycharm:./pycharm.sh\n\n19:定时关机:shutdown -s -t 秒数\n\n20,ctrl+alt+del:进入任务管理器\n\n21,打开服务:services.msc\n\n22，远程连接：mstsc\n\n23,删除多余服务(在根目录下):sc delete 服务器名称\n\n24,查看电脑系统内存大小:win+r ---> msinfo32时区下的已安装物理内存就是笔记本内存大小\n\n25,安装服务(根目录下|管理员权限):\n\n安装: .\\installService.cmd\n\n卸载: .\\uninstallService.cmd\n\n26,C盘清理旧文件:\n\nC盘--->属性--->磁盘清理--->清理系统文件--->以前的windows安装--->确定\n\n27,  关机: slidetoshutdown\n\n28:  win10激活:\n\nslmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX \n\nslmgr /skms kms.03k.org\n\nslmgr /ato \n\n28, win10打开系统属性快捷键:  dxdiag \n","source":"_posts/window快捷键.md","raw":"---\ntitle: window快捷键\ncomments: true\ncopyright: true\ntags:\n  - window\ncategories:\n  - 快捷键\nabbrlink: d1988cc4\ndate: 2022-08-29 19:39:57\n---\n\n1,calc:计算器\n\n2,regedit;注册表编辑器\n\n3,ipconfig:ip地址\n\n4,win+L:锁屏\n\n5,win+E:打开电脑\n\n6,pycharm中:ctrl+r:多个替换\n\n7,双击alt:电脑管家火箭加速\n\n8,alt + tab:软件界面切换\n\n9,tree /f:显示目录结构\n\n10,win+x  a:管理员命令操作提示符\n\n11,选中模块,alt+enter:安装模块\n\n12.alt用鼠标选中,多条修改\n\n13,函数()内,ctrl+p:提示 \n\n14,win + r :mspaint:画图快捷键\n\n15,slidetoshutdown :关机快捷键\n\n16,convert g:/fs:ntfs :u盘文件过大,无法复制,g为u盘盘符\n\n17,win + R :powershell:打开管理员模式\n\n18,在linux打开pycharm:./pycharm.sh\n\n19:定时关机:shutdown -s -t 秒数\n\n20,ctrl+alt+del:进入任务管理器\n\n21,打开服务:services.msc\n\n22，远程连接：mstsc\n\n23,删除多余服务(在根目录下):sc delete 服务器名称\n\n24,查看电脑系统内存大小:win+r ---> msinfo32时区下的已安装物理内存就是笔记本内存大小\n\n25,安装服务(根目录下|管理员权限):\n\n安装: .\\installService.cmd\n\n卸载: .\\uninstallService.cmd\n\n26,C盘清理旧文件:\n\nC盘--->属性--->磁盘清理--->清理系统文件--->以前的windows安装--->确定\n\n27,  关机: slidetoshutdown\n\n28:  win10激活:\n\nslmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX \n\nslmgr /skms kms.03k.org\n\nslmgr /ato \n\n28, win10打开系统属性快捷键:  dxdiag \n","slug":"window快捷键","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq1001n81nv9i81ev43","content":"<p>1,calc:计算器</p>\n<p>2,regedit;注册表编辑器</p>\n<p>3,ipconfig:ip地址</p>\n<p>4,win+L:锁屏</p>\n<p>5,win+E:打开电脑</p>\n<p>6,pycharm中:ctrl+r:多个替换</p>\n<p>7,双击alt:电脑管家火箭加速</p>\n<p>8,alt + tab:软件界面切换</p>\n<p>9,tree &#x2F;f:显示目录结构</p>\n<p>10,win+x  a:管理员命令操作提示符</p>\n<p>11,选中模块,alt+enter:安装模块</p>\n<p>12.alt用鼠标选中,多条修改</p>\n<p>13,函数()内,ctrl+p:提示 </p>\n<p>14,win + r :mspaint:画图快捷键</p>\n<p>15,slidetoshutdown :关机快捷键</p>\n<p>16,convert g:&#x2F;fs:ntfs :u盘文件过大,无法复制,g为u盘盘符</p>\n<p>17,win + R :powershell:打开管理员模式</p>\n<p>18,在linux打开pycharm:.&#x2F;pycharm.sh</p>\n<p>19:定时关机:shutdown -s -t 秒数</p>\n<p>20,ctrl+alt+del:进入任务管理器</p>\n<p>21,打开服务:services.msc</p>\n<p>22，远程连接：mstsc</p>\n<p>23,删除多余服务(在根目录下):sc delete 服务器名称</p>\n<p>24,查看电脑系统内存大小:win+r —&gt; msinfo32时区下的已安装物理内存就是笔记本内存大小</p>\n<p>25,安装服务(根目录下|管理员权限):</p>\n<p>安装: .\\installService.cmd</p>\n<p>卸载: .\\uninstallService.cmd</p>\n<p>26,C盘清理旧文件:</p>\n<p>C盘—&gt;属性—&gt;磁盘清理—&gt;清理系统文件—&gt;以前的windows安装—&gt;确定</p>\n<p>27,  关机: slidetoshutdown</p>\n<p>28:  win10激活:</p>\n<p>slmgr &#x2F;ipk W269N-WFGWX-YVC9B-4J6C9-T83GX </p>\n<p>slmgr &#x2F;skms kms.03k.org</p>\n<p>slmgr &#x2F;ato </p>\n<p>28, win10打开系统属性快捷键:  dxdiag </p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,calc:计算器</p>\n<p>2,regedit;注册表编辑器</p>\n<p>3,ipconfig:ip地址</p>\n<p>4,win+L:锁屏</p>\n<p>5,win+E:打开电脑</p>\n<p>6,pycharm中:ctrl+r:多个替换</p>\n<p>7,双击alt:电脑管家火箭加速</p>\n<p>8,alt + tab:软件界面切换</p>\n<p>9,tree &#x2F;f:显示目录结构</p>\n<p>10,win+x  a:管理员命令操作提示符</p>\n<p>11,选中模块,alt+enter:安装模块</p>\n<p>12.alt用鼠标选中,多条修改</p>\n<p>13,函数()内,ctrl+p:提示 </p>\n<p>14,win + r :mspaint:画图快捷键</p>\n<p>15,slidetoshutdown :关机快捷键</p>\n<p>16,convert g:&#x2F;fs:ntfs :u盘文件过大,无法复制,g为u盘盘符</p>\n<p>17,win + R :powershell:打开管理员模式</p>\n<p>18,在linux打开pycharm:.&#x2F;pycharm.sh</p>\n<p>19:定时关机:shutdown -s -t 秒数</p>\n<p>20,ctrl+alt+del:进入任务管理器</p>\n<p>21,打开服务:services.msc</p>\n<p>22，远程连接：mstsc</p>\n<p>23,删除多余服务(在根目录下):sc delete 服务器名称</p>\n<p>24,查看电脑系统内存大小:win+r —&gt; msinfo32时区下的已安装物理内存就是笔记本内存大小</p>\n<p>25,安装服务(根目录下|管理员权限):</p>\n<p>安装: .\\installService.cmd</p>\n<p>卸载: .\\uninstallService.cmd</p>\n<p>26,C盘清理旧文件:</p>\n<p>C盘—&gt;属性—&gt;磁盘清理—&gt;清理系统文件—&gt;以前的windows安装—&gt;确定</p>\n<p>27,  关机: slidetoshutdown</p>\n<p>28:  win10激活:</p>\n<p>slmgr &#x2F;ipk W269N-WFGWX-YVC9B-4J6C9-T83GX </p>\n<p>slmgr &#x2F;skms kms.03k.org</p>\n<p>slmgr &#x2F;ato </p>\n<p>28, win10打开系统属性快捷键:  dxdiag </p>\n"},{"title":"yolo学习笔记","comments":1,"copyright":true,"abbrlink":"4ada0a","date":"2022-08-29T13:01:34.000Z","_content":"\n1,目录详解\n\nassets:需要测试的不同类型的文件\n\ndatasets:存放的数据集,例如Coco\n\ndemo:官方提供的4种部署方式\n\ndocs数据集信息\n\nexps:Yolo所有版本的数据集\n\ntools:程序入口\n\ndemo.py :  测试文件\n\ntrain.py: 也是测试文件\n\nweights:权重文件\n\nyolox:模型代码\n\n2,环境\n\npyhon环境/anaconda\n\npytorch\n\npycharm\n\n下载环境:在根目录下输入pip install requirements.txt\n\n3,运行\n\ntools下的demo.py\n\nparser.add_argument\n\n约24行修改测试的类型 default = '类型'\n\n约28行修改测试的内容 default = '源文件'\n\n约39行修改权重的默认位置 default = '具体权重文件位置'\n\n约43行修改默认的权重 default = '具体权重文件位置'\n\n约44行修改默认的cpu/gpu default = '运行类型'\n\n测试输出图像保存在tools/YOLOX_output\n\n数据集测试:步骤\n\n1,安装apex:\n\npip install apex\n\n减少模型显存占用的工具\n\n2,修改train文件中的参数\n\n2-1,修改patch,默认50,约30行\n\n2-2,数据集路径:在yolo_voc_nano.py下约54行的data_dir = '具体路径'\n\n#55行修改:目录根据实际情况(可不修改)\n\ntrain修改内容: \n\n具体的文件目录:\n\n40行.\n\n权重修改:\n\n47行\n\nGPU使用修改为True:\n\n68行左右\n\n输出内容主要有:\n\n权重信息目录\n\n训练完成后,利用权重进行测试\n\n测试在demo目录下修改\n\n类别和内容\n\n权重文件和训练时的权重文件一致 .py         39行 : yolox_voc_nano.py\n\n43 行权重改为训练后保存的权重文件             \n","source":"_posts/yolo学习笔记.md","raw":"---\ntitle: yolo学习笔记\ncomments: true\ncopyright: true\ntags:\n  - 目标识别\n  - yolo\ncategories:\n  - 目标识别\nabbrlink: 4ada0a\ndate: 2022-08-29 21:01:34\n---\n\n1,目录详解\n\nassets:需要测试的不同类型的文件\n\ndatasets:存放的数据集,例如Coco\n\ndemo:官方提供的4种部署方式\n\ndocs数据集信息\n\nexps:Yolo所有版本的数据集\n\ntools:程序入口\n\ndemo.py :  测试文件\n\ntrain.py: 也是测试文件\n\nweights:权重文件\n\nyolox:模型代码\n\n2,环境\n\npyhon环境/anaconda\n\npytorch\n\npycharm\n\n下载环境:在根目录下输入pip install requirements.txt\n\n3,运行\n\ntools下的demo.py\n\nparser.add_argument\n\n约24行修改测试的类型 default = '类型'\n\n约28行修改测试的内容 default = '源文件'\n\n约39行修改权重的默认位置 default = '具体权重文件位置'\n\n约43行修改默认的权重 default = '具体权重文件位置'\n\n约44行修改默认的cpu/gpu default = '运行类型'\n\n测试输出图像保存在tools/YOLOX_output\n\n数据集测试:步骤\n\n1,安装apex:\n\npip install apex\n\n减少模型显存占用的工具\n\n2,修改train文件中的参数\n\n2-1,修改patch,默认50,约30行\n\n2-2,数据集路径:在yolo_voc_nano.py下约54行的data_dir = '具体路径'\n\n#55行修改:目录根据实际情况(可不修改)\n\ntrain修改内容: \n\n具体的文件目录:\n\n40行.\n\n权重修改:\n\n47行\n\nGPU使用修改为True:\n\n68行左右\n\n输出内容主要有:\n\n权重信息目录\n\n训练完成后,利用权重进行测试\n\n测试在demo目录下修改\n\n类别和内容\n\n权重文件和训练时的权重文件一致 .py         39行 : yolox_voc_nano.py\n\n43 行权重改为训练后保存的权重文件             \n","slug":"yolo学习笔记","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq2001r81nvfc3b01a8","content":"<p>1,目录详解</p>\n<p>assets:需要测试的不同类型的文件</p>\n<p>datasets:存放的数据集,例如Coco</p>\n<p>demo:官方提供的4种部署方式</p>\n<p>docs数据集信息</p>\n<p>exps:Yolo所有版本的数据集</p>\n<p>tools:程序入口</p>\n<p>demo.py :  测试文件</p>\n<p>train.py: 也是测试文件</p>\n<p>weights:权重文件</p>\n<p>yolox:模型代码</p>\n<p>2,环境</p>\n<p>pyhon环境&#x2F;anaconda</p>\n<p>pytorch</p>\n<p>pycharm</p>\n<p>下载环境:在根目录下输入pip install requirements.txt</p>\n<p>3,运行</p>\n<p>tools下的demo.py</p>\n<p>parser.add_argument</p>\n<p>约24行修改测试的类型 default &#x3D; ‘类型’</p>\n<p>约28行修改测试的内容 default &#x3D; ‘源文件’</p>\n<p>约39行修改权重的默认位置 default &#x3D; ‘具体权重文件位置’</p>\n<p>约43行修改默认的权重 default &#x3D; ‘具体权重文件位置’</p>\n<p>约44行修改默认的cpu&#x2F;gpu default &#x3D; ‘运行类型’</p>\n<p>测试输出图像保存在tools&#x2F;YOLOX_output</p>\n<p>数据集测试:步骤</p>\n<p>1,安装apex:</p>\n<p>pip install apex</p>\n<p>减少模型显存占用的工具</p>\n<p>2,修改train文件中的参数</p>\n<p>2-1,修改patch,默认50,约30行</p>\n<p>2-2,数据集路径:在yolo_voc_nano.py下约54行的data_dir &#x3D; ‘具体路径’</p>\n<p>#55行修改:目录根据实际情况(可不修改)</p>\n<p>train修改内容: </p>\n<p>具体的文件目录:</p>\n<p>40行.</p>\n<p>权重修改:</p>\n<p>47行</p>\n<p>GPU使用修改为True:</p>\n<p>68行左右</p>\n<p>输出内容主要有:</p>\n<p>权重信息目录</p>\n<p>训练完成后,利用权重进行测试</p>\n<p>测试在demo目录下修改</p>\n<p>类别和内容</p>\n<p>权重文件和训练时的权重文件一致 .py         39行 : yolox_voc_nano.py</p>\n<p>43 行权重改为训练后保存的权重文件             </p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,目录详解</p>\n<p>assets:需要测试的不同类型的文件</p>\n<p>datasets:存放的数据集,例如Coco</p>\n<p>demo:官方提供的4种部署方式</p>\n<p>docs数据集信息</p>\n<p>exps:Yolo所有版本的数据集</p>\n<p>tools:程序入口</p>\n<p>demo.py :  测试文件</p>\n<p>train.py: 也是测试文件</p>\n<p>weights:权重文件</p>\n<p>yolox:模型代码</p>\n<p>2,环境</p>\n<p>pyhon环境&#x2F;anaconda</p>\n<p>pytorch</p>\n<p>pycharm</p>\n<p>下载环境:在根目录下输入pip install requirements.txt</p>\n<p>3,运行</p>\n<p>tools下的demo.py</p>\n<p>parser.add_argument</p>\n<p>约24行修改测试的类型 default &#x3D; ‘类型’</p>\n<p>约28行修改测试的内容 default &#x3D; ‘源文件’</p>\n<p>约39行修改权重的默认位置 default &#x3D; ‘具体权重文件位置’</p>\n<p>约43行修改默认的权重 default &#x3D; ‘具体权重文件位置’</p>\n<p>约44行修改默认的cpu&#x2F;gpu default &#x3D; ‘运行类型’</p>\n<p>测试输出图像保存在tools&#x2F;YOLOX_output</p>\n<p>数据集测试:步骤</p>\n<p>1,安装apex:</p>\n<p>pip install apex</p>\n<p>减少模型显存占用的工具</p>\n<p>2,修改train文件中的参数</p>\n<p>2-1,修改patch,默认50,约30行</p>\n<p>2-2,数据集路径:在yolo_voc_nano.py下约54行的data_dir &#x3D; ‘具体路径’</p>\n<p>#55行修改:目录根据实际情况(可不修改)</p>\n<p>train修改内容: </p>\n<p>具体的文件目录:</p>\n<p>40行.</p>\n<p>权重修改:</p>\n<p>47行</p>\n<p>GPU使用修改为True:</p>\n<p>68行左右</p>\n<p>输出内容主要有:</p>\n<p>权重信息目录</p>\n<p>训练完成后,利用权重进行测试</p>\n<p>测试在demo目录下修改</p>\n<p>类别和内容</p>\n<p>权重文件和训练时的权重文件一致 .py         39行 : yolox_voc_nano.py</p>\n<p>43 行权重改为训练后保存的权重文件             </p>\n"},{"title":"常用密码","comments":1,"copyright":true,"abbrlink":"b68a8f57","date":"2022-08-29T11:43:45.000Z","_content":"\n1,\nsteam账户Python_Enthusiasts\n密码Fy19961009\n","source":"_posts/常用密码.md","raw":"---\ntitle: 常用密码\ncomments: true\ncopyright: true\ntags:\n  - 日常\ncategories:\n  - 日常\nabbrlink: b68a8f57\ndate: 2022-08-29 19:43:45\n---\n\n1,\nsteam账户Python_Enthusiasts\n密码Fy19961009\n","slug":"常用密码","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq2001t81nvcscldde3","content":"<p>1,<br>steam账户Python_Enthusiasts<br>密码Fy19961009</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,<br>steam账户Python_Enthusiasts<br>密码Fy19961009</p>\n"},{"title":"数据分析","comments":1,"copyright":true,"abbrlink":"d1c27656","date":"2022-08-29T12:31:44.000Z","_content":"\nnumpy模块\n1,数组的创建语法:\n一维数组:\n\n/ : 表示或者\n\narr = np.array(列表/range(5))\n\n二维数组:\narr2 = np.array([[1,2,3,4],[5,6,7,8]])\n\n2,shape:一个表示各维度大小的数组组arr2的维度:arr2.shape\n,查看各数组的结构(几行几列)  \n\n3,dtype:一个用于说明数组数据类型的对象\narr2的数组类型:arr2.dtype\n4,10代表一维数组的元素个数:arr_zeros = np.zeros(10)\n\n5, 3,一维数组的个数,6,每个数组的元素个数:arr_ones = np.ones((3,6))\n\n6, 2代表三维度值在数组中的个数,3代表二维度值在数组中的个数,2代表一维度值在数据中的个数 : \narr_empty = np.empty([2,4])\n\n7, np.arange(5) :构建一维数组[0,1,2,3,4] \t\t\t\t\t--->序列数组\n   np.array([[6,7,8,9],np.arange(4)]) :构建二维数组[[6,7,8,9][0,1,2,3,4]]\n\n8,(matrix)矩阵的创建(一般表示二维数组)\nnp.matrix(np.arange(5))  np.maxtrix([[6,7,8,9],np.arange(4)])   \n\narange返回的是ndarray,\nrange返回的是列表\nnp.arange(8).reshape(4,2):生成4行2列的二维数组\n\nndarray数据类型可一致可不一致:如果其中包含dtype,数据类型必须一致\n\n9,arr = np.array([1,2,3],dtype = np.int32) \n[含dtype数据类型必须一致,不指定默认int64]\n arr.dtype\n\n10,arr = np.array([1.1,2.7,3.5],dtype = np.int64) \n   arr = [1,2,3]  将arr数组中的每一个元素类型由 float64 浮点型 转换成 int64 整型数据， 因此小数部分被截取只保留整数部分。\n\n11,ndarray数据类型的转换\narr = np.array(range(5),dtype = np.int64)\narr_float = arr.astype(np.float64) \n#整数转小数,若小数转整数会被截取,若有字符数字,也可以转为数值类型\n\n12,将数组的类型转换成另一个数组的类型\narr_int = np.arange(5)\n#int转换为float\narr = arr_int.astype(np.float64)\n #一维数组\narr_float = np.array([[1.1,2.7], [5.7,6.3]])  \n#浮点型二维数组\n将arr_float数组类型转换成arr_int数组类型\narr_temp=arr_float.astype(arr_int.dtype)转化后小数部分被截取\n\n13,创建二维数组矩阵arr(浮点类型)  ---35\narr = np.array([np.arange(1,5), np.arange(6,10)], dtype=np.float64)\n\n矩阵自乘,二维数组中的每个元素都乘以自身得到一个新的结果\n\narr1 = arr * arr \n\n矩阵自乘,二维数组中的每个元素都减去自身得到一个新的结果\n\narr2 = arr - arr\n\n与标量相除,一个标量数字除以二维数组中的每个元素得到一个新的结果\n\narr3 = 1 / arr\n\n矩阵1/2次幂运算,二维数组中的每个元素计算自身1/2 次幂得到一个新的结果\n\narr4 = arr ** 0.5 \n\n14,数组复制\nb = a.view():共用同一个值,\nb改变,a也跟着改变\nc = a. copy():值不会随着c的值改变而改变\n\n15,np.title(a.(m,n)):扩展\n将数组扩展为m行n列\nnp.sin(数组):取正弦\nnp.arange(2):2个元素/几到几/几到几,步长\nreshape(矩阵,行,列):改变矩阵形状(行列)\n\n16,矩阵.argmax(axis = 0):列中最大值索引\n数组.index(对象):求索引\nnp.sort(matrix,axis=1):横向排序:\nnp.argsort(a):最小值索引\n\n17,一般情况下,float和int默认64\n\n18,根据索引查值\narr = np.arange(10)\narr[5]:下标(索引)为5的元素\n二维数组索引:\n二维数组对象[二维数组下标索引值,一维数组下标索引值]\n三维:数组对象[三维度轴索引值,二维度下标索引值,一维度元素下标索引值]\n所得值为二维数组\n19,names=np.array([‘cnm’,’Bob’,’Jane’,’Bob’])\ndata = np.random.randn(4,3):生成正态分布的一些随机数据的二维数组\n4:根据第一行数组的个数决定\nprint(data[names == ‘Bob’,1:]):取Bob所在行的所有数据\n--->|或   &与  and     or \n\n20,及时创建副本\n\n21,花式索引:针对二维数组:\nprint([[行数1,行数2]]):取具体某行\n\n22,np.ix_:可以将两个一维数组转换成一个用于选取正方形区域的索引器\n\n23,arr.T:可以将一个4行3列的二维数组转换成一个3行4列的二维数组\n\n24,arr=np.arange(24).reshape(2,3,4)\n(2轴3行4列)\narr.transpose(1,0,2)\n(3轴2行4列)\n\n25,arr.swapaxex(1,2):实现三维数组轴对换\n相当用于将原三维数组以轴z为轴心,向左推90°\n\n26,针对二维数组\narr.tofile(‘a.bin’):写入数据\nprint(a.dtype)\nb = np.fromfile(‘a.bin’,dtype = a的数据类型):读取数据\n\n27,np.save(‘a.npy’,a):保存数据\nnp.load(‘a.npy’):读取数据\n\n28,保存数据到一个文件中\nnp.savez(‘res.npz’,a,b,c):文件名及数组名\nnp.load(‘res.npz’):读取文件\n\n29,savetext和loadtext可读写一维数组,二维数组,csv文件\nnp.savetext(‘a.txt’,a,fmt=’%d’,delimiter=’,’):保存为整数,以逗号隔开\nnp.loadtext(‘a.txt’,delimiter=’,’):读取时以,隔开\n\n30,np.sqrt(arr):计算各元素的平方根\nnp.exp(arr):计算常量值e各元素值\n\n31,np.maximum(arr1,arr2):对比数组中各元组的大小取大的组成最终数组 \narr = np.random.randn(4)*5 \nnp.modf(arr):取数列中的小数部分和整数部分\n\n32,以每个元素为一行,生成N*N的方形二维矩阵\nxs,xy = np.meshgrid(arr,arr) \n根号下x²+y² :np.sqrt(np.square(xs)) + np.sqrt(np.square(xy))\n\n33,np.where(布尔型,arr1,arr2):\n当布尔型为True时,arr1,否则arr2\n\n34,arr.sum(axis = 0):沿轴0(x轴)求和计算\narr.mean(axis = 1):沿y轴求平均值\narr.std()求标准差\n\n35,arr.sort():默认从小到大排序\narr.sort(axis=1):每行排序\nnp.unique(arr):去重排序\nnp.inId(arr,[’元素1’,’元素2’]):判断True或False\n\n\n36,arr1.dot(arr2):矩阵1*矩阵2\nnp.dot(arr1,np.ones(3)):二维矩阵与一维矩阵点积运算后得到一个一维数组\n\ninv(arr):获取矩阵逆运算\n值\nqr(arr):获取矩阵的qr操作值分解\n\n37,arr.cumsum(0):所有元素累计和\narr.cumprod(0):所有元素累计积\n\n38,axis = 1行,0列,z轴\n\n39,标准正态(高斯)分布的4*4数组,arr = np.random(size=(4,4))\n40,argmax求临界值\n\nPandas模块\nSeries,DataFrame\nSeries:\nobj = series([1,3,2,13]):索引在左,内容在右\nobj.index:求索引\nobj.values:求值\n指定索引:\nobj=([1,3,2,7],index=[‘a1’,’a3’,’a13’,’a2’])\nobj[‘a3’]:取值\nobj[‘a13’]=13:改值\n输出指定范围的索引:obj[[‘a1’,’a13’]]\nnp.exp(obj):e的obj各values值次方\n a1 in obj:判断索引值是否在obj中\ndict1 = {‘a’:3,’b’:13}\n#构建series对象\nobj = Series(dict1)\nnew_index = [‘w,’’y’]\nobj2 = Series(dict1,new_index) \npd.isnull/notnull(obj2)::判断是否为空\n两个series相加:索引并集:values为NaN,\n\n41,将具有等长的多个列表存入DataFrame,自动发添加索引,列名key值自动排序\nfram=DataFrame(dict1,columns=[‘w’,’j’,’y’],index=[1,3,13]):columns列顺序排列,index:索引顺序排列\nfram[‘j’]:求某列\nfram[‘w’]=7:赋值操作\nSeries给DataFrame赋值:精确匹配DataFrame索引\n字典嵌套,外层key作为列,内层key作为索引处理\nreindex:新索引\nMethod=’ffill’/’bfill’:实现前向/前后插值处理,\nix的标签索引实现行列重置\nPandas进阶:s表示Series对象,\nd表示DataFrame对象\ns.drop(‘索引名’)\nd.drop([‘索引1’,’索引2’],axis=0):删除索引1和3的一栏\n\nadd, sub减,mul乘,div除\n\nd1.add(d2,fill_value=0):缺失用0代替,相加\n\n排序:s.sort_index(ascending=True):升序,false降序\n\nd.sort_values(by=’b’,/[‘a’,’b’]):按照列值或多个列值排序\n\n操作文件csv/txt\n读取:\nos:csvPath = os.getcwd() + ‘文件存储路径’\ndata = pd.read_csv(csvPath + os.sep + ‘tips.csv’):读取数据\n\n写入:data.to_csv(csvPath = os.sep + ‘out.csv’)\n\njson操作:\n设置路径:jsonPath = os.getcwd + ‘路径’\n读取:with open(jsonPath + os.sep +’文件名’ , ‘r’,encoding = ‘utf8’) as fp:\ndump()写入json数据\ndata = json.load(fp):读取\nDf = DataFrame(data):将json转换为DataFrame对象\n\nExcel:地址同上\nxls_file = pa.ExcelFile(ExcelPath + os.sep + ‘文件名’)\n读取有效sheet页\ntable = xls_file.prase(‘文件名无后缀,其他都有’)\n\n读取数据库:\nimport pymysql\n#获取有效的数据库连接引用对象 \nconnection = pymysql.connect(host =’localhost’,post=3306,user=’root’,password=’1’,db=’houserentals’,charser=’utf8’)\n#设置查询语句\nsql = ‘select *from emp e where e.lessor = 13 ’\n#使用read_sql函数 检索并转换DataFrame对象\ndf = pd.read_sql(sql,connection)\n#关闭数据库\nconncetion.close()   \n#测试输出\nprint(df)\n\n42, pandas模块\n\n#显示完整的列\n\npd.set_option('display.max_columns', None) \n\n#显示完整的行\n\npd.set_option('display.max_rows', None)\n","source":"_posts/数据分析.md","raw":"---\ntitle: 数据分析\ncomments: true\ncopyright: true\ntags:\n  - 数据分析\ncategories:\n  - 数据分析\nabbrlink: d1c27656\ndate: 2022-08-29 20:31:44\n---\n\nnumpy模块\n1,数组的创建语法:\n一维数组:\n\n/ : 表示或者\n\narr = np.array(列表/range(5))\n\n二维数组:\narr2 = np.array([[1,2,3,4],[5,6,7,8]])\n\n2,shape:一个表示各维度大小的数组组arr2的维度:arr2.shape\n,查看各数组的结构(几行几列)  \n\n3,dtype:一个用于说明数组数据类型的对象\narr2的数组类型:arr2.dtype\n4,10代表一维数组的元素个数:arr_zeros = np.zeros(10)\n\n5, 3,一维数组的个数,6,每个数组的元素个数:arr_ones = np.ones((3,6))\n\n6, 2代表三维度值在数组中的个数,3代表二维度值在数组中的个数,2代表一维度值在数据中的个数 : \narr_empty = np.empty([2,4])\n\n7, np.arange(5) :构建一维数组[0,1,2,3,4] \t\t\t\t\t--->序列数组\n   np.array([[6,7,8,9],np.arange(4)]) :构建二维数组[[6,7,8,9][0,1,2,3,4]]\n\n8,(matrix)矩阵的创建(一般表示二维数组)\nnp.matrix(np.arange(5))  np.maxtrix([[6,7,8,9],np.arange(4)])   \n\narange返回的是ndarray,\nrange返回的是列表\nnp.arange(8).reshape(4,2):生成4行2列的二维数组\n\nndarray数据类型可一致可不一致:如果其中包含dtype,数据类型必须一致\n\n9,arr = np.array([1,2,3],dtype = np.int32) \n[含dtype数据类型必须一致,不指定默认int64]\n arr.dtype\n\n10,arr = np.array([1.1,2.7,3.5],dtype = np.int64) \n   arr = [1,2,3]  将arr数组中的每一个元素类型由 float64 浮点型 转换成 int64 整型数据， 因此小数部分被截取只保留整数部分。\n\n11,ndarray数据类型的转换\narr = np.array(range(5),dtype = np.int64)\narr_float = arr.astype(np.float64) \n#整数转小数,若小数转整数会被截取,若有字符数字,也可以转为数值类型\n\n12,将数组的类型转换成另一个数组的类型\narr_int = np.arange(5)\n#int转换为float\narr = arr_int.astype(np.float64)\n #一维数组\narr_float = np.array([[1.1,2.7], [5.7,6.3]])  \n#浮点型二维数组\n将arr_float数组类型转换成arr_int数组类型\narr_temp=arr_float.astype(arr_int.dtype)转化后小数部分被截取\n\n13,创建二维数组矩阵arr(浮点类型)  ---35\narr = np.array([np.arange(1,5), np.arange(6,10)], dtype=np.float64)\n\n矩阵自乘,二维数组中的每个元素都乘以自身得到一个新的结果\n\narr1 = arr * arr \n\n矩阵自乘,二维数组中的每个元素都减去自身得到一个新的结果\n\narr2 = arr - arr\n\n与标量相除,一个标量数字除以二维数组中的每个元素得到一个新的结果\n\narr3 = 1 / arr\n\n矩阵1/2次幂运算,二维数组中的每个元素计算自身1/2 次幂得到一个新的结果\n\narr4 = arr ** 0.5 \n\n14,数组复制\nb = a.view():共用同一个值,\nb改变,a也跟着改变\nc = a. copy():值不会随着c的值改变而改变\n\n15,np.title(a.(m,n)):扩展\n将数组扩展为m行n列\nnp.sin(数组):取正弦\nnp.arange(2):2个元素/几到几/几到几,步长\nreshape(矩阵,行,列):改变矩阵形状(行列)\n\n16,矩阵.argmax(axis = 0):列中最大值索引\n数组.index(对象):求索引\nnp.sort(matrix,axis=1):横向排序:\nnp.argsort(a):最小值索引\n\n17,一般情况下,float和int默认64\n\n18,根据索引查值\narr = np.arange(10)\narr[5]:下标(索引)为5的元素\n二维数组索引:\n二维数组对象[二维数组下标索引值,一维数组下标索引值]\n三维:数组对象[三维度轴索引值,二维度下标索引值,一维度元素下标索引值]\n所得值为二维数组\n19,names=np.array([‘cnm’,’Bob’,’Jane’,’Bob’])\ndata = np.random.randn(4,3):生成正态分布的一些随机数据的二维数组\n4:根据第一行数组的个数决定\nprint(data[names == ‘Bob’,1:]):取Bob所在行的所有数据\n--->|或   &与  and     or \n\n20,及时创建副本\n\n21,花式索引:针对二维数组:\nprint([[行数1,行数2]]):取具体某行\n\n22,np.ix_:可以将两个一维数组转换成一个用于选取正方形区域的索引器\n\n23,arr.T:可以将一个4行3列的二维数组转换成一个3行4列的二维数组\n\n24,arr=np.arange(24).reshape(2,3,4)\n(2轴3行4列)\narr.transpose(1,0,2)\n(3轴2行4列)\n\n25,arr.swapaxex(1,2):实现三维数组轴对换\n相当用于将原三维数组以轴z为轴心,向左推90°\n\n26,针对二维数组\narr.tofile(‘a.bin’):写入数据\nprint(a.dtype)\nb = np.fromfile(‘a.bin’,dtype = a的数据类型):读取数据\n\n27,np.save(‘a.npy’,a):保存数据\nnp.load(‘a.npy’):读取数据\n\n28,保存数据到一个文件中\nnp.savez(‘res.npz’,a,b,c):文件名及数组名\nnp.load(‘res.npz’):读取文件\n\n29,savetext和loadtext可读写一维数组,二维数组,csv文件\nnp.savetext(‘a.txt’,a,fmt=’%d’,delimiter=’,’):保存为整数,以逗号隔开\nnp.loadtext(‘a.txt’,delimiter=’,’):读取时以,隔开\n\n30,np.sqrt(arr):计算各元素的平方根\nnp.exp(arr):计算常量值e各元素值\n\n31,np.maximum(arr1,arr2):对比数组中各元组的大小取大的组成最终数组 \narr = np.random.randn(4)*5 \nnp.modf(arr):取数列中的小数部分和整数部分\n\n32,以每个元素为一行,生成N*N的方形二维矩阵\nxs,xy = np.meshgrid(arr,arr) \n根号下x²+y² :np.sqrt(np.square(xs)) + np.sqrt(np.square(xy))\n\n33,np.where(布尔型,arr1,arr2):\n当布尔型为True时,arr1,否则arr2\n\n34,arr.sum(axis = 0):沿轴0(x轴)求和计算\narr.mean(axis = 1):沿y轴求平均值\narr.std()求标准差\n\n35,arr.sort():默认从小到大排序\narr.sort(axis=1):每行排序\nnp.unique(arr):去重排序\nnp.inId(arr,[’元素1’,’元素2’]):判断True或False\n\n\n36,arr1.dot(arr2):矩阵1*矩阵2\nnp.dot(arr1,np.ones(3)):二维矩阵与一维矩阵点积运算后得到一个一维数组\n\ninv(arr):获取矩阵逆运算\n值\nqr(arr):获取矩阵的qr操作值分解\n\n37,arr.cumsum(0):所有元素累计和\narr.cumprod(0):所有元素累计积\n\n38,axis = 1行,0列,z轴\n\n39,标准正态(高斯)分布的4*4数组,arr = np.random(size=(4,4))\n40,argmax求临界值\n\nPandas模块\nSeries,DataFrame\nSeries:\nobj = series([1,3,2,13]):索引在左,内容在右\nobj.index:求索引\nobj.values:求值\n指定索引:\nobj=([1,3,2,7],index=[‘a1’,’a3’,’a13’,’a2’])\nobj[‘a3’]:取值\nobj[‘a13’]=13:改值\n输出指定范围的索引:obj[[‘a1’,’a13’]]\nnp.exp(obj):e的obj各values值次方\n a1 in obj:判断索引值是否在obj中\ndict1 = {‘a’:3,’b’:13}\n#构建series对象\nobj = Series(dict1)\nnew_index = [‘w,’’y’]\nobj2 = Series(dict1,new_index) \npd.isnull/notnull(obj2)::判断是否为空\n两个series相加:索引并集:values为NaN,\n\n41,将具有等长的多个列表存入DataFrame,自动发添加索引,列名key值自动排序\nfram=DataFrame(dict1,columns=[‘w’,’j’,’y’],index=[1,3,13]):columns列顺序排列,index:索引顺序排列\nfram[‘j’]:求某列\nfram[‘w’]=7:赋值操作\nSeries给DataFrame赋值:精确匹配DataFrame索引\n字典嵌套,外层key作为列,内层key作为索引处理\nreindex:新索引\nMethod=’ffill’/’bfill’:实现前向/前后插值处理,\nix的标签索引实现行列重置\nPandas进阶:s表示Series对象,\nd表示DataFrame对象\ns.drop(‘索引名’)\nd.drop([‘索引1’,’索引2’],axis=0):删除索引1和3的一栏\n\nadd, sub减,mul乘,div除\n\nd1.add(d2,fill_value=0):缺失用0代替,相加\n\n排序:s.sort_index(ascending=True):升序,false降序\n\nd.sort_values(by=’b’,/[‘a’,’b’]):按照列值或多个列值排序\n\n操作文件csv/txt\n读取:\nos:csvPath = os.getcwd() + ‘文件存储路径’\ndata = pd.read_csv(csvPath + os.sep + ‘tips.csv’):读取数据\n\n写入:data.to_csv(csvPath = os.sep + ‘out.csv’)\n\njson操作:\n设置路径:jsonPath = os.getcwd + ‘路径’\n读取:with open(jsonPath + os.sep +’文件名’ , ‘r’,encoding = ‘utf8’) as fp:\ndump()写入json数据\ndata = json.load(fp):读取\nDf = DataFrame(data):将json转换为DataFrame对象\n\nExcel:地址同上\nxls_file = pa.ExcelFile(ExcelPath + os.sep + ‘文件名’)\n读取有效sheet页\ntable = xls_file.prase(‘文件名无后缀,其他都有’)\n\n读取数据库:\nimport pymysql\n#获取有效的数据库连接引用对象 \nconnection = pymysql.connect(host =’localhost’,post=3306,user=’root’,password=’1’,db=’houserentals’,charser=’utf8’)\n#设置查询语句\nsql = ‘select *from emp e where e.lessor = 13 ’\n#使用read_sql函数 检索并转换DataFrame对象\ndf = pd.read_sql(sql,connection)\n#关闭数据库\nconncetion.close()   \n#测试输出\nprint(df)\n\n42, pandas模块\n\n#显示完整的列\n\npd.set_option('display.max_columns', None) \n\n#显示完整的行\n\npd.set_option('display.max_rows', None)\n","slug":"数据分析","published":1,"updated":"2022-10-24T08:43:24.418Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq2001x81nv16030gfm","content":"<p>numpy模块<br>1,数组的创建语法:<br>一维数组:</p>\n<p>&#x2F; : 表示或者</p>\n<p>arr &#x3D; np.array(列表&#x2F;range(5))</p>\n<p>二维数组:<br>arr2 &#x3D; np.array([[1,2,3,4],[5,6,7,8]])</p>\n<p>2,shape:一个表示各维度大小的数组组arr2的维度:arr2.shape<br>,查看各数组的结构(几行几列)  </p>\n<p>3,dtype:一个用于说明数组数据类型的对象<br>arr2的数组类型:arr2.dtype<br>4,10代表一维数组的元素个数:arr_zeros &#x3D; np.zeros(10)</p>\n<p>5, 3,一维数组的个数,6,每个数组的元素个数:arr_ones &#x3D; np.ones((3,6))</p>\n<p>6, 2代表三维度值在数组中的个数,3代表二维度值在数组中的个数,2代表一维度值在数据中的个数 :<br>arr_empty &#x3D; np.empty([2,4])</p>\n<p>7, np.arange(5) :构建一维数组[0,1,2,3,4]                     —&gt;序列数组<br>   np.array([[6,7,8,9],np.arange(4)]) :构建二维数组[[6,7,8,9][0,1,2,3,4]]</p>\n<p>8,(matrix)矩阵的创建(一般表示二维数组)<br>np.matrix(np.arange(5))  np.maxtrix([[6,7,8,9],np.arange(4)])   </p>\n<p>arange返回的是ndarray,<br>range返回的是列表<br>np.arange(8).reshape(4,2):生成4行2列的二维数组</p>\n<p>ndarray数据类型可一致可不一致:如果其中包含dtype,数据类型必须一致</p>\n<p>9,arr &#x3D; np.array([1,2,3],dtype &#x3D; np.int32)<br>[含dtype数据类型必须一致,不指定默认int64]<br> arr.dtype</p>\n<p>10,arr &#x3D; np.array([1.1,2.7,3.5],dtype &#x3D; np.int64)<br>   arr &#x3D; [1,2,3]  将arr数组中的每一个元素类型由 float64 浮点型 转换成 int64 整型数据， 因此小数部分被截取只保留整数部分。</p>\n<p>11,ndarray数据类型的转换<br>arr &#x3D; np.array(range(5),dtype &#x3D; np.int64)<br>arr_float &#x3D; arr.astype(np.float64)<br>#整数转小数,若小数转整数会被截取,若有字符数字,也可以转为数值类型</p>\n<p>12,将数组的类型转换成另一个数组的类型<br>arr_int &#x3D; np.arange(5)<br>#int转换为float<br>arr &#x3D; arr_int.astype(np.float64)<br> #一维数组<br>arr_float &#x3D; np.array([[1.1,2.7], [5.7,6.3]])<br>#浮点型二维数组<br>将arr_float数组类型转换成arr_int数组类型<br>arr_temp&#x3D;arr_float.astype(arr_int.dtype)转化后小数部分被截取</p>\n<p>13,创建二维数组矩阵arr(浮点类型)  —35<br>arr &#x3D; np.array([np.arange(1,5), np.arange(6,10)], dtype&#x3D;np.float64)</p>\n<p>矩阵自乘,二维数组中的每个元素都乘以自身得到一个新的结果</p>\n<p>arr1 &#x3D; arr * arr </p>\n<p>矩阵自乘,二维数组中的每个元素都减去自身得到一个新的结果</p>\n<p>arr2 &#x3D; arr - arr</p>\n<p>与标量相除,一个标量数字除以二维数组中的每个元素得到一个新的结果</p>\n<p>arr3 &#x3D; 1 &#x2F; arr</p>\n<p>矩阵1&#x2F;2次幂运算,二维数组中的每个元素计算自身1&#x2F;2 次幂得到一个新的结果</p>\n<p>arr4 &#x3D; arr ** 0.5 </p>\n<p>14,数组复制<br>b &#x3D; a.view():共用同一个值,<br>b改变,a也跟着改变<br>c &#x3D; a. copy():值不会随着c的值改变而改变</p>\n<p>15,np.title(a.(m,n)):扩展<br>将数组扩展为m行n列<br>np.sin(数组):取正弦<br>np.arange(2):2个元素&#x2F;几到几&#x2F;几到几,步长<br>reshape(矩阵,行,列):改变矩阵形状(行列)</p>\n<p>16,矩阵.argmax(axis &#x3D; 0):列中最大值索引<br>数组.index(对象):求索引<br>np.sort(matrix,axis&#x3D;1):横向排序:<br>np.argsort(a):最小值索引</p>\n<p>17,一般情况下,float和int默认64</p>\n<p>18,根据索引查值<br>arr &#x3D; np.arange(10)<br>arr[5]:下标(索引)为5的元素<br>二维数组索引:<br>二维数组对象[二维数组下标索引值,一维数组下标索引值]<br>三维:数组对象[三维度轴索引值,二维度下标索引值,一维度元素下标索引值]<br>所得值为二维数组<br>19,names&#x3D;np.array([‘cnm’,’Bob’,’Jane’,’Bob’])<br>data &#x3D; np.random.randn(4,3):生成正态分布的一些随机数据的二维数组<br>4:根据第一行数组的个数决定<br>print(data[names &#x3D;&#x3D; ‘Bob’,1:]):取Bob所在行的所有数据<br>—&gt;|或   &amp;与  and     or </p>\n<p>20,及时创建副本</p>\n<p>21,花式索引:针对二维数组:<br>print([[行数1,行数2]]):取具体某行</p>\n<p>22,np.ix_:可以将两个一维数组转换成一个用于选取正方形区域的索引器</p>\n<p>23,arr.T:可以将一个4行3列的二维数组转换成一个3行4列的二维数组</p>\n<p>24,arr&#x3D;np.arange(24).reshape(2,3,4)<br>(2轴3行4列)<br>arr.transpose(1,0,2)<br>(3轴2行4列)</p>\n<p>25,arr.swapaxex(1,2):实现三维数组轴对换<br>相当用于将原三维数组以轴z为轴心,向左推90°</p>\n<p>26,针对二维数组<br>arr.tofile(‘a.bin’):写入数据<br>print(a.dtype)<br>b &#x3D; np.fromfile(‘a.bin’,dtype &#x3D; a的数据类型):读取数据</p>\n<p>27,np.save(‘a.npy’,a):保存数据<br>np.load(‘a.npy’):读取数据</p>\n<p>28,保存数据到一个文件中<br>np.savez(‘res.npz’,a,b,c):文件名及数组名<br>np.load(‘res.npz’):读取文件</p>\n<p>29,savetext和loadtext可读写一维数组,二维数组,csv文件<br>np.savetext(‘a.txt’,a,fmt&#x3D;’%d’,delimiter&#x3D;’,’):保存为整数,以逗号隔开<br>np.loadtext(‘a.txt’,delimiter&#x3D;’,’):读取时以,隔开</p>\n<p>30,np.sqrt(arr):计算各元素的平方根<br>np.exp(arr):计算常量值e各元素值</p>\n<p>31,np.maximum(arr1,arr2):对比数组中各元组的大小取大的组成最终数组<br>arr &#x3D; np.random.randn(4)*5<br>np.modf(arr):取数列中的小数部分和整数部分</p>\n<p>32,以每个元素为一行,生成N*N的方形二维矩阵<br>xs,xy &#x3D; np.meshgrid(arr,arr)<br>根号下x²+y² :np.sqrt(np.square(xs)) + np.sqrt(np.square(xy))</p>\n<p>33,np.where(布尔型,arr1,arr2):<br>当布尔型为True时,arr1,否则arr2</p>\n<p>34,arr.sum(axis &#x3D; 0):沿轴0(x轴)求和计算<br>arr.mean(axis &#x3D; 1):沿y轴求平均值<br>arr.std()求标准差</p>\n<p>35,arr.sort():默认从小到大排序<br>arr.sort(axis&#x3D;1):每行排序<br>np.unique(arr):去重排序<br>np.inId(arr,[’元素1’,’元素2’]):判断True或False</p>\n<p>36,arr1.dot(arr2):矩阵1*矩阵2<br>np.dot(arr1,np.ones(3)):二维矩阵与一维矩阵点积运算后得到一个一维数组</p>\n<p>inv(arr):获取矩阵逆运算<br>值<br>qr(arr):获取矩阵的qr操作值分解</p>\n<p>37,arr.cumsum(0):所有元素累计和<br>arr.cumprod(0):所有元素累计积</p>\n<p>38,axis &#x3D; 1行,0列,z轴</p>\n<p>39,标准正态(高斯)分布的4*4数组,arr &#x3D; np.random(size&#x3D;(4,4))<br>40,argmax求临界值</p>\n<p>Pandas模块<br>Series,DataFrame<br>Series:<br>obj &#x3D; series([1,3,2,13]):索引在左,内容在右<br>obj.index:求索引<br>obj.values:求值<br>指定索引:<br>obj&#x3D;([1,3,2,7],index&#x3D;[‘a1’,’a3’,’a13’,’a2’])<br>obj[‘a3’]:取值<br>obj[‘a13’]&#x3D;13:改值<br>输出指定范围的索引:obj[[‘a1’,’a13’]]<br>np.exp(obj):e的obj各values值次方<br> a1 in obj:判断索引值是否在obj中<br>dict1 &#x3D; {‘a’:3,’b’:13}<br>#构建series对象<br>obj &#x3D; Series(dict1)<br>new_index &#x3D; [‘w,’’y’]<br>obj2 &#x3D; Series(dict1,new_index)<br>pd.isnull&#x2F;notnull(obj2)::判断是否为空<br>两个series相加:索引并集:values为NaN,</p>\n<p>41,将具有等长的多个列表存入DataFrame,自动发添加索引,列名key值自动排序<br>fram&#x3D;DataFrame(dict1,columns&#x3D;[‘w’,’j’,’y’],index&#x3D;[1,3,13]):columns列顺序排列,index:索引顺序排列<br>fram[‘j’]:求某列<br>fram[‘w’]&#x3D;7:赋值操作<br>Series给DataFrame赋值:精确匹配DataFrame索引<br>字典嵌套,外层key作为列,内层key作为索引处理<br>reindex:新索引<br>Method&#x3D;’ffill’&#x2F;’bfill’:实现前向&#x2F;前后插值处理,<br>ix的标签索引实现行列重置<br>Pandas进阶:s表示Series对象,<br>d表示DataFrame对象<br>s.drop(‘索引名’)<br>d.drop([‘索引1’,’索引2’],axis&#x3D;0):删除索引1和3的一栏</p>\n<p>add, sub减,mul乘,div除</p>\n<p>d1.add(d2,fill_value&#x3D;0):缺失用0代替,相加</p>\n<p>排序:s.sort_index(ascending&#x3D;True):升序,false降序</p>\n<p>d.sort_values(by&#x3D;’b’,&#x2F;[‘a’,’b’]):按照列值或多个列值排序</p>\n<p>操作文件csv&#x2F;txt<br>读取:<br>os:csvPath &#x3D; os.getcwd() + ‘文件存储路径’<br>data &#x3D; pd.read_csv(csvPath + os.sep + ‘tips.csv’):读取数据</p>\n<p>写入:data.to_csv(csvPath &#x3D; os.sep + ‘out.csv’)</p>\n<p>json操作:<br>设置路径:jsonPath &#x3D; os.getcwd + ‘路径’<br>读取:with open(jsonPath + os.sep +’文件名’ , ‘r’,encoding &#x3D; ‘utf8’) as fp:<br>dump()写入json数据<br>data &#x3D; json.load(fp):读取<br>Df &#x3D; DataFrame(data):将json转换为DataFrame对象</p>\n<p>Excel:地址同上<br>xls_file &#x3D; pa.ExcelFile(ExcelPath + os.sep + ‘文件名’)<br>读取有效sheet页<br>table &#x3D; xls_file.prase(‘文件名无后缀,其他都有’)</p>\n<p>读取数据库:<br>import pymysql<br>#获取有效的数据库连接引用对象<br>connection &#x3D; pymysql.connect(host &#x3D;’localhost’,post&#x3D;3306,user&#x3D;’root’,password&#x3D;’1’,db&#x3D;’houserentals’,charser&#x3D;’utf8’)<br>#设置查询语句<br>sql &#x3D; ‘select *from emp e where e.lessor &#x3D; 13 ’<br>#使用read_sql函数 检索并转换DataFrame对象<br>df &#x3D; pd.read_sql(sql,connection)<br>#关闭数据库<br>conncetion.close()<br>#测试输出<br>print(df)</p>\n<p>42, pandas模块</p>\n<p>#显示完整的列</p>\n<p>pd.set_option(‘display.max_columns’, None) </p>\n<p>#显示完整的行</p>\n<p>pd.set_option(‘display.max_rows’, None)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>numpy模块<br>1,数组的创建语法:<br>一维数组:</p>\n<p>&#x2F; : 表示或者</p>\n<p>arr &#x3D; np.array(列表&#x2F;range(5))</p>\n<p>二维数组:<br>arr2 &#x3D; np.array([[1,2,3,4],[5,6,7,8]])</p>\n<p>2,shape:一个表示各维度大小的数组组arr2的维度:arr2.shape<br>,查看各数组的结构(几行几列)  </p>\n<p>3,dtype:一个用于说明数组数据类型的对象<br>arr2的数组类型:arr2.dtype<br>4,10代表一维数组的元素个数:arr_zeros &#x3D; np.zeros(10)</p>\n<p>5, 3,一维数组的个数,6,每个数组的元素个数:arr_ones &#x3D; np.ones((3,6))</p>\n<p>6, 2代表三维度值在数组中的个数,3代表二维度值在数组中的个数,2代表一维度值在数据中的个数 :<br>arr_empty &#x3D; np.empty([2,4])</p>\n<p>7, np.arange(5) :构建一维数组[0,1,2,3,4]                     —&gt;序列数组<br>   np.array([[6,7,8,9],np.arange(4)]) :构建二维数组[[6,7,8,9][0,1,2,3,4]]</p>\n<p>8,(matrix)矩阵的创建(一般表示二维数组)<br>np.matrix(np.arange(5))  np.maxtrix([[6,7,8,9],np.arange(4)])   </p>\n<p>arange返回的是ndarray,<br>range返回的是列表<br>np.arange(8).reshape(4,2):生成4行2列的二维数组</p>\n<p>ndarray数据类型可一致可不一致:如果其中包含dtype,数据类型必须一致</p>\n<p>9,arr &#x3D; np.array([1,2,3],dtype &#x3D; np.int32)<br>[含dtype数据类型必须一致,不指定默认int64]<br> arr.dtype</p>\n<p>10,arr &#x3D; np.array([1.1,2.7,3.5],dtype &#x3D; np.int64)<br>   arr &#x3D; [1,2,3]  将arr数组中的每一个元素类型由 float64 浮点型 转换成 int64 整型数据， 因此小数部分被截取只保留整数部分。</p>\n<p>11,ndarray数据类型的转换<br>arr &#x3D; np.array(range(5),dtype &#x3D; np.int64)<br>arr_float &#x3D; arr.astype(np.float64)<br>#整数转小数,若小数转整数会被截取,若有字符数字,也可以转为数值类型</p>\n<p>12,将数组的类型转换成另一个数组的类型<br>arr_int &#x3D; np.arange(5)<br>#int转换为float<br>arr &#x3D; arr_int.astype(np.float64)<br> #一维数组<br>arr_float &#x3D; np.array([[1.1,2.7], [5.7,6.3]])<br>#浮点型二维数组<br>将arr_float数组类型转换成arr_int数组类型<br>arr_temp&#x3D;arr_float.astype(arr_int.dtype)转化后小数部分被截取</p>\n<p>13,创建二维数组矩阵arr(浮点类型)  —35<br>arr &#x3D; np.array([np.arange(1,5), np.arange(6,10)], dtype&#x3D;np.float64)</p>\n<p>矩阵自乘,二维数组中的每个元素都乘以自身得到一个新的结果</p>\n<p>arr1 &#x3D; arr * arr </p>\n<p>矩阵自乘,二维数组中的每个元素都减去自身得到一个新的结果</p>\n<p>arr2 &#x3D; arr - arr</p>\n<p>与标量相除,一个标量数字除以二维数组中的每个元素得到一个新的结果</p>\n<p>arr3 &#x3D; 1 &#x2F; arr</p>\n<p>矩阵1&#x2F;2次幂运算,二维数组中的每个元素计算自身1&#x2F;2 次幂得到一个新的结果</p>\n<p>arr4 &#x3D; arr ** 0.5 </p>\n<p>14,数组复制<br>b &#x3D; a.view():共用同一个值,<br>b改变,a也跟着改变<br>c &#x3D; a. copy():值不会随着c的值改变而改变</p>\n<p>15,np.title(a.(m,n)):扩展<br>将数组扩展为m行n列<br>np.sin(数组):取正弦<br>np.arange(2):2个元素&#x2F;几到几&#x2F;几到几,步长<br>reshape(矩阵,行,列):改变矩阵形状(行列)</p>\n<p>16,矩阵.argmax(axis &#x3D; 0):列中最大值索引<br>数组.index(对象):求索引<br>np.sort(matrix,axis&#x3D;1):横向排序:<br>np.argsort(a):最小值索引</p>\n<p>17,一般情况下,float和int默认64</p>\n<p>18,根据索引查值<br>arr &#x3D; np.arange(10)<br>arr[5]:下标(索引)为5的元素<br>二维数组索引:<br>二维数组对象[二维数组下标索引值,一维数组下标索引值]<br>三维:数组对象[三维度轴索引值,二维度下标索引值,一维度元素下标索引值]<br>所得值为二维数组<br>19,names&#x3D;np.array([‘cnm’,’Bob’,’Jane’,’Bob’])<br>data &#x3D; np.random.randn(4,3):生成正态分布的一些随机数据的二维数组<br>4:根据第一行数组的个数决定<br>print(data[names &#x3D;&#x3D; ‘Bob’,1:]):取Bob所在行的所有数据<br>—&gt;|或   &amp;与  and     or </p>\n<p>20,及时创建副本</p>\n<p>21,花式索引:针对二维数组:<br>print([[行数1,行数2]]):取具体某行</p>\n<p>22,np.ix_:可以将两个一维数组转换成一个用于选取正方形区域的索引器</p>\n<p>23,arr.T:可以将一个4行3列的二维数组转换成一个3行4列的二维数组</p>\n<p>24,arr&#x3D;np.arange(24).reshape(2,3,4)<br>(2轴3行4列)<br>arr.transpose(1,0,2)<br>(3轴2行4列)</p>\n<p>25,arr.swapaxex(1,2):实现三维数组轴对换<br>相当用于将原三维数组以轴z为轴心,向左推90°</p>\n<p>26,针对二维数组<br>arr.tofile(‘a.bin’):写入数据<br>print(a.dtype)<br>b &#x3D; np.fromfile(‘a.bin’,dtype &#x3D; a的数据类型):读取数据</p>\n<p>27,np.save(‘a.npy’,a):保存数据<br>np.load(‘a.npy’):读取数据</p>\n<p>28,保存数据到一个文件中<br>np.savez(‘res.npz’,a,b,c):文件名及数组名<br>np.load(‘res.npz’):读取文件</p>\n<p>29,savetext和loadtext可读写一维数组,二维数组,csv文件<br>np.savetext(‘a.txt’,a,fmt&#x3D;’%d’,delimiter&#x3D;’,’):保存为整数,以逗号隔开<br>np.loadtext(‘a.txt’,delimiter&#x3D;’,’):读取时以,隔开</p>\n<p>30,np.sqrt(arr):计算各元素的平方根<br>np.exp(arr):计算常量值e各元素值</p>\n<p>31,np.maximum(arr1,arr2):对比数组中各元组的大小取大的组成最终数组<br>arr &#x3D; np.random.randn(4)*5<br>np.modf(arr):取数列中的小数部分和整数部分</p>\n<p>32,以每个元素为一行,生成N*N的方形二维矩阵<br>xs,xy &#x3D; np.meshgrid(arr,arr)<br>根号下x²+y² :np.sqrt(np.square(xs)) + np.sqrt(np.square(xy))</p>\n<p>33,np.where(布尔型,arr1,arr2):<br>当布尔型为True时,arr1,否则arr2</p>\n<p>34,arr.sum(axis &#x3D; 0):沿轴0(x轴)求和计算<br>arr.mean(axis &#x3D; 1):沿y轴求平均值<br>arr.std()求标准差</p>\n<p>35,arr.sort():默认从小到大排序<br>arr.sort(axis&#x3D;1):每行排序<br>np.unique(arr):去重排序<br>np.inId(arr,[’元素1’,’元素2’]):判断True或False</p>\n<p>36,arr1.dot(arr2):矩阵1*矩阵2<br>np.dot(arr1,np.ones(3)):二维矩阵与一维矩阵点积运算后得到一个一维数组</p>\n<p>inv(arr):获取矩阵逆运算<br>值<br>qr(arr):获取矩阵的qr操作值分解</p>\n<p>37,arr.cumsum(0):所有元素累计和<br>arr.cumprod(0):所有元素累计积</p>\n<p>38,axis &#x3D; 1行,0列,z轴</p>\n<p>39,标准正态(高斯)分布的4*4数组,arr &#x3D; np.random(size&#x3D;(4,4))<br>40,argmax求临界值</p>\n<p>Pandas模块<br>Series,DataFrame<br>Series:<br>obj &#x3D; series([1,3,2,13]):索引在左,内容在右<br>obj.index:求索引<br>obj.values:求值<br>指定索引:<br>obj&#x3D;([1,3,2,7],index&#x3D;[‘a1’,’a3’,’a13’,’a2’])<br>obj[‘a3’]:取值<br>obj[‘a13’]&#x3D;13:改值<br>输出指定范围的索引:obj[[‘a1’,’a13’]]<br>np.exp(obj):e的obj各values值次方<br> a1 in obj:判断索引值是否在obj中<br>dict1 &#x3D; {‘a’:3,’b’:13}<br>#构建series对象<br>obj &#x3D; Series(dict1)<br>new_index &#x3D; [‘w,’’y’]<br>obj2 &#x3D; Series(dict1,new_index)<br>pd.isnull&#x2F;notnull(obj2)::判断是否为空<br>两个series相加:索引并集:values为NaN,</p>\n<p>41,将具有等长的多个列表存入DataFrame,自动发添加索引,列名key值自动排序<br>fram&#x3D;DataFrame(dict1,columns&#x3D;[‘w’,’j’,’y’],index&#x3D;[1,3,13]):columns列顺序排列,index:索引顺序排列<br>fram[‘j’]:求某列<br>fram[‘w’]&#x3D;7:赋值操作<br>Series给DataFrame赋值:精确匹配DataFrame索引<br>字典嵌套,外层key作为列,内层key作为索引处理<br>reindex:新索引<br>Method&#x3D;’ffill’&#x2F;’bfill’:实现前向&#x2F;前后插值处理,<br>ix的标签索引实现行列重置<br>Pandas进阶:s表示Series对象,<br>d表示DataFrame对象<br>s.drop(‘索引名’)<br>d.drop([‘索引1’,’索引2’],axis&#x3D;0):删除索引1和3的一栏</p>\n<p>add, sub减,mul乘,div除</p>\n<p>d1.add(d2,fill_value&#x3D;0):缺失用0代替,相加</p>\n<p>排序:s.sort_index(ascending&#x3D;True):升序,false降序</p>\n<p>d.sort_values(by&#x3D;’b’,&#x2F;[‘a’,’b’]):按照列值或多个列值排序</p>\n<p>操作文件csv&#x2F;txt<br>读取:<br>os:csvPath &#x3D; os.getcwd() + ‘文件存储路径’<br>data &#x3D; pd.read_csv(csvPath + os.sep + ‘tips.csv’):读取数据</p>\n<p>写入:data.to_csv(csvPath &#x3D; os.sep + ‘out.csv’)</p>\n<p>json操作:<br>设置路径:jsonPath &#x3D; os.getcwd + ‘路径’<br>读取:with open(jsonPath + os.sep +’文件名’ , ‘r’,encoding &#x3D; ‘utf8’) as fp:<br>dump()写入json数据<br>data &#x3D; json.load(fp):读取<br>Df &#x3D; DataFrame(data):将json转换为DataFrame对象</p>\n<p>Excel:地址同上<br>xls_file &#x3D; pa.ExcelFile(ExcelPath + os.sep + ‘文件名’)<br>读取有效sheet页<br>table &#x3D; xls_file.prase(‘文件名无后缀,其他都有’)</p>\n<p>读取数据库:<br>import pymysql<br>#获取有效的数据库连接引用对象<br>connection &#x3D; pymysql.connect(host &#x3D;’localhost’,post&#x3D;3306,user&#x3D;’root’,password&#x3D;’1’,db&#x3D;’houserentals’,charser&#x3D;’utf8’)<br>#设置查询语句<br>sql &#x3D; ‘select *from emp e where e.lessor &#x3D; 13 ’<br>#使用read_sql函数 检索并转换DataFrame对象<br>df &#x3D; pd.read_sql(sql,connection)<br>#关闭数据库<br>conncetion.close()<br>#测试输出<br>print(df)</p>\n<p>42, pandas模块</p>\n<p>#显示完整的列</p>\n<p>pd.set_option(‘display.max_columns’, None) </p>\n<p>#显示完整的行</p>\n<p>pd.set_option(‘display.max_rows’, None)</p>\n"},{"title":"编码习惯整理","comments":1,"copyright":true,"abbrlink":"e541c025","date":"2022-09-04T06:40:56.000Z","_content":"\n1. 修改完代码,记得自测一下(再小的修改也最好自测一下)\n2. 方法入参最好都检验\n3. 修改老接口时,思考接口的兼容性\n4. 对于复杂的代码逻辑,添加清楚的注释\n5. 使用完IO资源流,需要关闭\n6. 代码采取措施避免运行错误(如数组边界溢出)\n7. 尽量不要在循环里远程调用或者对数据库操作,优先考虑批量进行\n\n8. 写完代码,脑洞一下多线程执行会怎样,注意并发一致性问题,\n9. 获取对象的属性,先判断对象是否为空\n10. 多线程异步优先考虑恰当的线程池,而不是new thread(降低资源损耗,题号响应速度,便于重复利用)<注意线程池隔离>\n11. 手动写完代码业务的SQL,先拿去数据库跑一下,同时也explain看下执行计划\n12. 调用第三方接口,需要考虑异常处理.安全性,超时重试这几个点(重点的需要考虑签名,加密)\n13. 接口考虑幂等性\n14. 多线程情况下,考虑线程安全问题\n15. 主从延迟问题考虑\n16. 缓存的时候,考虑缓存跟DB的一致性,还有(缓存穿透,缓存雪崩和缓存击穿)\n","source":"_posts/编码习惯整理.md","raw":"---\ntitle: 编码习惯整理\ncomments: true\ncopyright: true\ntags:\n  - 编码习惯\ncategories:\n  - 编码习惯\nabbrlink: e541c025\ndate: 2022-09-04 14:40:56\n---\n\n1. 修改完代码,记得自测一下(再小的修改也最好自测一下)\n2. 方法入参最好都检验\n3. 修改老接口时,思考接口的兼容性\n4. 对于复杂的代码逻辑,添加清楚的注释\n5. 使用完IO资源流,需要关闭\n6. 代码采取措施避免运行错误(如数组边界溢出)\n7. 尽量不要在循环里远程调用或者对数据库操作,优先考虑批量进行\n\n8. 写完代码,脑洞一下多线程执行会怎样,注意并发一致性问题,\n9. 获取对象的属性,先判断对象是否为空\n10. 多线程异步优先考虑恰当的线程池,而不是new thread(降低资源损耗,题号响应速度,便于重复利用)<注意线程池隔离>\n11. 手动写完代码业务的SQL,先拿去数据库跑一下,同时也explain看下执行计划\n12. 调用第三方接口,需要考虑异常处理.安全性,超时重试这几个点(重点的需要考虑签名,加密)\n13. 接口考虑幂等性\n14. 多线程情况下,考虑线程安全问题\n15. 主从延迟问题考虑\n16. 缓存的时候,考虑缓存跟DB的一致性,还有(缓存穿透,缓存雪崩和缓存击穿)\n","slug":"编码习惯整理","published":1,"updated":"2022-10-24T08:43:24.419Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq2001z81nv6jw5d686","content":"<ol>\n<li><p>修改完代码,记得自测一下(再小的修改也最好自测一下)</p>\n</li>\n<li><p>方法入参最好都检验</p>\n</li>\n<li><p>修改老接口时,思考接口的兼容性</p>\n</li>\n<li><p>对于复杂的代码逻辑,添加清楚的注释</p>\n</li>\n<li><p>使用完IO资源流,需要关闭</p>\n</li>\n<li><p>代码采取措施避免运行错误(如数组边界溢出)</p>\n</li>\n<li><p>尽量不要在循环里远程调用或者对数据库操作,优先考虑批量进行</p>\n</li>\n<li><p>写完代码,脑洞一下多线程执行会怎样,注意并发一致性问题,</p>\n</li>\n<li><p>获取对象的属性,先判断对象是否为空</p>\n</li>\n<li><p>多线程异步优先考虑恰当的线程池,而不是new thread(降低资源损耗,题号响应速度,便于重复利用)&lt;注意线程池隔离&gt;</p>\n</li>\n<li><p>手动写完代码业务的SQL,先拿去数据库跑一下,同时也explain看下执行计划</p>\n</li>\n<li><p>调用第三方接口,需要考虑异常处理.安全性,超时重试这几个点(重点的需要考虑签名,加密)</p>\n</li>\n<li><p>接口考虑幂等性</p>\n</li>\n<li><p>多线程情况下,考虑线程安全问题</p>\n</li>\n<li><p>主从延迟问题考虑</p>\n</li>\n<li><p>缓存的时候,考虑缓存跟DB的一致性,还有(缓存穿透,缓存雪崩和缓存击穿)</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>修改完代码,记得自测一下(再小的修改也最好自测一下)</p>\n</li>\n<li><p>方法入参最好都检验</p>\n</li>\n<li><p>修改老接口时,思考接口的兼容性</p>\n</li>\n<li><p>对于复杂的代码逻辑,添加清楚的注释</p>\n</li>\n<li><p>使用完IO资源流,需要关闭</p>\n</li>\n<li><p>代码采取措施避免运行错误(如数组边界溢出)</p>\n</li>\n<li><p>尽量不要在循环里远程调用或者对数据库操作,优先考虑批量进行</p>\n</li>\n<li><p>写完代码,脑洞一下多线程执行会怎样,注意并发一致性问题,</p>\n</li>\n<li><p>获取对象的属性,先判断对象是否为空</p>\n</li>\n<li><p>多线程异步优先考虑恰当的线程池,而不是new thread(降低资源损耗,题号响应速度,便于重复利用)&lt;注意线程池隔离&gt;</p>\n</li>\n<li><p>手动写完代码业务的SQL,先拿去数据库跑一下,同时也explain看下执行计划</p>\n</li>\n<li><p>调用第三方接口,需要考虑异常处理.安全性,超时重试这几个点(重点的需要考虑签名,加密)</p>\n</li>\n<li><p>接口考虑幂等性</p>\n</li>\n<li><p>多线程情况下,考虑线程安全问题</p>\n</li>\n<li><p>主从延迟问题考虑</p>\n</li>\n<li><p>缓存的时候,考虑缓存跟DB的一致性,还有(缓存穿透,缓存雪崩和缓存击穿)</p>\n</li>\n</ol>\n"},{"title":"软件安装","comments":1,"copyright":true,"abbrlink":"f025fac7","date":"2022-08-29T11:38:17.000Z","_content":"\nJava环境变量配置:\n1,\nJAVA_HOME      F:\\Java\\jdk-10.0.2\n2,\nCLASSPATH        .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n3,\n%JAVA_HOME%\\bin\n%JAVA_HOME%\\jre\\bin\n","source":"_posts/软件安装.md","raw":"---\ntitle: 软件安装\ncomments: true\ncopyright: true\ntags:\n  - java\ncategories:\n  - java\nabbrlink: f025fac7\ndate: 2022-08-29 19:38:17\n---\n\nJava环境变量配置:\n1,\nJAVA_HOME      F:\\Java\\jdk-10.0.2\n2,\nCLASSPATH        .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n3,\n%JAVA_HOME%\\bin\n%JAVA_HOME%\\jre\\bin\n","slug":"软件安装","published":1,"updated":"2022-10-24T08:43:24.419Z","layout":"post","photos":[],"link":"","_id":"cl9pdnmq3002081nv2c7mcp72","content":"<p>Java环境变量配置:<br>1,<br>JAVA_HOME      F:\\Java\\jdk-10.0.2<br>2,<br>CLASSPATH        .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;<br>3,<br>%JAVA_HOME%\\bin<br>%JAVA_HOME%\\jre\\bin</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java环境变量配置:<br>1,<br>JAVA_HOME      F:\\Java\\jdk-10.0.2<br>2,<br>CLASSPATH        .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;<br>3,<br>%JAVA_HOME%\\bin<br>%JAVA_HOME%\\jre\\bin</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl9pdnmpq000181nvhdkv4xku","category_id":"cl9pdnmpt000481nvfgp20o24","_id":"cl9pdnmpw000i81nvg5xof7n0"},{"post_id":"cl9pdnmps000381nvflwq0ygt","category_id":"cl9pdnmpv000c81nv5a6v7sg7","_id":"cl9pdnmpx000o81nv2ozo8i0s"},{"post_id":"cl9pdnmpt000781nvficm8sgn","category_id":"cl9pdnmpw000j81nv5rcy4l93","_id":"cl9pdnmpy000t81nvdywkany7"},{"post_id":"cl9pdnmpu000981nv59p12q4d","category_id":"cl9pdnmpx000p81nv2wvkfu2v","_id":"cl9pdnmpy001081nve7557woe"},{"post_id":"cl9pdnmpv000b81nv8fsl6x14","category_id":"cl9pdnmpy000u81nvh01j4gmq","_id":"cl9pdnmq0001781nv9rt9bkfb"},{"post_id":"cl9pdnmpv000g81nv84l15p43","category_id":"cl9pdnmpy001281nvdok207v5","_id":"cl9pdnmq0001c81nv837u40cm"},{"post_id":"cl9pdnmpw000h81nv9ntz2j1r","category_id":"cl9pdnmq0001981nv648992a5","_id":"cl9pdnmq1001k81nvf7ld17rm"},{"post_id":"cl9pdnmpw000l81nvfsindweh","category_id":"cl9pdnmq0001981nv648992a5","_id":"cl9pdnmq1001o81nvbuvhfgq4"},{"post_id":"cl9pdnmpw000n81nvcwit2z0a","category_id":"cl9pdnmq1001j81nv364o05pj","_id":"cl9pdnmq2001v81nv1phfhvht"},{"post_id":"cl9pdnmpx000r81nv7arg1d46","category_id":"cl9pdnmq1001p81nv2kj195y6","_id":"cl9pdnmq3002181nvacga4p76"},{"post_id":"cl9pdnmpx000s81nvf60c6hv8","category_id":"cl9pdnmq2001y81nvbq6j7u5p","_id":"cl9pdnmq3002781nv18ezh8v7"},{"post_id":"cl9pdnmpy000w81nvdwyq7zlf","category_id":"cl9pdnmq3002381nv3yple2mx","_id":"cl9pdnmq3002b81nv8rqecyoa"},{"post_id":"cl9pdnmpy000y81nvcz2ehbwf","category_id":"cl9pdnmq3002381nv3yple2mx","_id":"cl9pdnmq4002e81nv41kx1dup"},{"post_id":"cl9pdnmpy001181nv77zye7u3","category_id":"cl9pdnmq3002a81nverus8e7w","_id":"cl9pdnmq4002i81nv97bt9ykl"},{"post_id":"cl9pdnmpz001681nvc2qfff7q","category_id":"cl9pdnmq4002g81nvfu4y7n04","_id":"cl9pdnmq4002l81nvh9ph1av1"},{"post_id":"cl9pdnmq0001a81nv1wr5di22","category_id":"cl9pdnmq4002k81nv6k1m8f0w","_id":"cl9pdnmq4002q81nvfr5oavh8"},{"post_id":"cl9pdnmq0001b81nv8r5o5x1e","category_id":"cl9pdnmq4002n81nv84212kq0","_id":"cl9pdnmq4002u81nv6qpbfw3c"},{"post_id":"cl9pdnmq0001f81nvf48l2m3d","category_id":"cl9pdnmq4002s81nv7qauefrz","_id":"cl9pdnmq5002y81nvhw0whiam"},{"post_id":"cl9pdnmq1001h81nvc5j2278c","category_id":"cl9pdnmq4002w81nv1yy17poz","_id":"cl9pdnmq5003281nv8bsc85w7"},{"post_id":"cl9pdnmq1001m81nv31i4fsb7","category_id":"cl9pdnmq4002w81nv1yy17poz","_id":"cl9pdnmq5003681nvc0igbdwg"},{"post_id":"cl9pdnmq1001n81nv9i81ev43","category_id":"cl9pdnmq5003181nv8wid016e","_id":"cl9pdnmq5003981nvh5imfqgc"},{"post_id":"cl9pdnmq2001r81nvfc3b01a8","category_id":"cl9pdnmq5003881nvaag365ez","_id":"cl9pdnmq5003e81nv02p7929u"},{"post_id":"cl9pdnmq2001t81nvcscldde3","category_id":"cl9pdnmq5003b81nv03s775nd","_id":"cl9pdnmq6003h81nv37u6ce4y"},{"post_id":"cl9pdnmq2001x81nv16030gfm","category_id":"cl9pdnmq5003g81nv7y3v2dd2","_id":"cl9pdnmq6003m81nv7k757m70"},{"post_id":"cl9pdnmq2001z81nv6jw5d686","category_id":"cl9pdnmq6003j81nv99jbg0yw","_id":"cl9pdnmq6003p81nv2p6q7pen"},{"post_id":"cl9pdnmq3002081nv2c7mcp72","category_id":"cl9pdnmq6003o81nv2csp52rc","_id":"cl9pdnmq6003t81nvce9n7li1"}],"PostTag":[{"post_id":"cl9pdnmpq000181nvhdkv4xku","tag_id":"cl9pdnmpt000581nvhvdbhgat","_id":"cl9pdnmpv000e81nvhhzkhxuj"},{"post_id":"cl9pdnmps000381nvflwq0ygt","tag_id":"cl9pdnmpv000d81nv71gw874p","_id":"cl9pdnmpw000m81nv5qmj748v"},{"post_id":"cl9pdnmpt000781nvficm8sgn","tag_id":"cl9pdnmpw000k81nvc3aydp2k","_id":"cl9pdnmpy000x81nv2v0b51fk"},{"post_id":"cl9pdnmpt000781nvficm8sgn","tag_id":"cl9pdnmpx000q81nv9ruk6qny","_id":"cl9pdnmpy000z81nvboz18fs2"},{"post_id":"cl9pdnmpu000981nv59p12q4d","tag_id":"cl9pdnmpy000v81nv07nn55c3","_id":"cl9pdnmpz001481nv6w4mf48c"},{"post_id":"cl9pdnmpv000b81nv8fsl6x14","tag_id":"cl9pdnmpw000k81nvc3aydp2k","_id":"cl9pdnmq1001g81nv0s4m5oqk"},{"post_id":"cl9pdnmpv000b81nv8fsl6x14","tag_id":"cl9pdnmq0001881nv4b6hc6h2","_id":"cl9pdnmq1001i81nvgyeb7rr0"},{"post_id":"cl9pdnmpv000g81nv84l15p43","tag_id":"cl9pdnmq0001d81nvhyq0f6s7","_id":"cl9pdnmq2001s81nv2jq28bmb"},{"post_id":"cl9pdnmpv000g81nv84l15p43","tag_id":"cl9pdnmq1001l81nv7nq852ze","_id":"cl9pdnmq2001u81nv97h68bqk"},{"post_id":"cl9pdnmpw000h81nv9ntz2j1r","tag_id":"cl9pdnmq0001d81nvhyq0f6s7","_id":"cl9pdnmq3002481nv6f4agnr2"},{"post_id":"cl9pdnmpw000h81nv9ntz2j1r","tag_id":"cl9pdnmq2001w81nv3r677acs","_id":"cl9pdnmq3002581nv0wkp6tq2"},{"post_id":"cl9pdnmpw000l81nvfsindweh","tag_id":"cl9pdnmq2001w81nv3r677acs","_id":"cl9pdnmq3002c81nv48oj3y3k"},{"post_id":"cl9pdnmpw000l81nvfsindweh","tag_id":"cl9pdnmq3002681nv94lt1a3q","_id":"cl9pdnmq3002d81nvc6d45n9z"},{"post_id":"cl9pdnmpw000n81nvcwit2z0a","tag_id":"cl9pdnmq3002981nv9042hqvv","_id":"cl9pdnmq4002h81nvhq1b7g7m"},{"post_id":"cl9pdnmpx000r81nv7arg1d46","tag_id":"cl9pdnmq4002f81nv706d5dmj","_id":"cl9pdnmq4002o81nv9o52ejaz"},{"post_id":"cl9pdnmpx000r81nv7arg1d46","tag_id":"cl9pdnmq4002j81nvfz0whbay","_id":"cl9pdnmq4002p81nv8c1t4gg2"},{"post_id":"cl9pdnmpx000s81nvf60c6hv8","tag_id":"cl9pdnmq4002m81nvd9pp1th1","_id":"cl9pdnmq4002t81nvb0gz4fup"},{"post_id":"cl9pdnmpy000w81nvdwyq7zlf","tag_id":"cl9pdnmq4002r81nvbog45pnb","_id":"cl9pdnmq4002x81nvhwhm9x05"},{"post_id":"cl9pdnmpy000y81nvcz2ehbwf","tag_id":"cl9pdnmq4002v81nveap7edkj","_id":"cl9pdnmq5003481nv20hr8lti"},{"post_id":"cl9pdnmpy000y81nvcz2ehbwf","tag_id":"cl9pdnmq5002z81nva5t5a6iq","_id":"cl9pdnmq5003581nv3a1l8hxr"},{"post_id":"cl9pdnmpy001181nv77zye7u3","tag_id":"cl9pdnmq4002v81nveap7edkj","_id":"cl9pdnmq5003c81nvgo812fvs"},{"post_id":"cl9pdnmpy001181nv77zye7u3","tag_id":"cl9pdnmq5003781nv0whh3xov","_id":"cl9pdnmq5003d81nvhmx02t2c"},{"post_id":"cl9pdnmpz001581nv8ub27g9n","tag_id":"cl9pdnmq5003a81nv2nihgm8y","_id":"cl9pdnmq6003k81nv438k9n2u"},{"post_id":"cl9pdnmpz001581nv8ub27g9n","tag_id":"cl9pdnmq5003f81nv9782dq13","_id":"cl9pdnmq6003l81nv9kg18krd"},{"post_id":"cl9pdnmpz001681nvc2qfff7q","tag_id":"cl9pdnmq6003i81nvazxradf2","_id":"cl9pdnmq6003r81nvewud7bl2"},{"post_id":"cl9pdnmpz001681nvc2qfff7q","tag_id":"cl9pdnmq6003n81nvanr1dbu9","_id":"cl9pdnmq6003s81nv2958bjcl"},{"post_id":"cl9pdnmq0001a81nv1wr5di22","tag_id":"cl9pdnmq6003q81nvaaej98lh","_id":"cl9pdnmq6003w81nvg6uh4u3q"},{"post_id":"cl9pdnmq0001a81nv1wr5di22","tag_id":"cl9pdnmq6003u81nv9owg6jwg","_id":"cl9pdnmq6003x81nv4gti18vn"},{"post_id":"cl9pdnmq0001b81nv8r5o5x1e","tag_id":"cl9pdnmq6003v81nv44iy54we","_id":"cl9pdnmq6003z81nv7xxp4jwd"},{"post_id":"cl9pdnmq0001f81nvf48l2m3d","tag_id":"cl9pdnmq4002m81nvd9pp1th1","_id":"cl9pdnmq7004281nvedsggox7"},{"post_id":"cl9pdnmq0001f81nvf48l2m3d","tag_id":"cl9pdnmq6004081nv45bq5mkg","_id":"cl9pdnmq7004381nv7ckf4syu"},{"post_id":"cl9pdnmq1001h81nvc5j2278c","tag_id":"cl9pdnmq6004181nv3to1hdzq","_id":"cl9pdnmq7004681nvf3taeebh"},{"post_id":"cl9pdnmq1001h81nvc5j2278c","tag_id":"cl9pdnmq4002v81nveap7edkj","_id":"cl9pdnmq7004781nv7p3s84dn"},{"post_id":"cl9pdnmq1001m81nv31i4fsb7","tag_id":"cl9pdnmq6004181nv3to1hdzq","_id":"cl9pdnmq7004a81nvcbhd5ls4"},{"post_id":"cl9pdnmq1001m81nv31i4fsb7","tag_id":"cl9pdnmq7004881nv3hw38ytn","_id":"cl9pdnmq7004b81nv07ybc9nv"},{"post_id":"cl9pdnmq1001n81nv9i81ev43","tag_id":"cl9pdnmq7004981nv98jxh6p2","_id":"cl9pdnmq7004d81nvfevb3wvx"},{"post_id":"cl9pdnmq2001r81nvfc3b01a8","tag_id":"cl9pdnmq7004c81nveugu41re","_id":"cl9pdnmq7004g81nv0qixfr1v"},{"post_id":"cl9pdnmq2001r81nvfc3b01a8","tag_id":"cl9pdnmq7004e81nv8c49bj0l","_id":"cl9pdnmq7004h81nv4a4x1myj"},{"post_id":"cl9pdnmq2001t81nvcscldde3","tag_id":"cl9pdnmq7004f81nvcezveuht","_id":"cl9pdnmq7004j81nvahp336hw"},{"post_id":"cl9pdnmq2001x81nv16030gfm","tag_id":"cl9pdnmq7004i81nv3clseq6v","_id":"cl9pdnmq8004l81nv04k7d23k"},{"post_id":"cl9pdnmq2001z81nv6jw5d686","tag_id":"cl9pdnmq8004k81nv9uhbfqqr","_id":"cl9pdnmq8004n81nvhfyt0yuk"},{"post_id":"cl9pdnmq3002081nv2c7mcp72","tag_id":"cl9pdnmq8004m81nvhh0thse1","_id":"cl9pdnmq8004o81nv3j0t82jp"}],"Tag":[{"name":"deeplearning","_id":"cl9pdnmpt000581nvhvdbhgat"},{"name":"docker","_id":"cl9pdnmpv000d81nv71gw874p"},{"name":"web","_id":"cl9pdnmpw000k81nvc3aydp2k"},{"name":"django","_id":"cl9pdnmpx000q81nv9ruk6qny"},{"name":"git","_id":"cl9pdnmpy000v81nv07nn55c3"},{"name":"flask","_id":"cl9pdnmq0001881nv4b6hc6h2"},{"name":"sql","_id":"cl9pdnmq0001d81nvhyq0f6s7"},{"name":"mongodb","_id":"cl9pdnmq1001l81nv7nq852ze"},{"name":"mysql","_id":"cl9pdnmq2001w81nv3r677acs"},{"name":"面试题","_id":"cl9pdnmq3002681nv94lt1a3q"},{"name":"linux","_id":"cl9pdnmq3002981nv9042hqvv"},{"name":"blog","_id":"cl9pdnmq4002f81nv706d5dmj"},{"name":"hexo","_id":"cl9pdnmq4002j81nvfz0whbay"},{"name":"AI","_id":"cl9pdnmq4002m81nvd9pp1th1"},{"name":"关键字","_id":"cl9pdnmq4002r81nvbog45pnb"},{"name":"python","_id":"cl9pdnmq4002v81nveap7edkj"},{"name":"概念","_id":"cl9pdnmq5002z81nva5t5a6iq"},{"name":"第三方库","_id":"cl9pdnmq5003781nv0whh3xov"},{"name":"linix","_id":"cl9pdnmq5003a81nv2nihgm8y"},{"name":"ros","_id":"cl9pdnmq5003f81nv9782dq13"},{"name":"爬虫","_id":"cl9pdnmq6003i81nvazxradf2"},{"name":"scrapy","_id":"cl9pdnmq6003n81nvanr1dbu9"},{"name":"pycharm","_id":"cl9pdnmq6003q81nvaaej98lh"},{"name":"插件","_id":"cl9pdnmq6003u81nv9owg6jwg"},{"name":"svn","_id":"cl9pdnmq6003v81nv44iy54we"},{"name":"tensorflow","_id":"cl9pdnmq6004081nv45bq5mkg"},{"name":"web开发","_id":"cl9pdnmq6004181nv3to1hdzq"},{"name":"nginx","_id":"cl9pdnmq7004881nv3hw38ytn"},{"name":"window","_id":"cl9pdnmq7004981nv98jxh6p2"},{"name":"目标识别","_id":"cl9pdnmq7004c81nveugu41re"},{"name":"yolo","_id":"cl9pdnmq7004e81nv8c49bj0l"},{"name":"日常","_id":"cl9pdnmq7004f81nvcezveuht"},{"name":"数据分析","_id":"cl9pdnmq7004i81nv3clseq6v"},{"name":"编码习惯","_id":"cl9pdnmq8004k81nv9uhbfqqr"},{"name":"java","_id":"cl9pdnmq8004m81nvhh0thse1"}]}}